/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.178
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.tripartie.tpdk.model.MetadataDisputeRead;
import com.tripartie.tpdk.model.ParcelDisputeRead;
import com.tripartie.tpdk.model.TransactionDisputeRead;
import com.tripartie.tpdk.model.ViewDisputeRead;
import com.tripartie.tpdk.model.WorkflowEventDisputeRead;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.tripartie.tpdk.JSON;

/**
 * Access directly our resolution center without having used the safe-checkout feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-07T15:33:34.209225Z[Etc/UTC]")
public class DisputeDisputeRead {
  public static final String SERIALIZED_NAME_ULID = "ulid";
  @SerializedName(SERIALIZED_NAME_ULID)
  private String ulid;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionDisputeRead transaction;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    SUBMITTED("SUBMITTED"),
    
    OPENED("OPENED"),
    
    ABANDONED("ABANDONED"),
    
    OBJECTED("OBJECTED"),
    
    PENDING_SHIPMENT("PENDING_SHIPMENT"),
    
    SHIPPED("SHIPPED"),
    
    IN_TRANSIT("IN_TRANSIT"),
    
    RETURNED("RETURNED"),
    
    DISMISSED("DISMISSED"),
    
    RESOLVED("RESOLVED"),
    
    PENDING("PENDING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = StatusEnum.CREATED;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "itemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  /**
   * Gets or Sets issueType
   */
  @JsonAdapter(IssueTypeEnum.Adapter.class)
  public enum IssueTypeEnum {
    NOT_AS_DESCRIBED("NOT_AS_DESCRIBED"),
    
    DOES_NOT_WORK("DOES_NOT_WORK"),
    
    IS_INCOMPLETE("IS_INCOMPLETE"),
    
    DELIVERY_ISSUE("DELIVERY_ISSUE"),
    
    ALLEGED_FRAUD("ALLEGED_FRAUD"),
    
    NULL("null");

    private String value;

    IssueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueTypeEnum fromValue(String value) {
      for (IssueTypeEnum b : IssueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private IssueTypeEnum issueType;

  /**
   * To be set only in conjunction of issueType &#x3D; NOT_AS_DESCRIBED.
   */
  @JsonAdapter(IssueInDescriptionTypeEnum.Adapter.class)
  public enum IssueInDescriptionTypeEnum {
    WRONG_COLOUR("WRONG_COLOUR"),
    
    DAMAGED_OR_USED("DAMAGED_OR_USED"),
    
    INCORRECT_FORMAT_OR_SIZE("INCORRECT_FORMAT_OR_SIZE"),
    
    DIFFERENT_MATERIAL("DIFFERENT_MATERIAL"),
    
    NULL("null");

    private String value;

    IssueInDescriptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueInDescriptionTypeEnum fromValue(String value) {
      for (IssueInDescriptionTypeEnum b : IssueInDescriptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssueInDescriptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueInDescriptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueInDescriptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssueInDescriptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssueInDescriptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_IN_DESCRIPTION_TYPE = "issueInDescriptionType";
  @SerializedName(SERIALIZED_NAME_ISSUE_IN_DESCRIPTION_TYPE)
  private IssueInDescriptionTypeEnum issueInDescriptionType;

  public static final String SERIALIZED_NAME_ISSUE_MENTIONED_IN_OFFER = "issueMentionedInOffer";
  @SerializedName(SERIALIZED_NAME_ISSUE_MENTIONED_IN_OFFER)
  private Boolean issueMentionedInOffer;

  public static final String SERIALIZED_NAME_ISSUE_DETAILS = "issueDetails";
  @SerializedName(SERIALIZED_NAME_ISSUE_DETAILS)
  private String issueDetails;

  public static final String SERIALIZED_NAME_COMPLAINANT_TRUTHFULNESS_SCORE = "complainantTruthfulnessScore";
  @SerializedName(SERIALIZED_NAME_COMPLAINANT_TRUTHFULNESS_SCORE)
  private Integer complainantTruthfulnessScore = 100;

  public static final String SERIALIZED_NAME_SELLER_TRUTHFULNESS_SCORE = "sellerTruthfulnessScore";
  @SerializedName(SERIALIZED_NAME_SELLER_TRUTHFULNESS_SCORE)
  private Integer sellerTruthfulnessScore = 100;

  /**
   * Gets or Sets complainantStake
   */
  @JsonAdapter(ComplainantStakeEnum.Adapter.class)
  public enum ComplainantStakeEnum {
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    NULL("null");

    private String value;

    ComplainantStakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplainantStakeEnum fromValue(String value) {
      for (ComplainantStakeEnum b : ComplainantStakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ComplainantStakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplainantStakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplainantStakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplainantStakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplainantStakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLAINANT_STAKE = "complainantStake";
  @SerializedName(SERIALIZED_NAME_COMPLAINANT_STAKE)
  private ComplainantStakeEnum complainantStake;

  /**
   * Gets or Sets inferredStake
   */
  @JsonAdapter(InferredStakeEnum.Adapter.class)
  public enum InferredStakeEnum {
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    NULL("null");

    private String value;

    InferredStakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InferredStakeEnum fromValue(String value) {
      for (InferredStakeEnum b : InferredStakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InferredStakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InferredStakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InferredStakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InferredStakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InferredStakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INFERRED_STAKE = "inferredStake";
  @SerializedName(SERIALIZED_NAME_INFERRED_STAKE)
  private InferredStakeEnum inferredStake;

  /**
   * Gets or Sets recommendedSolution
   */
  @JsonAdapter(RecommendedSolutionEnum.Adapter.class)
  public enum RecommendedSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    RecommendedSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedSolutionEnum fromValue(String value) {
      for (RecommendedSolutionEnum b : RecommendedSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RecommendedSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_SOLUTION = "recommendedSolution";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_SOLUTION)
  private RecommendedSolutionEnum recommendedSolution;

  public static final String SERIALIZED_NAME_RECOMMENDED_PARTIAL_REFUND_AMOUNT = "recommendedPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_PARTIAL_REFUND_AMOUNT)
  private Integer recommendedPartialRefundAmount;

  /**
   * Gets or Sets chosenSolution
   */
  @JsonAdapter(ChosenSolutionEnum.Adapter.class)
  public enum ChosenSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    ChosenSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChosenSolutionEnum fromValue(String value) {
      for (ChosenSolutionEnum b : ChosenSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChosenSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChosenSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChosenSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChosenSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChosenSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHOSEN_SOLUTION = "chosenSolution";
  @SerializedName(SERIALIZED_NAME_CHOSEN_SOLUTION)
  private ChosenSolutionEnum chosenSolution;

  public static final String SERIALIZED_NAME_CHOSEN_PARTIAL_REFUND_AMOUNT = "chosenPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_CHOSEN_PARTIAL_REFUND_AMOUNT)
  private Integer chosenPartialRefundAmount;

  /**
   * Gets or Sets counterSolution
   */
  @JsonAdapter(CounterSolutionEnum.Adapter.class)
  public enum CounterSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    CounterSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CounterSolutionEnum fromValue(String value) {
      for (CounterSolutionEnum b : CounterSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CounterSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CounterSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CounterSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CounterSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CounterSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTER_SOLUTION = "counterSolution";
  @SerializedName(SERIALIZED_NAME_COUNTER_SOLUTION)
  private CounterSolutionEnum counterSolution;

  public static final String SERIALIZED_NAME_COUNTER_PARTIAL_REFUND_AMOUNT = "counterPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTIAL_REFUND_AMOUNT)
  private Integer counterPartialRefundAmount;

  public static final String SERIALIZED_NAME_SELLER_NOTES = "sellerNotes";
  @SerializedName(SERIALIZED_NAME_SELLER_NOTES)
  private String sellerNotes;

  /**
   * Gets or Sets sellerRejectionReason
   */
  @JsonAdapter(SellerRejectionReasonEnum.Adapter.class)
  public enum SellerRejectionReasonEnum {
    UNJUSTIFIED_REQUEST("UNJUSTIFIED_REQUEST"),
    
    ABUSIVE_REQUEST("ABUSIVE_REQUEST"),
    
    FRAUD_ATTEMPT("FRAUD_ATTEMPT"),
    
    OTHER("OTHER"),
    
    NULL("null");

    private String value;

    SellerRejectionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SellerRejectionReasonEnum fromValue(String value) {
      for (SellerRejectionReasonEnum b : SellerRejectionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SellerRejectionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SellerRejectionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SellerRejectionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SellerRejectionReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SellerRejectionReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELLER_REJECTION_REASON = "sellerRejectionReason";
  @SerializedName(SERIALIZED_NAME_SELLER_REJECTION_REASON)
  private SellerRejectionReasonEnum sellerRejectionReason;

  public static final String SERIALIZED_NAME_COMPLAINANT_APPROVAL = "complainantApproval";
  @SerializedName(SERIALIZED_NAME_COMPLAINANT_APPROVAL)
  private Boolean complainantApproval;

  public static final String SERIALIZED_NAME_SELLER_APPROVAL = "sellerApproval";
  @SerializedName(SERIALIZED_NAME_SELLER_APPROVAL)
  private Boolean sellerApproval;

  /**
   * Gets or Sets platformSolution
   */
  @JsonAdapter(PlatformSolutionEnum.Adapter.class)
  public enum PlatformSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    PlatformSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformSolutionEnum fromValue(String value) {
      for (PlatformSolutionEnum b : PlatformSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlatformSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_SOLUTION = "platformSolution";
  @SerializedName(SERIALIZED_NAME_PLATFORM_SOLUTION)
  private PlatformSolutionEnum platformSolution;

  public static final String SERIALIZED_NAME_PLATFORM_PARTIAL_REFUND_AMOUNT = "platformPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_PLATFORM_PARTIAL_REFUND_AMOUNT)
  private Integer platformPartialRefundAmount;

  public static final String SERIALIZED_NAME_PLATFORM_APPROVAL = "platformApproval";
  @SerializedName(SERIALIZED_NAME_PLATFORM_APPROVAL)
  private Boolean platformApproval;

  /**
   * Gets or Sets platformActorType
   */
  @JsonAdapter(PlatformActorTypeEnum.Adapter.class)
  public enum PlatformActorTypeEnum {
    RULING("RULING"),
    
    AI("AI"),
    
    CUSTOMER_CARE("CUSTOMER_CARE"),
    
    PLATFORM_SUPPORT("PLATFORM_SUPPORT"),
    
    NULL("null");

    private String value;

    PlatformActorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformActorTypeEnum fromValue(String value) {
      for (PlatformActorTypeEnum b : PlatformActorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlatformActorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformActorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformActorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformActorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformActorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_ACTOR_TYPE = "platformActorType";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ACTOR_TYPE)
  private PlatformActorTypeEnum platformActorType;

  public static final String SERIALIZED_NAME_PLATFORM_REASONING = "platformReasoning";
  @SerializedName(SERIALIZED_NAME_PLATFORM_REASONING)
  private String platformReasoning;

  public static final String SERIALIZED_NAME_ARBITRATION_BY = "arbitrationBy";
  @SerializedName(SERIALIZED_NAME_ARBITRATION_BY)
  private String arbitrationBy;

  public static final String SERIALIZED_NAME_PARCELS = "parcels";
  @SerializedName(SERIALIZED_NAME_PARCELS)
  private List<ParcelDisputeRead> parcels = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<ViewDisputeRead> views = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataDisputeRead> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<WorkflowEventDisputeRead> events;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Integer viewCount;

  public static final String SERIALIZED_NAME_STATUS_EXPIRATION = "statusExpiration";
  @SerializedName(SERIALIZED_NAME_STATUS_EXPIRATION)
  private OffsetDateTime statusExpiration;

  /**
   * Determine who is awaited (actor) for the next transition
   */
  @JsonAdapter(AwaitedPartyEnum.Adapter.class)
  public enum AwaitedPartyEnum {
    BUYER("BUYER"),
    
    PLATFORM("PLATFORM"),
    
    SELLER("SELLER");

    private String value;

    AwaitedPartyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AwaitedPartyEnum fromValue(String value) {
      for (AwaitedPartyEnum b : AwaitedPartyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AwaitedPartyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AwaitedPartyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AwaitedPartyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AwaitedPartyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AwaitedPartyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AWAITED_PARTY = "awaitedParty";
  @SerializedName(SERIALIZED_NAME_AWAITED_PARTY)
  private AwaitedPartyEnum awaitedParty;

  public static final String SERIALIZED_NAME_IRI = "iri";
  @SerializedName(SERIALIZED_NAME_IRI)
  private String iri;

  public static final String SERIALIZED_NAME_MESSAGE_COUNT = "messageCount";
  @SerializedName(SERIALIZED_NAME_MESSAGE_COUNT)
  private Integer messageCount;

  /**
   * Determine who won the case, if not specified, then it is ongoing.
   */
  @JsonAdapter(ClosedInFavorOfEnum.Adapter.class)
  public enum ClosedInFavorOfEnum {
    BUYER("BUYER"),
    
    SELLER("SELLER");

    private String value;

    ClosedInFavorOfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedInFavorOfEnum fromValue(String value) {
      for (ClosedInFavorOfEnum b : ClosedInFavorOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedInFavorOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedInFavorOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedInFavorOfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedInFavorOfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedInFavorOfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_IN_FAVOR_OF = "closedInFavorOf";
  @SerializedName(SERIALIZED_NAME_CLOSED_IN_FAVOR_OF)
  private ClosedInFavorOfEnum closedInFavorOf;

  public static final String SERIALIZED_NAME_DISBURSED_BY_BUYER = "disbursedByBuyer";
  @SerializedName(SERIALIZED_NAME_DISBURSED_BY_BUYER)
  private BigDecimal disbursedByBuyer;

  public static final String SERIALIZED_NAME_MAX_REFUNDABLE_FOR_BUYER = "maxRefundableForBuyer";
  @SerializedName(SERIALIZED_NAME_MAX_REFUNDABLE_FOR_BUYER)
  private BigDecimal maxRefundableForBuyer;

  public DisputeDisputeRead() {
  }

  public DisputeDisputeRead(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     Integer viewCount, 
     OffsetDateTime statusExpiration, 
     AwaitedPartyEnum awaitedParty, 
     String iri, 
     Integer messageCount, 
     ClosedInFavorOfEnum closedInFavorOf, 
     BigDecimal disbursedByBuyer, 
     BigDecimal maxRefundableForBuyer
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.viewCount = viewCount;
    this.statusExpiration = statusExpiration;
    this.awaitedParty = awaitedParty;
    this.iri = iri;
    this.messageCount = messageCount;
    this.closedInFavorOf = closedInFavorOf;
    this.disbursedByBuyer = disbursedByBuyer;
    this.maxRefundableForBuyer = maxRefundableForBuyer;
  }

  public DisputeDisputeRead ulid(String ulid) {
    this.ulid = ulid;
    return this;
  }

   /**
   * Get ulid
   * @return ulid
  **/
  @javax.annotation.Nonnull
  public String getUlid() {
    return ulid;
  }

  public void setUlid(String ulid) {
    this.ulid = ulid;
  }


  public DisputeDisputeRead transaction(TransactionDisputeRead transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable
  public TransactionDisputeRead getTransaction() {
    return transaction;
  }

  public void setTransaction(TransactionDisputeRead transaction) {
    this.transaction = transaction;
  }


  public DisputeDisputeRead status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DisputeDisputeRead redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Fill-in that field IF you intend to redirect your customer instead of using a WebView.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public DisputeDisputeRead itemCount(Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

   /**
   * The dispute may concern only PART of the package. Specify it there.
   * @return itemCount
  **/
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(Integer itemCount) {
    this.itemCount = itemCount;
  }


  public DisputeDisputeRead issueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
    return this;
  }

   /**
   * Get issueType
   * @return issueType
  **/
  @javax.annotation.Nullable
  public IssueTypeEnum getIssueType() {
    return issueType;
  }

  public void setIssueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
  }


  public DisputeDisputeRead issueInDescriptionType(IssueInDescriptionTypeEnum issueInDescriptionType) {
    this.issueInDescriptionType = issueInDescriptionType;
    return this;
  }

   /**
   * To be set only in conjunction of issueType &#x3D; NOT_AS_DESCRIBED.
   * @return issueInDescriptionType
  **/
  @javax.annotation.Nullable
  public IssueInDescriptionTypeEnum getIssueInDescriptionType() {
    return issueInDescriptionType;
  }

  public void setIssueInDescriptionType(IssueInDescriptionTypeEnum issueInDescriptionType) {
    this.issueInDescriptionType = issueInDescriptionType;
  }


  public DisputeDisputeRead issueMentionedInOffer(Boolean issueMentionedInOffer) {
    this.issueMentionedInOffer = issueMentionedInOffer;
    return this;
  }

   /**
   * Get issueMentionedInOffer
   * @return issueMentionedInOffer
  **/
  @javax.annotation.Nullable
  public Boolean getIssueMentionedInOffer() {
    return issueMentionedInOffer;
  }

  public void setIssueMentionedInOffer(Boolean issueMentionedInOffer) {
    this.issueMentionedInOffer = issueMentionedInOffer;
  }


  public DisputeDisputeRead issueDetails(String issueDetails) {
    this.issueDetails = issueDetails;
    return this;
  }

   /**
   * Get issueDetails
   * @return issueDetails
  **/
  @javax.annotation.Nullable
  public String getIssueDetails() {
    return issueDetails;
  }

  public void setIssueDetails(String issueDetails) {
    this.issueDetails = issueDetails;
  }


  public DisputeDisputeRead complainantTruthfulnessScore(Integer complainantTruthfulnessScore) {
    this.complainantTruthfulnessScore = complainantTruthfulnessScore;
    return this;
  }

   /**
   * Get complainantTruthfulnessScore
   * @return complainantTruthfulnessScore
  **/
  @javax.annotation.Nonnull
  public Integer getComplainantTruthfulnessScore() {
    return complainantTruthfulnessScore;
  }

  public void setComplainantTruthfulnessScore(Integer complainantTruthfulnessScore) {
    this.complainantTruthfulnessScore = complainantTruthfulnessScore;
  }


  public DisputeDisputeRead sellerTruthfulnessScore(Integer sellerTruthfulnessScore) {
    this.sellerTruthfulnessScore = sellerTruthfulnessScore;
    return this;
  }

   /**
   * Get sellerTruthfulnessScore
   * @return sellerTruthfulnessScore
  **/
  @javax.annotation.Nonnull
  public Integer getSellerTruthfulnessScore() {
    return sellerTruthfulnessScore;
  }

  public void setSellerTruthfulnessScore(Integer sellerTruthfulnessScore) {
    this.sellerTruthfulnessScore = sellerTruthfulnessScore;
  }


  public DisputeDisputeRead complainantStake(ComplainantStakeEnum complainantStake) {
    this.complainantStake = complainantStake;
    return this;
  }

   /**
   * Get complainantStake
   * @return complainantStake
  **/
  @javax.annotation.Nullable
  public ComplainantStakeEnum getComplainantStake() {
    return complainantStake;
  }

  public void setComplainantStake(ComplainantStakeEnum complainantStake) {
    this.complainantStake = complainantStake;
  }


  public DisputeDisputeRead inferredStake(InferredStakeEnum inferredStake) {
    this.inferredStake = inferredStake;
    return this;
  }

   /**
   * Get inferredStake
   * @return inferredStake
  **/
  @javax.annotation.Nullable
  public InferredStakeEnum getInferredStake() {
    return inferredStake;
  }

  public void setInferredStake(InferredStakeEnum inferredStake) {
    this.inferredStake = inferredStake;
  }


  public DisputeDisputeRead recommendedSolution(RecommendedSolutionEnum recommendedSolution) {
    this.recommendedSolution = recommendedSolution;
    return this;
  }

   /**
   * Get recommendedSolution
   * @return recommendedSolution
  **/
  @javax.annotation.Nullable
  public RecommendedSolutionEnum getRecommendedSolution() {
    return recommendedSolution;
  }

  public void setRecommendedSolution(RecommendedSolutionEnum recommendedSolution) {
    this.recommendedSolution = recommendedSolution;
  }


  public DisputeDisputeRead recommendedPartialRefundAmount(Integer recommendedPartialRefundAmount) {
    this.recommendedPartialRefundAmount = recommendedPartialRefundAmount;
    return this;
  }

   /**
   * Get recommendedPartialRefundAmount
   * @return recommendedPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getRecommendedPartialRefundAmount() {
    return recommendedPartialRefundAmount;
  }

  public void setRecommendedPartialRefundAmount(Integer recommendedPartialRefundAmount) {
    this.recommendedPartialRefundAmount = recommendedPartialRefundAmount;
  }


  public DisputeDisputeRead chosenSolution(ChosenSolutionEnum chosenSolution) {
    this.chosenSolution = chosenSolution;
    return this;
  }

   /**
   * Get chosenSolution
   * @return chosenSolution
  **/
  @javax.annotation.Nullable
  public ChosenSolutionEnum getChosenSolution() {
    return chosenSolution;
  }

  public void setChosenSolution(ChosenSolutionEnum chosenSolution) {
    this.chosenSolution = chosenSolution;
  }


  public DisputeDisputeRead chosenPartialRefundAmount(Integer chosenPartialRefundAmount) {
    this.chosenPartialRefundAmount = chosenPartialRefundAmount;
    return this;
  }

   /**
   * Get chosenPartialRefundAmount
   * @return chosenPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getChosenPartialRefundAmount() {
    return chosenPartialRefundAmount;
  }

  public void setChosenPartialRefundAmount(Integer chosenPartialRefundAmount) {
    this.chosenPartialRefundAmount = chosenPartialRefundAmount;
  }


  public DisputeDisputeRead counterSolution(CounterSolutionEnum counterSolution) {
    this.counterSolution = counterSolution;
    return this;
  }

   /**
   * Get counterSolution
   * @return counterSolution
  **/
  @javax.annotation.Nullable
  public CounterSolutionEnum getCounterSolution() {
    return counterSolution;
  }

  public void setCounterSolution(CounterSolutionEnum counterSolution) {
    this.counterSolution = counterSolution;
  }


  public DisputeDisputeRead counterPartialRefundAmount(Integer counterPartialRefundAmount) {
    this.counterPartialRefundAmount = counterPartialRefundAmount;
    return this;
  }

   /**
   * Get counterPartialRefundAmount
   * @return counterPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getCounterPartialRefundAmount() {
    return counterPartialRefundAmount;
  }

  public void setCounterPartialRefundAmount(Integer counterPartialRefundAmount) {
    this.counterPartialRefundAmount = counterPartialRefundAmount;
  }


  public DisputeDisputeRead sellerNotes(String sellerNotes) {
    this.sellerNotes = sellerNotes;
    return this;
  }

   /**
   * Get sellerNotes
   * @return sellerNotes
  **/
  @javax.annotation.Nullable
  public String getSellerNotes() {
    return sellerNotes;
  }

  public void setSellerNotes(String sellerNotes) {
    this.sellerNotes = sellerNotes;
  }


  public DisputeDisputeRead sellerRejectionReason(SellerRejectionReasonEnum sellerRejectionReason) {
    this.sellerRejectionReason = sellerRejectionReason;
    return this;
  }

   /**
   * Get sellerRejectionReason
   * @return sellerRejectionReason
  **/
  @javax.annotation.Nullable
  public SellerRejectionReasonEnum getSellerRejectionReason() {
    return sellerRejectionReason;
  }

  public void setSellerRejectionReason(SellerRejectionReasonEnum sellerRejectionReason) {
    this.sellerRejectionReason = sellerRejectionReason;
  }


  public DisputeDisputeRead complainantApproval(Boolean complainantApproval) {
    this.complainantApproval = complainantApproval;
    return this;
  }

   /**
   * Get complainantApproval
   * @return complainantApproval
  **/
  @javax.annotation.Nullable
  public Boolean getComplainantApproval() {
    return complainantApproval;
  }

  public void setComplainantApproval(Boolean complainantApproval) {
    this.complainantApproval = complainantApproval;
  }


  public DisputeDisputeRead sellerApproval(Boolean sellerApproval) {
    this.sellerApproval = sellerApproval;
    return this;
  }

   /**
   * Get sellerApproval
   * @return sellerApproval
  **/
  @javax.annotation.Nullable
  public Boolean getSellerApproval() {
    return sellerApproval;
  }

  public void setSellerApproval(Boolean sellerApproval) {
    this.sellerApproval = sellerApproval;
  }


  public DisputeDisputeRead platformSolution(PlatformSolutionEnum platformSolution) {
    this.platformSolution = platformSolution;
    return this;
  }

   /**
   * Get platformSolution
   * @return platformSolution
  **/
  @javax.annotation.Nullable
  public PlatformSolutionEnum getPlatformSolution() {
    return platformSolution;
  }

  public void setPlatformSolution(PlatformSolutionEnum platformSolution) {
    this.platformSolution = platformSolution;
  }


  public DisputeDisputeRead platformPartialRefundAmount(Integer platformPartialRefundAmount) {
    this.platformPartialRefundAmount = platformPartialRefundAmount;
    return this;
  }

   /**
   * Get platformPartialRefundAmount
   * @return platformPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getPlatformPartialRefundAmount() {
    return platformPartialRefundAmount;
  }

  public void setPlatformPartialRefundAmount(Integer platformPartialRefundAmount) {
    this.platformPartialRefundAmount = platformPartialRefundAmount;
  }


  public DisputeDisputeRead platformApproval(Boolean platformApproval) {
    this.platformApproval = platformApproval;
    return this;
  }

   /**
   * Get platformApproval
   * @return platformApproval
  **/
  @javax.annotation.Nullable
  public Boolean getPlatformApproval() {
    return platformApproval;
  }

  public void setPlatformApproval(Boolean platformApproval) {
    this.platformApproval = platformApproval;
  }


  public DisputeDisputeRead platformActorType(PlatformActorTypeEnum platformActorType) {
    this.platformActorType = platformActorType;
    return this;
  }

   /**
   * Get platformActorType
   * @return platformActorType
  **/
  @javax.annotation.Nullable
  public PlatformActorTypeEnum getPlatformActorType() {
    return platformActorType;
  }

  public void setPlatformActorType(PlatformActorTypeEnum platformActorType) {
    this.platformActorType = platformActorType;
  }


  public DisputeDisputeRead platformReasoning(String platformReasoning) {
    this.platformReasoning = platformReasoning;
    return this;
  }

   /**
   * Explicit additional information about the platform decision. Could be written by AI, Ruling or Customer Care.
   * @return platformReasoning
  **/
  @javax.annotation.Nullable
  public String getPlatformReasoning() {
    return platformReasoning;
  }

  public void setPlatformReasoning(String platformReasoning) {
    this.platformReasoning = platformReasoning;
  }


  public DisputeDisputeRead arbitrationBy(String arbitrationBy) {
    this.arbitrationBy = arbitrationBy;
    return this;
  }

   /**
   * Get arbitrationBy
   * @return arbitrationBy
  **/
  @javax.annotation.Nullable
  public String getArbitrationBy() {
    return arbitrationBy;
  }

  public void setArbitrationBy(String arbitrationBy) {
    this.arbitrationBy = arbitrationBy;
  }


  public DisputeDisputeRead parcels(List<ParcelDisputeRead> parcels) {
    this.parcels = parcels;
    return this;
  }

  public DisputeDisputeRead addParcelsItem(ParcelDisputeRead parcelsItem) {
    if (this.parcels == null) {
      this.parcels = new ArrayList<>();
    }
    this.parcels.add(parcelsItem);
    return this;
  }

   /**
   * Get parcels
   * @return parcels
  **/
  @javax.annotation.Nonnull
  public List<ParcelDisputeRead> getParcels() {
    return parcels;
  }

  public void setParcels(List<ParcelDisputeRead> parcels) {
    this.parcels = parcels;
  }


  public DisputeDisputeRead views(List<ViewDisputeRead> views) {
    this.views = views;
    return this;
  }

  public DisputeDisputeRead addViewsItem(ViewDisputeRead viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @javax.annotation.Nonnull
  public List<ViewDisputeRead> getViews() {
    return views;
  }

  public void setViews(List<ViewDisputeRead> views) {
    this.views = views;
  }


  public DisputeDisputeRead metadata(List<MetadataDisputeRead> metadata) {
    this.metadata = metadata;
    return this;
  }

  public DisputeDisputeRead addMetadataItem(MetadataDisputeRead metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public List<MetadataDisputeRead> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataDisputeRead> metadata) {
    this.metadata = metadata;
  }


  public DisputeDisputeRead events(List<WorkflowEventDisputeRead> events) {
    this.events = events;
    return this;
  }

  public DisputeDisputeRead addEventsItem(WorkflowEventDisputeRead eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  public List<WorkflowEventDisputeRead> getEvents() {
    return events;
  }

  public void setEvents(List<WorkflowEventDisputeRead> events) {
    this.events = events;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



   /**
   * Get viewCount
   * @return viewCount
  **/
  @javax.annotation.Nullable
  public Integer getViewCount() {
    return viewCount;
  }



   /**
   * Yield if eligible the date-time at which the dispute state expire.
   * @return statusExpiration
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStatusExpiration() {
    return statusExpiration;
  }



   /**
   * Determine who is awaited (actor) for the next transition
   * @return awaitedParty
  **/
  @javax.annotation.Nullable
  public AwaitedPartyEnum getAwaitedParty() {
    return awaitedParty;
  }



   /**
   * Get iri
   * @return iri
  **/
  @javax.annotation.Nullable
  public String getIri() {
    return iri;
  }



   /**
   * Get messageCount
   * @return messageCount
  **/
  @javax.annotation.Nullable
  public Integer getMessageCount() {
    return messageCount;
  }



   /**
   * Determine who won the case, if not specified, then it is ongoing.
   * @return closedInFavorOf
  **/
  @javax.annotation.Nullable
  public ClosedInFavorOfEnum getClosedInFavorOf() {
    return closedInFavorOf;
  }



   /**
   * Total amount disbursed by the buyer to acquire the item.
   * @return disbursedByBuyer
  **/
  @javax.annotation.Nullable
  public BigDecimal getDisbursedByBuyer() {
    return disbursedByBuyer;
  }



   /**
   * How much the buyer can actually receive back in case of a full refund.
   * @return maxRefundableForBuyer
  **/
  @javax.annotation.Nullable
  public BigDecimal getMaxRefundableForBuyer() {
    return maxRefundableForBuyer;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisputeDisputeRead disputeDisputeRead = (DisputeDisputeRead) o;
    return Objects.equals(this.ulid, disputeDisputeRead.ulid) &&
        Objects.equals(this.transaction, disputeDisputeRead.transaction) &&
        Objects.equals(this.status, disputeDisputeRead.status) &&
        Objects.equals(this.redirectUrl, disputeDisputeRead.redirectUrl) &&
        Objects.equals(this.itemCount, disputeDisputeRead.itemCount) &&
        Objects.equals(this.issueType, disputeDisputeRead.issueType) &&
        Objects.equals(this.issueInDescriptionType, disputeDisputeRead.issueInDescriptionType) &&
        Objects.equals(this.issueMentionedInOffer, disputeDisputeRead.issueMentionedInOffer) &&
        Objects.equals(this.issueDetails, disputeDisputeRead.issueDetails) &&
        Objects.equals(this.complainantTruthfulnessScore, disputeDisputeRead.complainantTruthfulnessScore) &&
        Objects.equals(this.sellerTruthfulnessScore, disputeDisputeRead.sellerTruthfulnessScore) &&
        Objects.equals(this.complainantStake, disputeDisputeRead.complainantStake) &&
        Objects.equals(this.inferredStake, disputeDisputeRead.inferredStake) &&
        Objects.equals(this.recommendedSolution, disputeDisputeRead.recommendedSolution) &&
        Objects.equals(this.recommendedPartialRefundAmount, disputeDisputeRead.recommendedPartialRefundAmount) &&
        Objects.equals(this.chosenSolution, disputeDisputeRead.chosenSolution) &&
        Objects.equals(this.chosenPartialRefundAmount, disputeDisputeRead.chosenPartialRefundAmount) &&
        Objects.equals(this.counterSolution, disputeDisputeRead.counterSolution) &&
        Objects.equals(this.counterPartialRefundAmount, disputeDisputeRead.counterPartialRefundAmount) &&
        Objects.equals(this.sellerNotes, disputeDisputeRead.sellerNotes) &&
        Objects.equals(this.sellerRejectionReason, disputeDisputeRead.sellerRejectionReason) &&
        Objects.equals(this.complainantApproval, disputeDisputeRead.complainantApproval) &&
        Objects.equals(this.sellerApproval, disputeDisputeRead.sellerApproval) &&
        Objects.equals(this.platformSolution, disputeDisputeRead.platformSolution) &&
        Objects.equals(this.platformPartialRefundAmount, disputeDisputeRead.platformPartialRefundAmount) &&
        Objects.equals(this.platformApproval, disputeDisputeRead.platformApproval) &&
        Objects.equals(this.platformActorType, disputeDisputeRead.platformActorType) &&
        Objects.equals(this.platformReasoning, disputeDisputeRead.platformReasoning) &&
        Objects.equals(this.arbitrationBy, disputeDisputeRead.arbitrationBy) &&
        Objects.equals(this.parcels, disputeDisputeRead.parcels) &&
        Objects.equals(this.views, disputeDisputeRead.views) &&
        Objects.equals(this.metadata, disputeDisputeRead.metadata) &&
        Objects.equals(this.events, disputeDisputeRead.events) &&
        Objects.equals(this.createdAt, disputeDisputeRead.createdAt) &&
        Objects.equals(this.updatedAt, disputeDisputeRead.updatedAt) &&
        Objects.equals(this.viewCount, disputeDisputeRead.viewCount) &&
        Objects.equals(this.statusExpiration, disputeDisputeRead.statusExpiration) &&
        Objects.equals(this.awaitedParty, disputeDisputeRead.awaitedParty) &&
        Objects.equals(this.iri, disputeDisputeRead.iri) &&
        Objects.equals(this.messageCount, disputeDisputeRead.messageCount) &&
        Objects.equals(this.closedInFavorOf, disputeDisputeRead.closedInFavorOf) &&
        Objects.equals(this.disbursedByBuyer, disputeDisputeRead.disbursedByBuyer) &&
        Objects.equals(this.maxRefundableForBuyer, disputeDisputeRead.maxRefundableForBuyer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ulid, transaction, status, redirectUrl, itemCount, issueType, issueInDescriptionType, issueMentionedInOffer, issueDetails, complainantTruthfulnessScore, sellerTruthfulnessScore, complainantStake, inferredStake, recommendedSolution, recommendedPartialRefundAmount, chosenSolution, chosenPartialRefundAmount, counterSolution, counterPartialRefundAmount, sellerNotes, sellerRejectionReason, complainantApproval, sellerApproval, platformSolution, platformPartialRefundAmount, platformApproval, platformActorType, platformReasoning, arbitrationBy, parcels, views, metadata, events, createdAt, updatedAt, viewCount, statusExpiration, awaitedParty, iri, messageCount, closedInFavorOf, disbursedByBuyer, maxRefundableForBuyer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisputeDisputeRead {\n");
    sb.append("    ulid: ").append(toIndentedString(ulid)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    issueInDescriptionType: ").append(toIndentedString(issueInDescriptionType)).append("\n");
    sb.append("    issueMentionedInOffer: ").append(toIndentedString(issueMentionedInOffer)).append("\n");
    sb.append("    issueDetails: ").append(toIndentedString(issueDetails)).append("\n");
    sb.append("    complainantTruthfulnessScore: ").append(toIndentedString(complainantTruthfulnessScore)).append("\n");
    sb.append("    sellerTruthfulnessScore: ").append(toIndentedString(sellerTruthfulnessScore)).append("\n");
    sb.append("    complainantStake: ").append(toIndentedString(complainantStake)).append("\n");
    sb.append("    inferredStake: ").append(toIndentedString(inferredStake)).append("\n");
    sb.append("    recommendedSolution: ").append(toIndentedString(recommendedSolution)).append("\n");
    sb.append("    recommendedPartialRefundAmount: ").append(toIndentedString(recommendedPartialRefundAmount)).append("\n");
    sb.append("    chosenSolution: ").append(toIndentedString(chosenSolution)).append("\n");
    sb.append("    chosenPartialRefundAmount: ").append(toIndentedString(chosenPartialRefundAmount)).append("\n");
    sb.append("    counterSolution: ").append(toIndentedString(counterSolution)).append("\n");
    sb.append("    counterPartialRefundAmount: ").append(toIndentedString(counterPartialRefundAmount)).append("\n");
    sb.append("    sellerNotes: ").append(toIndentedString(sellerNotes)).append("\n");
    sb.append("    sellerRejectionReason: ").append(toIndentedString(sellerRejectionReason)).append("\n");
    sb.append("    complainantApproval: ").append(toIndentedString(complainantApproval)).append("\n");
    sb.append("    sellerApproval: ").append(toIndentedString(sellerApproval)).append("\n");
    sb.append("    platformSolution: ").append(toIndentedString(platformSolution)).append("\n");
    sb.append("    platformPartialRefundAmount: ").append(toIndentedString(platformPartialRefundAmount)).append("\n");
    sb.append("    platformApproval: ").append(toIndentedString(platformApproval)).append("\n");
    sb.append("    platformActorType: ").append(toIndentedString(platformActorType)).append("\n");
    sb.append("    platformReasoning: ").append(toIndentedString(platformReasoning)).append("\n");
    sb.append("    arbitrationBy: ").append(toIndentedString(arbitrationBy)).append("\n");
    sb.append("    parcels: ").append(toIndentedString(parcels)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    statusExpiration: ").append(toIndentedString(statusExpiration)).append("\n");
    sb.append("    awaitedParty: ").append(toIndentedString(awaitedParty)).append("\n");
    sb.append("    iri: ").append(toIndentedString(iri)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    closedInFavorOf: ").append(toIndentedString(closedInFavorOf)).append("\n");
    sb.append("    disbursedByBuyer: ").append(toIndentedString(disbursedByBuyer)).append("\n");
    sb.append("    maxRefundableForBuyer: ").append(toIndentedString(maxRefundableForBuyer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ulid");
    openapiFields.add("transaction");
    openapiFields.add("status");
    openapiFields.add("redirectUrl");
    openapiFields.add("itemCount");
    openapiFields.add("issueType");
    openapiFields.add("issueInDescriptionType");
    openapiFields.add("issueMentionedInOffer");
    openapiFields.add("issueDetails");
    openapiFields.add("complainantTruthfulnessScore");
    openapiFields.add("sellerTruthfulnessScore");
    openapiFields.add("complainantStake");
    openapiFields.add("inferredStake");
    openapiFields.add("recommendedSolution");
    openapiFields.add("recommendedPartialRefundAmount");
    openapiFields.add("chosenSolution");
    openapiFields.add("chosenPartialRefundAmount");
    openapiFields.add("counterSolution");
    openapiFields.add("counterPartialRefundAmount");
    openapiFields.add("sellerNotes");
    openapiFields.add("sellerRejectionReason");
    openapiFields.add("complainantApproval");
    openapiFields.add("sellerApproval");
    openapiFields.add("platformSolution");
    openapiFields.add("platformPartialRefundAmount");
    openapiFields.add("platformApproval");
    openapiFields.add("platformActorType");
    openapiFields.add("platformReasoning");
    openapiFields.add("arbitrationBy");
    openapiFields.add("parcels");
    openapiFields.add("views");
    openapiFields.add("metadata");
    openapiFields.add("events");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("viewCount");
    openapiFields.add("statusExpiration");
    openapiFields.add("awaitedParty");
    openapiFields.add("iri");
    openapiFields.add("messageCount");
    openapiFields.add("closedInFavorOf");
    openapiFields.add("disbursedByBuyer");
    openapiFields.add("maxRefundableForBuyer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ulid");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("complainantTruthfulnessScore");
    openapiRequiredFields.add("sellerTruthfulnessScore");
    openapiRequiredFields.add("parcels");
    openapiRequiredFields.add("views");
    openapiRequiredFields.add("metadata");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DisputeDisputeRead
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisputeDisputeRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisputeDisputeRead is not found in the empty JSON string", DisputeDisputeRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisputeDisputeRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisputeDisputeRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisputeDisputeRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ulid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ulid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ulid").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionDisputeRead.validateJsonElement(jsonObj.get("transaction"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) && !jsonObj.get("issueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueType").toString()));
      }
      // validate the optional field `issueType`
      if (jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) {
        IssueTypeEnum.validateJsonElement(jsonObj.get("issueType"));
      }
      if ((jsonObj.get("issueInDescriptionType") != null && !jsonObj.get("issueInDescriptionType").isJsonNull()) && !jsonObj.get("issueInDescriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueInDescriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueInDescriptionType").toString()));
      }
      // validate the optional field `issueInDescriptionType`
      if (jsonObj.get("issueInDescriptionType") != null && !jsonObj.get("issueInDescriptionType").isJsonNull()) {
        IssueInDescriptionTypeEnum.validateJsonElement(jsonObj.get("issueInDescriptionType"));
      }
      if ((jsonObj.get("issueDetails") != null && !jsonObj.get("issueDetails").isJsonNull()) && !jsonObj.get("issueDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueDetails").toString()));
      }
      if ((jsonObj.get("complainantStake") != null && !jsonObj.get("complainantStake").isJsonNull()) && !jsonObj.get("complainantStake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complainantStake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complainantStake").toString()));
      }
      // validate the optional field `complainantStake`
      if (jsonObj.get("complainantStake") != null && !jsonObj.get("complainantStake").isJsonNull()) {
        ComplainantStakeEnum.validateJsonElement(jsonObj.get("complainantStake"));
      }
      if ((jsonObj.get("inferredStake") != null && !jsonObj.get("inferredStake").isJsonNull()) && !jsonObj.get("inferredStake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferredStake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferredStake").toString()));
      }
      // validate the optional field `inferredStake`
      if (jsonObj.get("inferredStake") != null && !jsonObj.get("inferredStake").isJsonNull()) {
        InferredStakeEnum.validateJsonElement(jsonObj.get("inferredStake"));
      }
      if ((jsonObj.get("recommendedSolution") != null && !jsonObj.get("recommendedSolution").isJsonNull()) && !jsonObj.get("recommendedSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedSolution").toString()));
      }
      // validate the optional field `recommendedSolution`
      if (jsonObj.get("recommendedSolution") != null && !jsonObj.get("recommendedSolution").isJsonNull()) {
        RecommendedSolutionEnum.validateJsonElement(jsonObj.get("recommendedSolution"));
      }
      if ((jsonObj.get("chosenSolution") != null && !jsonObj.get("chosenSolution").isJsonNull()) && !jsonObj.get("chosenSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chosenSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chosenSolution").toString()));
      }
      // validate the optional field `chosenSolution`
      if (jsonObj.get("chosenSolution") != null && !jsonObj.get("chosenSolution").isJsonNull()) {
        ChosenSolutionEnum.validateJsonElement(jsonObj.get("chosenSolution"));
      }
      if ((jsonObj.get("counterSolution") != null && !jsonObj.get("counterSolution").isJsonNull()) && !jsonObj.get("counterSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterSolution").toString()));
      }
      // validate the optional field `counterSolution`
      if (jsonObj.get("counterSolution") != null && !jsonObj.get("counterSolution").isJsonNull()) {
        CounterSolutionEnum.validateJsonElement(jsonObj.get("counterSolution"));
      }
      if ((jsonObj.get("sellerNotes") != null && !jsonObj.get("sellerNotes").isJsonNull()) && !jsonObj.get("sellerNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerNotes").toString()));
      }
      if ((jsonObj.get("sellerRejectionReason") != null && !jsonObj.get("sellerRejectionReason").isJsonNull()) && !jsonObj.get("sellerRejectionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerRejectionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerRejectionReason").toString()));
      }
      // validate the optional field `sellerRejectionReason`
      if (jsonObj.get("sellerRejectionReason") != null && !jsonObj.get("sellerRejectionReason").isJsonNull()) {
        SellerRejectionReasonEnum.validateJsonElement(jsonObj.get("sellerRejectionReason"));
      }
      if ((jsonObj.get("platformSolution") != null && !jsonObj.get("platformSolution").isJsonNull()) && !jsonObj.get("platformSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformSolution").toString()));
      }
      // validate the optional field `platformSolution`
      if (jsonObj.get("platformSolution") != null && !jsonObj.get("platformSolution").isJsonNull()) {
        PlatformSolutionEnum.validateJsonElement(jsonObj.get("platformSolution"));
      }
      if ((jsonObj.get("platformActorType") != null && !jsonObj.get("platformActorType").isJsonNull()) && !jsonObj.get("platformActorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformActorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformActorType").toString()));
      }
      // validate the optional field `platformActorType`
      if (jsonObj.get("platformActorType") != null && !jsonObj.get("platformActorType").isJsonNull()) {
        PlatformActorTypeEnum.validateJsonElement(jsonObj.get("platformActorType"));
      }
      if ((jsonObj.get("platformReasoning") != null && !jsonObj.get("platformReasoning").isJsonNull()) && !jsonObj.get("platformReasoning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformReasoning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformReasoning").toString()));
      }
      if ((jsonObj.get("arbitrationBy") != null && !jsonObj.get("arbitrationBy").isJsonNull()) && !jsonObj.get("arbitrationBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arbitrationBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arbitrationBy").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("parcels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parcels` to be an array in the JSON string but got `%s`", jsonObj.get("parcels").toString()));
      }

      JsonArray jsonArrayparcels = jsonObj.getAsJsonArray("parcels");
      // validate the required field `parcels` (array)
      for (int i = 0; i < jsonArrayparcels.size(); i++) {
        ParcelDisputeRead.validateJsonElement(jsonArrayparcels.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }

      JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
      // validate the required field `views` (array)
      for (int i = 0; i < jsonArrayviews.size(); i++) {
        ViewDisputeRead.validateJsonElement(jsonArrayviews.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }

      JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
      // validate the required field `metadata` (array)
      for (int i = 0; i < jsonArraymetadata.size(); i++) {
        MetadataDisputeRead.validateJsonElement(jsonArraymetadata.get(i));
      };
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            WorkflowEventDisputeRead.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("awaitedParty") != null && !jsonObj.get("awaitedParty").isJsonNull()) && !jsonObj.get("awaitedParty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awaitedParty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awaitedParty").toString()));
      }
      // validate the optional field `awaitedParty`
      if (jsonObj.get("awaitedParty") != null && !jsonObj.get("awaitedParty").isJsonNull()) {
        AwaitedPartyEnum.validateJsonElement(jsonObj.get("awaitedParty"));
      }
      if ((jsonObj.get("iri") != null && !jsonObj.get("iri").isJsonNull()) && !jsonObj.get("iri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iri").toString()));
      }
      if ((jsonObj.get("closedInFavorOf") != null && !jsonObj.get("closedInFavorOf").isJsonNull()) && !jsonObj.get("closedInFavorOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedInFavorOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedInFavorOf").toString()));
      }
      // validate the optional field `closedInFavorOf`
      if (jsonObj.get("closedInFavorOf") != null && !jsonObj.get("closedInFavorOf").isJsonNull()) {
        ClosedInFavorOfEnum.validateJsonElement(jsonObj.get("closedInFavorOf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisputeDisputeRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisputeDisputeRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisputeDisputeRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisputeDisputeRead.class));

       return (TypeAdapter<T>) new TypeAdapter<DisputeDisputeRead>() {
           @Override
           public void write(JsonWriter out, DisputeDisputeRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisputeDisputeRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DisputeDisputeRead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DisputeDisputeRead
  * @throws IOException if the JSON string is invalid with respect to DisputeDisputeRead
  */
  public static DisputeDisputeRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisputeDisputeRead.class);
  }

 /**
  * Convert an instance of DisputeDisputeRead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

