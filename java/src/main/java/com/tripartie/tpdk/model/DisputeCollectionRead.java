/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.202
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.tripartie.tpdk.model.TransactionCollectionRead;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.tripartie.tpdk.JSON;

/**
 * Access directly our resolution center without having used the safe-checkout feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-26T18:54:19.017757Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class DisputeCollectionRead {
  public static final String SERIALIZED_NAME_ULID = "ulid";
  @SerializedName(SERIALIZED_NAME_ULID)
  private String ulid;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionCollectionRead transaction;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    SUBMITTED("SUBMITTED"),
    
    OPENED("OPENED"),
    
    ABANDONED("ABANDONED"),
    
    OBJECTED("OBJECTED"),
    
    PENDING_SHIPMENT("PENDING_SHIPMENT"),
    
    SHIPPED("SHIPPED"),
    
    IN_TRANSIT("IN_TRANSIT"),
    
    RETURNED("RETURNED"),
    
    DISMISSED("DISMISSED"),
    
    RESOLVED("RESOLVED"),
    
    PENDING("PENDING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = StatusEnum.CREATED;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "itemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  /**
   * Gets or Sets issueType
   */
  @JsonAdapter(IssueTypeEnum.Adapter.class)
  public enum IssueTypeEnum {
    NOT_AS_DESCRIBED("NOT_AS_DESCRIBED"),
    
    DOES_NOT_WORK("DOES_NOT_WORK"),
    
    IS_INCOMPLETE("IS_INCOMPLETE"),
    
    DELIVERY_ISSUE("DELIVERY_ISSUE"),
    
    ALLEGED_FRAUD("ALLEGED_FRAUD"),
    
    NULL("null");

    private String value;

    IssueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueTypeEnum fromValue(String value) {
      for (IssueTypeEnum b : IssueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private IssueTypeEnum issueType;

  /**
   * To be set only in conjunction of issueType &#x3D; NOT_AS_DESCRIBED.
   */
  @JsonAdapter(IssueInDescriptionTypeEnum.Adapter.class)
  public enum IssueInDescriptionTypeEnum {
    WRONG_COLOUR("WRONG_COLOUR"),
    
    DAMAGED_OR_USED("DAMAGED_OR_USED"),
    
    INCORRECT_FORMAT_OR_SIZE("INCORRECT_FORMAT_OR_SIZE"),
    
    DIFFERENT_MATERIAL("DIFFERENT_MATERIAL"),
    
    NULL("null");

    private String value;

    IssueInDescriptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueInDescriptionTypeEnum fromValue(String value) {
      for (IssueInDescriptionTypeEnum b : IssueInDescriptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssueInDescriptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueInDescriptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueInDescriptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssueInDescriptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssueInDescriptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_IN_DESCRIPTION_TYPE = "issueInDescriptionType";
  @SerializedName(SERIALIZED_NAME_ISSUE_IN_DESCRIPTION_TYPE)
  private IssueInDescriptionTypeEnum issueInDescriptionType;

  public static final String SERIALIZED_NAME_ISSUE_MENTIONED_IN_OFFER = "issueMentionedInOffer";
  @SerializedName(SERIALIZED_NAME_ISSUE_MENTIONED_IN_OFFER)
  private Boolean issueMentionedInOffer;

  /**
   * Gets or Sets complainantStake
   */
  @JsonAdapter(ComplainantStakeEnum.Adapter.class)
  public enum ComplainantStakeEnum {
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    NULL("null");

    private String value;

    ComplainantStakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplainantStakeEnum fromValue(String value) {
      for (ComplainantStakeEnum b : ComplainantStakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ComplainantStakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplainantStakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplainantStakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplainantStakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplainantStakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLAINANT_STAKE = "complainantStake";
  @SerializedName(SERIALIZED_NAME_COMPLAINANT_STAKE)
  private ComplainantStakeEnum complainantStake;

  /**
   * Gets or Sets inferredStake
   */
  @JsonAdapter(InferredStakeEnum.Adapter.class)
  public enum InferredStakeEnum {
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    NULL("null");

    private String value;

    InferredStakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InferredStakeEnum fromValue(String value) {
      for (InferredStakeEnum b : InferredStakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InferredStakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InferredStakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InferredStakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InferredStakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InferredStakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INFERRED_STAKE = "inferredStake";
  @SerializedName(SERIALIZED_NAME_INFERRED_STAKE)
  private InferredStakeEnum inferredStake;

  /**
   * Gets or Sets chosenSolution
   */
  @JsonAdapter(ChosenSolutionEnum.Adapter.class)
  public enum ChosenSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    ChosenSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChosenSolutionEnum fromValue(String value) {
      for (ChosenSolutionEnum b : ChosenSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChosenSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChosenSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChosenSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChosenSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChosenSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHOSEN_SOLUTION = "chosenSolution";
  @SerializedName(SERIALIZED_NAME_CHOSEN_SOLUTION)
  private ChosenSolutionEnum chosenSolution;

  public static final String SERIALIZED_NAME_CHOSEN_PARTIAL_REFUND_AMOUNT = "chosenPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_CHOSEN_PARTIAL_REFUND_AMOUNT)
  private Integer chosenPartialRefundAmount;

  /**
   * Gets or Sets platformSolution
   */
  @JsonAdapter(PlatformSolutionEnum.Adapter.class)
  public enum PlatformSolutionEnum {
    PARTIAL_REFUND_WITH_PARTIAL_RETURN("PARTIAL_REFUND_WITH_PARTIAL_RETURN"),
    
    PARTIAL_REFUND_WITHOUT_RETURN("PARTIAL_REFUND_WITHOUT_RETURN"),
    
    COMPLETE_REFUND_WITH_RETURN("COMPLETE_REFUND_WITH_RETURN"),
    
    COMPLETE_REFUND_WITHOUT_RETURN("COMPLETE_REFUND_WITHOUT_RETURN"),
    
    ABANDON_CLAIM("ABANDON_CLAIM"),
    
    NULL("null");

    private String value;

    PlatformSolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformSolutionEnum fromValue(String value) {
      for (PlatformSolutionEnum b : PlatformSolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlatformSolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformSolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformSolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformSolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformSolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_SOLUTION = "platformSolution";
  @SerializedName(SERIALIZED_NAME_PLATFORM_SOLUTION)
  private PlatformSolutionEnum platformSolution;

  public static final String SERIALIZED_NAME_PLATFORM_PARTIAL_REFUND_AMOUNT = "platformPartialRefundAmount";
  @SerializedName(SERIALIZED_NAME_PLATFORM_PARTIAL_REFUND_AMOUNT)
  private Integer platformPartialRefundAmount;

  public static final String SERIALIZED_NAME_PLATFORM_APPROVAL = "platformApproval";
  @SerializedName(SERIALIZED_NAME_PLATFORM_APPROVAL)
  private Boolean platformApproval;

  /**
   * Gets or Sets platformActorType
   */
  @JsonAdapter(PlatformActorTypeEnum.Adapter.class)
  public enum PlatformActorTypeEnum {
    RULING("RULING"),
    
    AI("AI"),
    
    CUSTOMER_CARE("CUSTOMER_CARE"),
    
    PLATFORM_SUPPORT("PLATFORM_SUPPORT"),
    
    NULL("null");

    private String value;

    PlatformActorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformActorTypeEnum fromValue(String value) {
      for (PlatformActorTypeEnum b : PlatformActorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlatformActorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformActorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformActorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformActorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformActorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_ACTOR_TYPE = "platformActorType";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ACTOR_TYPE)
  private PlatformActorTypeEnum platformActorType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_STATUS_EXPIRATION = "statusExpiration";
  @SerializedName(SERIALIZED_NAME_STATUS_EXPIRATION)
  private OffsetDateTime statusExpiration;

  /**
   * Determine who is awaited (actor) for the next transition
   */
  @JsonAdapter(AwaitedPartyEnum.Adapter.class)
  public enum AwaitedPartyEnum {
    BUYER("BUYER"),
    
    PLATFORM("PLATFORM"),
    
    SELLER("SELLER");

    private String value;

    AwaitedPartyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AwaitedPartyEnum fromValue(String value) {
      for (AwaitedPartyEnum b : AwaitedPartyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AwaitedPartyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AwaitedPartyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AwaitedPartyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AwaitedPartyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AwaitedPartyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AWAITED_PARTY = "awaitedParty";
  @SerializedName(SERIALIZED_NAME_AWAITED_PARTY)
  private AwaitedPartyEnum awaitedParty;

  public static final String SERIALIZED_NAME_IRI = "iri";
  @SerializedName(SERIALIZED_NAME_IRI)
  private String iri;

  public static final String SERIALIZED_NAME_MESSAGE_COUNT = "messageCount";
  @SerializedName(SERIALIZED_NAME_MESSAGE_COUNT)
  private Integer messageCount;

  /**
   * Determine who won the case, if not specified, then it is ongoing.
   */
  @JsonAdapter(ClosedInFavorOfEnum.Adapter.class)
  public enum ClosedInFavorOfEnum {
    BUYER("BUYER"),
    
    SELLER("SELLER");

    private String value;

    ClosedInFavorOfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedInFavorOfEnum fromValue(String value) {
      for (ClosedInFavorOfEnum b : ClosedInFavorOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedInFavorOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedInFavorOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedInFavorOfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedInFavorOfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedInFavorOfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_IN_FAVOR_OF = "closedInFavorOf";
  @SerializedName(SERIALIZED_NAME_CLOSED_IN_FAVOR_OF)
  private ClosedInFavorOfEnum closedInFavorOf;

  public DisputeCollectionRead() {
  }

  public DisputeCollectionRead(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     OffsetDateTime statusExpiration, 
     AwaitedPartyEnum awaitedParty, 
     String iri, 
     Integer messageCount, 
     ClosedInFavorOfEnum closedInFavorOf
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.statusExpiration = statusExpiration;
    this.awaitedParty = awaitedParty;
    this.iri = iri;
    this.messageCount = messageCount;
    this.closedInFavorOf = closedInFavorOf;
  }

  public DisputeCollectionRead ulid(String ulid) {
    this.ulid = ulid;
    return this;
  }

   /**
   * Get ulid
   * @return ulid
  **/
  @javax.annotation.Nonnull
  public String getUlid() {
    return ulid;
  }

  public void setUlid(String ulid) {
    this.ulid = ulid;
  }


  public DisputeCollectionRead transaction(TransactionCollectionRead transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable
  public TransactionCollectionRead getTransaction() {
    return transaction;
  }

  public void setTransaction(TransactionCollectionRead transaction) {
    this.transaction = transaction;
  }


  public DisputeCollectionRead status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DisputeCollectionRead itemCount(Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

   /**
   * The dispute may concern only PART of the package. Specify it there.
   * @return itemCount
  **/
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(Integer itemCount) {
    this.itemCount = itemCount;
  }


  public DisputeCollectionRead issueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
    return this;
  }

   /**
   * Get issueType
   * @return issueType
  **/
  @javax.annotation.Nullable
  public IssueTypeEnum getIssueType() {
    return issueType;
  }

  public void setIssueType(IssueTypeEnum issueType) {
    this.issueType = issueType;
  }


  public DisputeCollectionRead issueInDescriptionType(IssueInDescriptionTypeEnum issueInDescriptionType) {
    this.issueInDescriptionType = issueInDescriptionType;
    return this;
  }

   /**
   * To be set only in conjunction of issueType &#x3D; NOT_AS_DESCRIBED.
   * @return issueInDescriptionType
  **/
  @javax.annotation.Nullable
  public IssueInDescriptionTypeEnum getIssueInDescriptionType() {
    return issueInDescriptionType;
  }

  public void setIssueInDescriptionType(IssueInDescriptionTypeEnum issueInDescriptionType) {
    this.issueInDescriptionType = issueInDescriptionType;
  }


  public DisputeCollectionRead issueMentionedInOffer(Boolean issueMentionedInOffer) {
    this.issueMentionedInOffer = issueMentionedInOffer;
    return this;
  }

   /**
   * Get issueMentionedInOffer
   * @return issueMentionedInOffer
  **/
  @javax.annotation.Nullable
  public Boolean getIssueMentionedInOffer() {
    return issueMentionedInOffer;
  }

  public void setIssueMentionedInOffer(Boolean issueMentionedInOffer) {
    this.issueMentionedInOffer = issueMentionedInOffer;
  }


  public DisputeCollectionRead complainantStake(ComplainantStakeEnum complainantStake) {
    this.complainantStake = complainantStake;
    return this;
  }

   /**
   * Get complainantStake
   * @return complainantStake
  **/
  @javax.annotation.Nullable
  public ComplainantStakeEnum getComplainantStake() {
    return complainantStake;
  }

  public void setComplainantStake(ComplainantStakeEnum complainantStake) {
    this.complainantStake = complainantStake;
  }


  public DisputeCollectionRead inferredStake(InferredStakeEnum inferredStake) {
    this.inferredStake = inferredStake;
    return this;
  }

   /**
   * Get inferredStake
   * @return inferredStake
  **/
  @javax.annotation.Nullable
  public InferredStakeEnum getInferredStake() {
    return inferredStake;
  }

  public void setInferredStake(InferredStakeEnum inferredStake) {
    this.inferredStake = inferredStake;
  }


  public DisputeCollectionRead chosenSolution(ChosenSolutionEnum chosenSolution) {
    this.chosenSolution = chosenSolution;
    return this;
  }

   /**
   * Get chosenSolution
   * @return chosenSolution
  **/
  @javax.annotation.Nullable
  public ChosenSolutionEnum getChosenSolution() {
    return chosenSolution;
  }

  public void setChosenSolution(ChosenSolutionEnum chosenSolution) {
    this.chosenSolution = chosenSolution;
  }


  public DisputeCollectionRead chosenPartialRefundAmount(Integer chosenPartialRefundAmount) {
    this.chosenPartialRefundAmount = chosenPartialRefundAmount;
    return this;
  }

   /**
   * Get chosenPartialRefundAmount
   * @return chosenPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getChosenPartialRefundAmount() {
    return chosenPartialRefundAmount;
  }

  public void setChosenPartialRefundAmount(Integer chosenPartialRefundAmount) {
    this.chosenPartialRefundAmount = chosenPartialRefundAmount;
  }


  public DisputeCollectionRead platformSolution(PlatformSolutionEnum platformSolution) {
    this.platformSolution = platformSolution;
    return this;
  }

   /**
   * Get platformSolution
   * @return platformSolution
  **/
  @javax.annotation.Nullable
  public PlatformSolutionEnum getPlatformSolution() {
    return platformSolution;
  }

  public void setPlatformSolution(PlatformSolutionEnum platformSolution) {
    this.platformSolution = platformSolution;
  }


  public DisputeCollectionRead platformPartialRefundAmount(Integer platformPartialRefundAmount) {
    this.platformPartialRefundAmount = platformPartialRefundAmount;
    return this;
  }

   /**
   * Get platformPartialRefundAmount
   * @return platformPartialRefundAmount
  **/
  @javax.annotation.Nullable
  public Integer getPlatformPartialRefundAmount() {
    return platformPartialRefundAmount;
  }

  public void setPlatformPartialRefundAmount(Integer platformPartialRefundAmount) {
    this.platformPartialRefundAmount = platformPartialRefundAmount;
  }


  public DisputeCollectionRead platformApproval(Boolean platformApproval) {
    this.platformApproval = platformApproval;
    return this;
  }

   /**
   * Get platformApproval
   * @return platformApproval
  **/
  @javax.annotation.Nullable
  public Boolean getPlatformApproval() {
    return platformApproval;
  }

  public void setPlatformApproval(Boolean platformApproval) {
    this.platformApproval = platformApproval;
  }


  public DisputeCollectionRead platformActorType(PlatformActorTypeEnum platformActorType) {
    this.platformActorType = platformActorType;
    return this;
  }

   /**
   * Get platformActorType
   * @return platformActorType
  **/
  @javax.annotation.Nullable
  public PlatformActorTypeEnum getPlatformActorType() {
    return platformActorType;
  }

  public void setPlatformActorType(PlatformActorTypeEnum platformActorType) {
    this.platformActorType = platformActorType;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



   /**
   * Yield if eligible the date-time at which the dispute state expire.
   * @return statusExpiration
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStatusExpiration() {
    return statusExpiration;
  }



   /**
   * Determine who is awaited (actor) for the next transition
   * @return awaitedParty
  **/
  @javax.annotation.Nullable
  public AwaitedPartyEnum getAwaitedParty() {
    return awaitedParty;
  }



   /**
   * Get iri
   * @return iri
  **/
  @javax.annotation.Nullable
  public String getIri() {
    return iri;
  }



   /**
   * Get messageCount
   * @return messageCount
  **/
  @javax.annotation.Nullable
  public Integer getMessageCount() {
    return messageCount;
  }



   /**
   * Determine who won the case, if not specified, then it is ongoing.
   * @return closedInFavorOf
  **/
  @javax.annotation.Nullable
  public ClosedInFavorOfEnum getClosedInFavorOf() {
    return closedInFavorOf;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisputeCollectionRead disputeCollectionRead = (DisputeCollectionRead) o;
    return Objects.equals(this.ulid, disputeCollectionRead.ulid) &&
        Objects.equals(this.transaction, disputeCollectionRead.transaction) &&
        Objects.equals(this.status, disputeCollectionRead.status) &&
        Objects.equals(this.itemCount, disputeCollectionRead.itemCount) &&
        Objects.equals(this.issueType, disputeCollectionRead.issueType) &&
        Objects.equals(this.issueInDescriptionType, disputeCollectionRead.issueInDescriptionType) &&
        Objects.equals(this.issueMentionedInOffer, disputeCollectionRead.issueMentionedInOffer) &&
        Objects.equals(this.complainantStake, disputeCollectionRead.complainantStake) &&
        Objects.equals(this.inferredStake, disputeCollectionRead.inferredStake) &&
        Objects.equals(this.chosenSolution, disputeCollectionRead.chosenSolution) &&
        Objects.equals(this.chosenPartialRefundAmount, disputeCollectionRead.chosenPartialRefundAmount) &&
        Objects.equals(this.platformSolution, disputeCollectionRead.platformSolution) &&
        Objects.equals(this.platformPartialRefundAmount, disputeCollectionRead.platformPartialRefundAmount) &&
        Objects.equals(this.platformApproval, disputeCollectionRead.platformApproval) &&
        Objects.equals(this.platformActorType, disputeCollectionRead.platformActorType) &&
        Objects.equals(this.createdAt, disputeCollectionRead.createdAt) &&
        Objects.equals(this.updatedAt, disputeCollectionRead.updatedAt) &&
        Objects.equals(this.statusExpiration, disputeCollectionRead.statusExpiration) &&
        Objects.equals(this.awaitedParty, disputeCollectionRead.awaitedParty) &&
        Objects.equals(this.iri, disputeCollectionRead.iri) &&
        Objects.equals(this.messageCount, disputeCollectionRead.messageCount) &&
        Objects.equals(this.closedInFavorOf, disputeCollectionRead.closedInFavorOf);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ulid, transaction, status, itemCount, issueType, issueInDescriptionType, issueMentionedInOffer, complainantStake, inferredStake, chosenSolution, chosenPartialRefundAmount, platformSolution, platformPartialRefundAmount, platformApproval, platformActorType, createdAt, updatedAt, statusExpiration, awaitedParty, iri, messageCount, closedInFavorOf);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisputeCollectionRead {\n");
    sb.append("    ulid: ").append(toIndentedString(ulid)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    issueInDescriptionType: ").append(toIndentedString(issueInDescriptionType)).append("\n");
    sb.append("    issueMentionedInOffer: ").append(toIndentedString(issueMentionedInOffer)).append("\n");
    sb.append("    complainantStake: ").append(toIndentedString(complainantStake)).append("\n");
    sb.append("    inferredStake: ").append(toIndentedString(inferredStake)).append("\n");
    sb.append("    chosenSolution: ").append(toIndentedString(chosenSolution)).append("\n");
    sb.append("    chosenPartialRefundAmount: ").append(toIndentedString(chosenPartialRefundAmount)).append("\n");
    sb.append("    platformSolution: ").append(toIndentedString(platformSolution)).append("\n");
    sb.append("    platformPartialRefundAmount: ").append(toIndentedString(platformPartialRefundAmount)).append("\n");
    sb.append("    platformApproval: ").append(toIndentedString(platformApproval)).append("\n");
    sb.append("    platformActorType: ").append(toIndentedString(platformActorType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    statusExpiration: ").append(toIndentedString(statusExpiration)).append("\n");
    sb.append("    awaitedParty: ").append(toIndentedString(awaitedParty)).append("\n");
    sb.append("    iri: ").append(toIndentedString(iri)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    closedInFavorOf: ").append(toIndentedString(closedInFavorOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ulid");
    openapiFields.add("transaction");
    openapiFields.add("status");
    openapiFields.add("itemCount");
    openapiFields.add("issueType");
    openapiFields.add("issueInDescriptionType");
    openapiFields.add("issueMentionedInOffer");
    openapiFields.add("complainantStake");
    openapiFields.add("inferredStake");
    openapiFields.add("chosenSolution");
    openapiFields.add("chosenPartialRefundAmount");
    openapiFields.add("platformSolution");
    openapiFields.add("platformPartialRefundAmount");
    openapiFields.add("platformApproval");
    openapiFields.add("platformActorType");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("statusExpiration");
    openapiFields.add("awaitedParty");
    openapiFields.add("iri");
    openapiFields.add("messageCount");
    openapiFields.add("closedInFavorOf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ulid");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DisputeCollectionRead
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisputeCollectionRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisputeCollectionRead is not found in the empty JSON string", DisputeCollectionRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisputeCollectionRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisputeCollectionRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisputeCollectionRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ulid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ulid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ulid").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionCollectionRead.validateJsonElement(jsonObj.get("transaction"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) && !jsonObj.get("issueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueType").toString()));
      }
      // validate the optional field `issueType`
      if (jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) {
        IssueTypeEnum.validateJsonElement(jsonObj.get("issueType"));
      }
      if ((jsonObj.get("issueInDescriptionType") != null && !jsonObj.get("issueInDescriptionType").isJsonNull()) && !jsonObj.get("issueInDescriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueInDescriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueInDescriptionType").toString()));
      }
      // validate the optional field `issueInDescriptionType`
      if (jsonObj.get("issueInDescriptionType") != null && !jsonObj.get("issueInDescriptionType").isJsonNull()) {
        IssueInDescriptionTypeEnum.validateJsonElement(jsonObj.get("issueInDescriptionType"));
      }
      if ((jsonObj.get("complainantStake") != null && !jsonObj.get("complainantStake").isJsonNull()) && !jsonObj.get("complainantStake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complainantStake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complainantStake").toString()));
      }
      // validate the optional field `complainantStake`
      if (jsonObj.get("complainantStake") != null && !jsonObj.get("complainantStake").isJsonNull()) {
        ComplainantStakeEnum.validateJsonElement(jsonObj.get("complainantStake"));
      }
      if ((jsonObj.get("inferredStake") != null && !jsonObj.get("inferredStake").isJsonNull()) && !jsonObj.get("inferredStake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferredStake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferredStake").toString()));
      }
      // validate the optional field `inferredStake`
      if (jsonObj.get("inferredStake") != null && !jsonObj.get("inferredStake").isJsonNull()) {
        InferredStakeEnum.validateJsonElement(jsonObj.get("inferredStake"));
      }
      if ((jsonObj.get("chosenSolution") != null && !jsonObj.get("chosenSolution").isJsonNull()) && !jsonObj.get("chosenSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chosenSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chosenSolution").toString()));
      }
      // validate the optional field `chosenSolution`
      if (jsonObj.get("chosenSolution") != null && !jsonObj.get("chosenSolution").isJsonNull()) {
        ChosenSolutionEnum.validateJsonElement(jsonObj.get("chosenSolution"));
      }
      if ((jsonObj.get("platformSolution") != null && !jsonObj.get("platformSolution").isJsonNull()) && !jsonObj.get("platformSolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformSolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformSolution").toString()));
      }
      // validate the optional field `platformSolution`
      if (jsonObj.get("platformSolution") != null && !jsonObj.get("platformSolution").isJsonNull()) {
        PlatformSolutionEnum.validateJsonElement(jsonObj.get("platformSolution"));
      }
      if ((jsonObj.get("platformActorType") != null && !jsonObj.get("platformActorType").isJsonNull()) && !jsonObj.get("platformActorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformActorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformActorType").toString()));
      }
      // validate the optional field `platformActorType`
      if (jsonObj.get("platformActorType") != null && !jsonObj.get("platformActorType").isJsonNull()) {
        PlatformActorTypeEnum.validateJsonElement(jsonObj.get("platformActorType"));
      }
      if ((jsonObj.get("awaitedParty") != null && !jsonObj.get("awaitedParty").isJsonNull()) && !jsonObj.get("awaitedParty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awaitedParty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awaitedParty").toString()));
      }
      // validate the optional field `awaitedParty`
      if (jsonObj.get("awaitedParty") != null && !jsonObj.get("awaitedParty").isJsonNull()) {
        AwaitedPartyEnum.validateJsonElement(jsonObj.get("awaitedParty"));
      }
      if ((jsonObj.get("iri") != null && !jsonObj.get("iri").isJsonNull()) && !jsonObj.get("iri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iri").toString()));
      }
      if ((jsonObj.get("closedInFavorOf") != null && !jsonObj.get("closedInFavorOf").isJsonNull()) && !jsonObj.get("closedInFavorOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedInFavorOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedInFavorOf").toString()));
      }
      // validate the optional field `closedInFavorOf`
      if (jsonObj.get("closedInFavorOf") != null && !jsonObj.get("closedInFavorOf").isJsonNull()) {
        ClosedInFavorOfEnum.validateJsonElement(jsonObj.get("closedInFavorOf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisputeCollectionRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisputeCollectionRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisputeCollectionRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisputeCollectionRead.class));

       return (TypeAdapter<T>) new TypeAdapter<DisputeCollectionRead>() {
           @Override
           public void write(JsonWriter out, DisputeCollectionRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisputeCollectionRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DisputeCollectionRead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DisputeCollectionRead
  * @throws IOException if the JSON string is invalid with respect to DisputeCollectionRead
  */
  public static DisputeCollectionRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisputeCollectionRead.class);
  }

 /**
  * Convert an instance of DisputeCollectionRead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

