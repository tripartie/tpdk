/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.202
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.tripartie.tpdk.model.View;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.tripartie.tpdk.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-26T18:54:19.017757Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CAPTCHA = "captcha";
  @SerializedName(SERIALIZED_NAME_CAPTCHA)
  private String captcha;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "publicName";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_ROLE_IN_COMPANY = "roleInCompany";
  @SerializedName(SERIALIZED_NAME_ROLE_IN_COMPANY)
  private String roleInCompany;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private OffsetDateTime birthday;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Gets or Sets invitedRole
   */
  @JsonAdapter(InvitedRoleEnum.Adapter.class)
  public enum InvitedRoleEnum {
    ADMIN("ROLE_ADMIN"),
    
    CONSULTANT("ROLE_CONSULTANT"),
    
    ACCOUNTING_MANAGER("ROLE_ACCOUNTING_MANAGER"),
    
    BILLING_MANAGER("ROLE_BILLING_MANAGER"),
    
    CUSTOMER_SERVICE("ROLE_CUSTOMER_SERVICE"),
    
    CUSTOMER_SERVICE2("ROLE_CUSTOMER_SERVICE"),
    
    PLATFORM_ADMIN("ROLE_PLATFORM_ADMIN"),
    
    PLATFORM_SUPPORT("ROLE_PLATFORM_SUPPORT"),
    
    ORGANIZATION_OWNER("ROLE_ORGANIZATION_OWNER");

    private String value;

    InvitedRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvitedRoleEnum fromValue(String value) {
      for (InvitedRoleEnum b : InvitedRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvitedRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvitedRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvitedRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvitedRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvitedRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVITED_ROLE = "invitedRole";
  @SerializedName(SERIALIZED_NAME_INVITED_ROLE)
  private List<InvitedRoleEnum> invitedRole = new ArrayList<>();

  /**
   * Gets or Sets roles
   */
  @JsonAdapter(RolesEnum.Adapter.class)
  public enum RolesEnum {
    ORGANIZATION_OWNER("ROLE_ORGANIZATION_OWNER"),
    
    ADMIN("ROLE_ADMIN"),
    
    CONSULTANT("ROLE_CONSULTANT"),
    
    ACCOUNTING_MANAGER("ROLE_ACCOUNTING_MANAGER"),
    
    BILLING_MANAGER("ROLE_BILLING_MANAGER"),
    
    CUSTOMER_SERVICE("ROLE_CUSTOMER_SERVICE"),
    
    PLATFORM_SUPPORT("ROLE_PLATFORM_SUPPORT"),
    
    PLATFORM_ADMIN("ROLE_PLATFORM_ADMIN"),
    
    USER("ROLE_USER");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesEnum fromValue(String value) {
      for (RolesEnum b : RolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<RolesEnum> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PLAIN_PASSWORD = "plainPassword";
  @SerializedName(SERIALIZED_NAME_PLAIN_PASSWORD)
  private String plainPassword;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "newPassword";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  public static final String SERIALIZED_NAME_TOTP_SECRET = "totpSecret";
  @SerializedName(SERIALIZED_NAME_TOTP_SECRET)
  private String totpSecret;

  public static final String SERIALIZED_NAME_TOTP_URI = "totpUri";
  @SerializedName(SERIALIZED_NAME_TOTP_URI)
  private String totpUri;

  public static final String SERIALIZED_NAME_TOTP_ENABLED = "totpEnabled";
  @SerializedName(SERIALIZED_NAME_TOTP_ENABLED)
  private Boolean totpEnabled;

  public static final String SERIALIZED_NAME_TOTP_CHALLENGE = "totpChallenge";
  @SerializedName(SERIALIZED_NAME_TOTP_CHALLENGE)
  private String totpChallenge;

  public static final String SERIALIZED_NAME_INTL_PHONE_NUMBER = "intlPhoneNumber";
  @SerializedName(SERIALIZED_NAME_INTL_PHONE_NUMBER)
  private String intlPhoneNumber;

  public static final String SERIALIZED_NAME_ORIGIN_COUNTRY = "originCountry";
  @SerializedName(SERIALIZED_NAME_ORIGIN_COUNTRY)
  private String originCountry;

  public static final String SERIALIZED_NAME_PREFERRED_LANGUAGE = "preferredLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LANGUAGE)
  private String preferredLanguage;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_LOG_IN = "lastSuccessfulLogIn";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_LOG_IN)
  private OffsetDateTime lastSuccessfulLogIn;

  public static final String SERIALIZED_NAME_EMAIL_VERIFICATION_CODE = "emailVerificationCode";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFICATION_CODE)
  private String emailVerificationCode;

  public static final String SERIALIZED_NAME_EMAIL_VERIFICATION_INPUT = "emailVerificationInput";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFICATION_INPUT)
  private String emailVerificationInput;

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION_CODE = "phoneVerificationCode";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION_CODE)
  private String phoneVerificationCode;

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION_INPUT = "phoneVerificationInput";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION_INPUT)
  private String phoneVerificationInput;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<String> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIAS = "medias";
  @SerializedName(SERIALIZED_NAME_MEDIAS)
  private List<String> medias = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<View> views = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CONSENT_MAIL_NOTIFICATION = "consentMailNotification";
  @SerializedName(SERIALIZED_NAME_CONSENT_MAIL_NOTIFICATION)
  private Boolean consentMailNotification;

  public static final String SERIALIZED_NAME_CONSENT_MAIL_ADS = "consentMailAds";
  @SerializedName(SERIALIZED_NAME_CONSENT_MAIL_ADS)
  private Boolean consentMailAds;

  public static final String SERIALIZED_NAME_LOCKDOWN = "lockdown";
  @SerializedName(SERIALIZED_NAME_LOCKDOWN)
  private Boolean lockdown;

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<String> keys = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_IMPERSONATED_ORGANIZATION = "impersonatedOrganization";
  @SerializedName(SERIALIZED_NAME_IMPERSONATED_ORGANIZATION)
  private String impersonatedOrganization;

  public static final String SERIALIZED_NAME_IRI = "iri";
  @SerializedName(SERIALIZED_NAME_IRI)
  private String iri;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private String salt;

  public static final String SERIALIZED_NAME_USER_IDENTIFIER = "userIdentifier";
  @SerializedName(SERIALIZED_NAME_USER_IDENTIFIER)
  private String userIdentifier;

  public static final String SERIALIZED_NAME_IMPERSONATING_ORGANIZATION = "impersonatingOrganization";
  @SerializedName(SERIALIZED_NAME_IMPERSONATING_ORGANIZATION)
  private Boolean impersonatingOrganization;

  public static final String SERIALIZED_NAME_2FA = "2fa";
  @SerializedName(SERIALIZED_NAME_2FA)
  private Boolean _2fa;

  public User() {
  }

  public User(
     Integer id, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     String iri, 
     String username, 
     String salt, 
     String userIdentifier, 
     Boolean impersonatingOrganization, 
     Boolean _2fa
  ) {
    this();
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.iri = iri;
    this.username = username;
    this.salt = salt;
    this.userIdentifier = userIdentifier;
    this.impersonatingOrganization = impersonatingOrganization;
    this._2fa = _2fa;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public User captcha(String captcha) {
    this.captcha = captcha;
    return this;
  }

   /**
   * Get captcha
   * @return captcha
  **/
  @javax.annotation.Nullable
  public String getCaptcha() {
    return captcha;
  }

  public void setCaptcha(String captcha) {
    this.captcha = captcha;
  }


  public User firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public User lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public User publicName(String publicName) {
    this.publicName = publicName;
    return this;
  }

   /**
   * Get publicName
   * @return publicName
  **/
  @javax.annotation.Nullable
  public String getPublicName() {
    return publicName;
  }

  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public User roleInCompany(String roleInCompany) {
    this.roleInCompany = roleInCompany;
    return this;
  }

   /**
   * Get roleInCompany
   * @return roleInCompany
  **/
  @javax.annotation.Nullable
  public String getRoleInCompany() {
    return roleInCompany;
  }

  public void setRoleInCompany(String roleInCompany) {
    this.roleInCompany = roleInCompany;
  }


  public User birthday(OffsetDateTime birthday) {
    this.birthday = birthday;
    return this;
  }

   /**
   * Get birthday
   * @return birthday
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthday() {
    return birthday;
  }

  public void setBirthday(OffsetDateTime birthday) {
    this.birthday = birthday;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User invitedRole(List<InvitedRoleEnum> invitedRole) {
    this.invitedRole = invitedRole;
    return this;
  }

  public User addInvitedRoleItem(InvitedRoleEnum invitedRoleItem) {
    if (this.invitedRole == null) {
      this.invitedRole = new ArrayList<>();
    }
    this.invitedRole.add(invitedRoleItem);
    return this;
  }

   /**
   * Get invitedRole
   * @return invitedRole
  **/
  @javax.annotation.Nullable
  public List<InvitedRoleEnum> getInvitedRole() {
    return invitedRole;
  }

  public void setInvitedRole(List<InvitedRoleEnum> invitedRole) {
    this.invitedRole = invitedRole;
  }


  public User roles(List<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public User addRolesItem(RolesEnum rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nonnull
  public List<RolesEnum> getRoles() {
    return roles;
  }

  public void setRoles(List<RolesEnum> roles) {
    this.roles = roles;
  }


  public User password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The hashed password
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public User plainPassword(String plainPassword) {
    this.plainPassword = plainPassword;
    return this;
  }

   /**
   * Get plainPassword
   * @return plainPassword
  **/
  @javax.annotation.Nullable
  public String getPlainPassword() {
    return plainPassword;
  }

  public void setPlainPassword(String plainPassword) {
    this.plainPassword = plainPassword;
  }


  public User newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * Get newPassword
   * @return newPassword
  **/
  @javax.annotation.Nullable
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public User totpSecret(String totpSecret) {
    this.totpSecret = totpSecret;
    return this;
  }

   /**
   * Get totpSecret
   * @return totpSecret
  **/
  @javax.annotation.Nullable
  public String getTotpSecret() {
    return totpSecret;
  }

  public void setTotpSecret(String totpSecret) {
    this.totpSecret = totpSecret;
  }


  public User totpUri(String totpUri) {
    this.totpUri = totpUri;
    return this;
  }

   /**
   * Get totpUri
   * @return totpUri
  **/
  @javax.annotation.Nullable
  public String getTotpUri() {
    return totpUri;
  }

  public void setTotpUri(String totpUri) {
    this.totpUri = totpUri;
  }


  public User totpEnabled(Boolean totpEnabled) {
    this.totpEnabled = totpEnabled;
    return this;
  }

   /**
   * Get totpEnabled
   * @return totpEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getTotpEnabled() {
    return totpEnabled;
  }

  public void setTotpEnabled(Boolean totpEnabled) {
    this.totpEnabled = totpEnabled;
  }


  public User totpChallenge(String totpChallenge) {
    this.totpChallenge = totpChallenge;
    return this;
  }

   /**
   * Get totpChallenge
   * @return totpChallenge
  **/
  @javax.annotation.Nullable
  public String getTotpChallenge() {
    return totpChallenge;
  }

  public void setTotpChallenge(String totpChallenge) {
    this.totpChallenge = totpChallenge;
  }


  public User intlPhoneNumber(String intlPhoneNumber) {
    this.intlPhoneNumber = intlPhoneNumber;
    return this;
  }

   /**
   * Get intlPhoneNumber
   * @return intlPhoneNumber
  **/
  @javax.annotation.Nullable
  public String getIntlPhoneNumber() {
    return intlPhoneNumber;
  }

  public void setIntlPhoneNumber(String intlPhoneNumber) {
    this.intlPhoneNumber = intlPhoneNumber;
  }


  public User originCountry(String originCountry) {
    this.originCountry = originCountry;
    return this;
  }

   /**
   * The originating country
   * @return originCountry
  **/
  @javax.annotation.Nullable
  public String getOriginCountry() {
    return originCountry;
  }

  public void setOriginCountry(String originCountry) {
    this.originCountry = originCountry;
  }


  public User preferredLanguage(String preferredLanguage) {
    this.preferredLanguage = preferredLanguage;
    return this;
  }

   /**
   * Get preferredLanguage
   * @return preferredLanguage
  **/
  @javax.annotation.Nullable
  public String getPreferredLanguage() {
    return preferredLanguage;
  }

  public void setPreferredLanguage(String preferredLanguage) {
    this.preferredLanguage = preferredLanguage;
  }


  public User lastSuccessfulLogIn(OffsetDateTime lastSuccessfulLogIn) {
    this.lastSuccessfulLogIn = lastSuccessfulLogIn;
    return this;
  }

   /**
   * Get lastSuccessfulLogIn
   * @return lastSuccessfulLogIn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulLogIn() {
    return lastSuccessfulLogIn;
  }

  public void setLastSuccessfulLogIn(OffsetDateTime lastSuccessfulLogIn) {
    this.lastSuccessfulLogIn = lastSuccessfulLogIn;
  }


  public User emailVerificationCode(String emailVerificationCode) {
    this.emailVerificationCode = emailVerificationCode;
    return this;
  }

   /**
   * Get emailVerificationCode
   * @return emailVerificationCode
  **/
  @javax.annotation.Nullable
  public String getEmailVerificationCode() {
    return emailVerificationCode;
  }

  public void setEmailVerificationCode(String emailVerificationCode) {
    this.emailVerificationCode = emailVerificationCode;
  }


  public User emailVerificationInput(String emailVerificationInput) {
    this.emailVerificationInput = emailVerificationInput;
    return this;
  }

   /**
   * Get emailVerificationInput
   * @return emailVerificationInput
  **/
  @javax.annotation.Nullable
  public String getEmailVerificationInput() {
    return emailVerificationInput;
  }

  public void setEmailVerificationInput(String emailVerificationInput) {
    this.emailVerificationInput = emailVerificationInput;
  }


  public User phoneVerificationCode(String phoneVerificationCode) {
    this.phoneVerificationCode = phoneVerificationCode;
    return this;
  }

   /**
   * Get phoneVerificationCode
   * @return phoneVerificationCode
  **/
  @javax.annotation.Nullable
  public String getPhoneVerificationCode() {
    return phoneVerificationCode;
  }

  public void setPhoneVerificationCode(String phoneVerificationCode) {
    this.phoneVerificationCode = phoneVerificationCode;
  }


  public User phoneVerificationInput(String phoneVerificationInput) {
    this.phoneVerificationInput = phoneVerificationInput;
    return this;
  }

   /**
   * Get phoneVerificationInput
   * @return phoneVerificationInput
  **/
  @javax.annotation.Nullable
  public String getPhoneVerificationInput() {
    return phoneVerificationInput;
  }

  public void setPhoneVerificationInput(String phoneVerificationInput) {
    this.phoneVerificationInput = phoneVerificationInput;
  }


  public User avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public User notifications(List<String> notifications) {
    this.notifications = notifications;
    return this;
  }

  public User addNotificationsItem(String notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Get notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  public List<String> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<String> notifications) {
    this.notifications = notifications;
  }


  public User medias(List<String> medias) {
    this.medias = medias;
    return this;
  }

  public User addMediasItem(String mediasItem) {
    if (this.medias == null) {
      this.medias = new ArrayList<>();
    }
    this.medias.add(mediasItem);
    return this;
  }

   /**
   * Get medias
   * @return medias
  **/
  @javax.annotation.Nullable
  public List<String> getMedias() {
    return medias;
  }

  public void setMedias(List<String> medias) {
    this.medias = medias;
  }


  public User views(List<View> views) {
    this.views = views;
    return this;
  }

  public User addViewsItem(View viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @javax.annotation.Nonnull
  public List<View> getViews() {
    return views;
  }

  public void setViews(List<View> views) {
    this.views = views;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public User consentMailNotification(Boolean consentMailNotification) {
    this.consentMailNotification = consentMailNotification;
    return this;
  }

   /**
   * Get consentMailNotification
   * @return consentMailNotification
  **/
  @javax.annotation.Nonnull
  public Boolean getConsentMailNotification() {
    return consentMailNotification;
  }

  public void setConsentMailNotification(Boolean consentMailNotification) {
    this.consentMailNotification = consentMailNotification;
  }


  public User consentMailAds(Boolean consentMailAds) {
    this.consentMailAds = consentMailAds;
    return this;
  }

   /**
   * Get consentMailAds
   * @return consentMailAds
  **/
  @javax.annotation.Nonnull
  public Boolean getConsentMailAds() {
    return consentMailAds;
  }

  public void setConsentMailAds(Boolean consentMailAds) {
    this.consentMailAds = consentMailAds;
  }


  public User lockdown(Boolean lockdown) {
    this.lockdown = lockdown;
    return this;
  }

   /**
   * Get lockdown
   * @return lockdown
  **/
  @javax.annotation.Nonnull
  public Boolean getLockdown() {
    return lockdown;
  }

  public void setLockdown(Boolean lockdown) {
    this.lockdown = lockdown;
  }


  public User keys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public User addKeysItem(String keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @javax.annotation.Nonnull
  public List<String> getKeys() {
    return keys;
  }

  public void setKeys(List<String> keys) {
    this.keys = keys;
  }


  public User organization(String organization) {
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public User impersonatedOrganization(String impersonatedOrganization) {
    this.impersonatedOrganization = impersonatedOrganization;
    return this;
  }

   /**
   * Get impersonatedOrganization
   * @return impersonatedOrganization
  **/
  @javax.annotation.Nullable
  public String getImpersonatedOrganization() {
    return impersonatedOrganization;
  }

  public void setImpersonatedOrganization(String impersonatedOrganization) {
    this.impersonatedOrganization = impersonatedOrganization;
  }


   /**
   * Get iri
   * @return iri
  **/
  @javax.annotation.Nullable
  public String getIri() {
    return iri;
  }



   /**
   * A visual identifier that represents this user.
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }



   /**
   * Get salt
   * @return salt
  **/
  @javax.annotation.Nullable
  public String getSalt() {
    return salt;
  }



   /**
   * Get userIdentifier
   * @return userIdentifier
  **/
  @javax.annotation.Nullable
  public String getUserIdentifier() {
    return userIdentifier;
  }



   /**
   * Get impersonatingOrganization
   * @return impersonatingOrganization
  **/
  @javax.annotation.Nullable
  public Boolean getImpersonatingOrganization() {
    return impersonatingOrganization;
  }



   /**
   * Get _2fa
   * @return _2fa
  **/
  @javax.annotation.Nullable
  public Boolean get2fa() {
    return _2fa;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.captcha, user.captcha) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.lastName, user.lastName) &&
        Objects.equals(this.publicName, user.publicName) &&
        Objects.equals(this.roleInCompany, user.roleInCompany) &&
        Objects.equals(this.birthday, user.birthday) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.invitedRole, user.invitedRole) &&
        Objects.equals(this.roles, user.roles) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.plainPassword, user.plainPassword) &&
        Objects.equals(this.newPassword, user.newPassword) &&
        Objects.equals(this.totpSecret, user.totpSecret) &&
        Objects.equals(this.totpUri, user.totpUri) &&
        Objects.equals(this.totpEnabled, user.totpEnabled) &&
        Objects.equals(this.totpChallenge, user.totpChallenge) &&
        Objects.equals(this.intlPhoneNumber, user.intlPhoneNumber) &&
        Objects.equals(this.originCountry, user.originCountry) &&
        Objects.equals(this.preferredLanguage, user.preferredLanguage) &&
        Objects.equals(this.lastSuccessfulLogIn, user.lastSuccessfulLogIn) &&
        Objects.equals(this.emailVerificationCode, user.emailVerificationCode) &&
        Objects.equals(this.emailVerificationInput, user.emailVerificationInput) &&
        Objects.equals(this.phoneVerificationCode, user.phoneVerificationCode) &&
        Objects.equals(this.phoneVerificationInput, user.phoneVerificationInput) &&
        Objects.equals(this.avatar, user.avatar) &&
        Objects.equals(this.notifications, user.notifications) &&
        Objects.equals(this.medias, user.medias) &&
        Objects.equals(this.views, user.views) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.consentMailNotification, user.consentMailNotification) &&
        Objects.equals(this.consentMailAds, user.consentMailAds) &&
        Objects.equals(this.lockdown, user.lockdown) &&
        Objects.equals(this.keys, user.keys) &&
        Objects.equals(this.organization, user.organization) &&
        Objects.equals(this.impersonatedOrganization, user.impersonatedOrganization) &&
        Objects.equals(this.iri, user.iri) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.salt, user.salt) &&
        Objects.equals(this.userIdentifier, user.userIdentifier) &&
        Objects.equals(this.impersonatingOrganization, user.impersonatingOrganization) &&
        Objects.equals(this._2fa, user._2fa);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, captcha, firstName, lastName, publicName, roleInCompany, birthday, email, invitedRole, roles, password, plainPassword, newPassword, totpSecret, totpUri, totpEnabled, totpChallenge, intlPhoneNumber, originCountry, preferredLanguage, lastSuccessfulLogIn, emailVerificationCode, emailVerificationInput, phoneVerificationCode, phoneVerificationInput, avatar, notifications, medias, views, createdAt, updatedAt, consentMailNotification, consentMailAds, lockdown, keys, organization, impersonatedOrganization, iri, username, salt, userIdentifier, impersonatingOrganization, _2fa);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    captcha: ").append(toIndentedString(captcha)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    roleInCompany: ").append(toIndentedString(roleInCompany)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    invitedRole: ").append(toIndentedString(invitedRole)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    plainPassword: ").append(toIndentedString(plainPassword)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    totpSecret: ").append(toIndentedString(totpSecret)).append("\n");
    sb.append("    totpUri: ").append(toIndentedString(totpUri)).append("\n");
    sb.append("    totpEnabled: ").append(toIndentedString(totpEnabled)).append("\n");
    sb.append("    totpChallenge: ").append(toIndentedString(totpChallenge)).append("\n");
    sb.append("    intlPhoneNumber: ").append(toIndentedString(intlPhoneNumber)).append("\n");
    sb.append("    originCountry: ").append(toIndentedString(originCountry)).append("\n");
    sb.append("    preferredLanguage: ").append(toIndentedString(preferredLanguage)).append("\n");
    sb.append("    lastSuccessfulLogIn: ").append(toIndentedString(lastSuccessfulLogIn)).append("\n");
    sb.append("    emailVerificationCode: ").append(toIndentedString(emailVerificationCode)).append("\n");
    sb.append("    emailVerificationInput: ").append(toIndentedString(emailVerificationInput)).append("\n");
    sb.append("    phoneVerificationCode: ").append(toIndentedString(phoneVerificationCode)).append("\n");
    sb.append("    phoneVerificationInput: ").append(toIndentedString(phoneVerificationInput)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    medias: ").append(toIndentedString(medias)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    consentMailNotification: ").append(toIndentedString(consentMailNotification)).append("\n");
    sb.append("    consentMailAds: ").append(toIndentedString(consentMailAds)).append("\n");
    sb.append("    lockdown: ").append(toIndentedString(lockdown)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    impersonatedOrganization: ").append(toIndentedString(impersonatedOrganization)).append("\n");
    sb.append("    iri: ").append(toIndentedString(iri)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    userIdentifier: ").append(toIndentedString(userIdentifier)).append("\n");
    sb.append("    impersonatingOrganization: ").append(toIndentedString(impersonatingOrganization)).append("\n");
    sb.append("    _2fa: ").append(toIndentedString(_2fa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("captcha");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("publicName");
    openapiFields.add("roleInCompany");
    openapiFields.add("birthday");
    openapiFields.add("email");
    openapiFields.add("invitedRole");
    openapiFields.add("roles");
    openapiFields.add("password");
    openapiFields.add("plainPassword");
    openapiFields.add("newPassword");
    openapiFields.add("totpSecret");
    openapiFields.add("totpUri");
    openapiFields.add("totpEnabled");
    openapiFields.add("totpChallenge");
    openapiFields.add("intlPhoneNumber");
    openapiFields.add("originCountry");
    openapiFields.add("preferredLanguage");
    openapiFields.add("lastSuccessfulLogIn");
    openapiFields.add("emailVerificationCode");
    openapiFields.add("emailVerificationInput");
    openapiFields.add("phoneVerificationCode");
    openapiFields.add("phoneVerificationInput");
    openapiFields.add("avatar");
    openapiFields.add("notifications");
    openapiFields.add("medias");
    openapiFields.add("views");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("consentMailNotification");
    openapiFields.add("consentMailAds");
    openapiFields.add("lockdown");
    openapiFields.add("keys");
    openapiFields.add("organization");
    openapiFields.add("impersonatedOrganization");
    openapiFields.add("iri");
    openapiFields.add("username");
    openapiFields.add("salt");
    openapiFields.add("userIdentifier");
    openapiFields.add("impersonatingOrganization");
    openapiFields.add("2fa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("views");
    openapiRequiredFields.add("consentMailNotification");
    openapiRequiredFields.add("consentMailAds");
    openapiRequiredFields.add("lockdown");
    openapiRequiredFields.add("keys");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to User
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captcha") != null && !jsonObj.get("captcha").isJsonNull()) && !jsonObj.get("captcha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captcha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captcha").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("publicName") != null && !jsonObj.get("publicName").isJsonNull()) && !jsonObj.get("publicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicName").toString()));
      }
      if ((jsonObj.get("roleInCompany") != null && !jsonObj.get("roleInCompany").isJsonNull()) && !jsonObj.get("roleInCompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleInCompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleInCompany").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("invitedRole") != null && !jsonObj.get("invitedRole").isJsonNull() && !jsonObj.get("invitedRole").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitedRole` to be an array in the JSON string but got `%s`", jsonObj.get("invitedRole").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("plainPassword") != null && !jsonObj.get("plainPassword").isJsonNull()) && !jsonObj.get("plainPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plainPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plainPassword").toString()));
      }
      if ((jsonObj.get("newPassword") != null && !jsonObj.get("newPassword").isJsonNull()) && !jsonObj.get("newPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newPassword").toString()));
      }
      if ((jsonObj.get("totpSecret") != null && !jsonObj.get("totpSecret").isJsonNull()) && !jsonObj.get("totpSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totpSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totpSecret").toString()));
      }
      if ((jsonObj.get("totpUri") != null && !jsonObj.get("totpUri").isJsonNull()) && !jsonObj.get("totpUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totpUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totpUri").toString()));
      }
      if ((jsonObj.get("totpChallenge") != null && !jsonObj.get("totpChallenge").isJsonNull()) && !jsonObj.get("totpChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totpChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totpChallenge").toString()));
      }
      if ((jsonObj.get("intlPhoneNumber") != null && !jsonObj.get("intlPhoneNumber").isJsonNull()) && !jsonObj.get("intlPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intlPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intlPhoneNumber").toString()));
      }
      if ((jsonObj.get("originCountry") != null && !jsonObj.get("originCountry").isJsonNull()) && !jsonObj.get("originCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originCountry").toString()));
      }
      if ((jsonObj.get("preferredLanguage") != null && !jsonObj.get("preferredLanguage").isJsonNull()) && !jsonObj.get("preferredLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredLanguage").toString()));
      }
      if ((jsonObj.get("emailVerificationCode") != null && !jsonObj.get("emailVerificationCode").isJsonNull()) && !jsonObj.get("emailVerificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailVerificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailVerificationCode").toString()));
      }
      if ((jsonObj.get("emailVerificationInput") != null && !jsonObj.get("emailVerificationInput").isJsonNull()) && !jsonObj.get("emailVerificationInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailVerificationInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailVerificationInput").toString()));
      }
      if ((jsonObj.get("phoneVerificationCode") != null && !jsonObj.get("phoneVerificationCode").isJsonNull()) && !jsonObj.get("phoneVerificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVerificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVerificationCode").toString()));
      }
      if ((jsonObj.get("phoneVerificationInput") != null && !jsonObj.get("phoneVerificationInput").isJsonNull()) && !jsonObj.get("phoneVerificationInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVerificationInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVerificationInput").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull() && !jsonObj.get("notifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("medias") != null && !jsonObj.get("medias").isJsonNull() && !jsonObj.get("medias").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `medias` to be an array in the JSON string but got `%s`", jsonObj.get("medias").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }

      JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
      // validate the required field `views` (array)
      for (int i = 0; i < jsonArrayviews.size(); i++) {
        View.validateJsonElement(jsonArrayviews.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("keys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be an array in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("impersonatedOrganization") != null && !jsonObj.get("impersonatedOrganization").isJsonNull()) && !jsonObj.get("impersonatedOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impersonatedOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impersonatedOrganization").toString()));
      }
      if ((jsonObj.get("iri") != null && !jsonObj.get("iri").isJsonNull()) && !jsonObj.get("iri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iri").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("salt") != null && !jsonObj.get("salt").isJsonNull()) && !jsonObj.get("salt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salt").toString()));
      }
      if ((jsonObj.get("userIdentifier") != null && !jsonObj.get("userIdentifier").isJsonNull()) && !jsonObj.get("userIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

