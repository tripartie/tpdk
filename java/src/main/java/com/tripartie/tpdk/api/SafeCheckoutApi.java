/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.199
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.api;

import com.tripartie.tpdk.ApiCallback;
import com.tripartie.tpdk.ApiClient;
import com.tripartie.tpdk.ApiException;
import com.tripartie.tpdk.ApiResponse;
import com.tripartie.tpdk.Configuration;
import com.tripartie.tpdk.Pair;
import com.tripartie.tpdk.ProgressRequestBody;
import com.tripartie.tpdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.tripartie.tpdk.model.AccessError;
import com.tripartie.tpdk.model.AuthError;
import java.math.BigDecimal;
import com.tripartie.tpdk.model.DisputePostCreationRead;
import com.tripartie.tpdk.model.DisputeRead;
import com.tripartie.tpdk.model.DisputeUpdate;
import com.tripartie.tpdk.model.DisputeWrite;
import com.tripartie.tpdk.model.EvaluationRead;
import com.tripartie.tpdk.model.EvaluationWrite;
import java.io.File;
import com.tripartie.tpdk.model.GenericError;
import com.tripartie.tpdk.model.InvalidQueryError;
import com.tripartie.tpdk.model.MediaRead;
import com.tripartie.tpdk.model.NotFoundError;
import com.tripartie.tpdk.model.OfferCollectionRead;
import com.tripartie.tpdk.model.OfferIndependentWrite;
import com.tripartie.tpdk.model.OfferPostCreationRead;
import com.tripartie.tpdk.model.OfferRead;
import com.tripartie.tpdk.model.OfferUpdate;
import com.tripartie.tpdk.model.OfferWrite;
import com.tripartie.tpdk.model.ParcelWrite;
import com.tripartie.tpdk.model.RateLimitError;
import com.tripartie.tpdk.model.TransactionCollectionRead;
import com.tripartie.tpdk.model.TransactionRead;
import com.tripartie.tpdk.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SafeCheckoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SafeCheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SafeCheckoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call apiOffersGetCollectionCall(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (publicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicUrl", publicUrl));
        }

        if (publicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publicUrl[]", publicUrl2));
        }

        if (unitPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitPrice", unitPrice));
        }

        if (unitPrice2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unitPrice[]", unitPrice2));
        }

        if (itemCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemCount", itemCount));
        }

        if (itemCount2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "itemCount[]", itemCount2));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (offerMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "offer.metadata[]", offerMetadata));
        }

        if (nature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nature", nature));
        }

        if (condition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("condition", condition));
        }

        if (shippingAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shippingAllowed", shippingAllowed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersGetCollectionValidateBeforeCall(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        return apiOffersGetCollectionCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);

    }


    private ApiResponse<List<OfferCollectionRead>> apiOffersGetCollectionWithHttpInfo(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        okhttp3.Call localVarCall = apiOffersGetCollectionValidateBeforeCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, null);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersGetCollectionAsync(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersGetCollectionValidateBeforeCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersGetCollectionRequest {
        private Integer page;
        private String title;
        private String publicUrl;
        private List<String> publicUrl2;
        private BigDecimal unitPrice;
        private List<BigDecimal> unitPrice2;
        private Integer itemCount;
        private List<Integer> itemCount2;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private List<String> metadata;
        private List<String> offerMetadata;
        private String nature;
        private String condition;
        private Boolean shippingAllowed;

        private APIapiOffersGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set publicUrl
         * @param publicUrl  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest publicUrl(String publicUrl) {
            this.publicUrl = publicUrl;
            return this;
        }

        /**
         * Set publicUrl2
         * @param publicUrl2  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest publicUrl2(List<String> publicUrl2) {
            this.publicUrl2 = publicUrl2;
            return this;
        }

        /**
         * Set unitPrice
         * @param unitPrice  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest unitPrice(BigDecimal unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * Set unitPrice2
         * @param unitPrice2  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest unitPrice2(List<BigDecimal> unitPrice2) {
            this.unitPrice2 = unitPrice2;
            return this;
        }

        /**
         * Set itemCount
         * @param itemCount  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest itemCount(Integer itemCount) {
            this.itemCount = itemCount;
            return this;
        }

        /**
         * Set itemCount2
         * @param itemCount2  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest itemCount2(List<Integer> itemCount2) {
            this.itemCount2 = itemCount2;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set offerMetadata
         * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest offerMetadata(List<String> offerMetadata) {
            this.offerMetadata = offerMetadata;
            return this;
        }

        /**
         * Set nature
         * @param nature Filter on a limited subset of nature (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest nature(String nature) {
            this.nature = nature;
            return this;
        }

        /**
         * Set condition
         * @param condition Filter on a limited subset of condition (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest condition(String condition) {
            this.condition = condition;
            return this;
        }

        /**
         * Set shippingAllowed
         * @param shippingAllowed  (optional)
         * @return APIapiOffersGetCollectionRequest
         */
        public APIapiOffersGetCollectionRequest shippingAllowed(Boolean shippingAllowed) {
            this.shippingAllowed = shippingAllowed;
            return this;
        }

        /**
         * Build call for apiOffersGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersGetCollectionCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        }

        /**
         * Execute apiOffersGetCollection request
         * @return List&lt;OfferCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<OfferCollectionRead> execute() throws ApiException {
            ApiResponse<List<OfferCollectionRead>> localVarResp = apiOffersGetCollectionWithHttpInfo(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OfferCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OfferCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiOffersGetCollectionWithHttpInfo(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        }

        /**
         * Execute apiOffersGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {
            return apiOffersGetCollectionAsync(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        }
    }

    /**
     * Read issued Offers
     * Retrieves the collection of Offer resources.
     * @return APIapiOffersGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersGetCollectionRequest apiOffersGetCollection() {
        return new APIapiOffersGetCollectionRequest();
    }
    private okhttp3.Call apiOffersPostCall(OfferIndependentWrite offerIndependentWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerIndependentWrite;

        // create path and map variables
        String localVarPath = "/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersPostValidateBeforeCall(OfferIndependentWrite offerIndependentWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerIndependentWrite' is set
        if (offerIndependentWrite == null) {
            throw new ApiException("Missing the required parameter 'offerIndependentWrite' when calling apiOffersPost(Async)");
        }

        return apiOffersPostCall(offerIndependentWrite, _callback);

    }


    private ApiResponse<OfferPostCreationRead> apiOffersPostWithHttpInfo(OfferIndependentWrite offerIndependentWrite) throws ApiException {
        okhttp3.Call localVarCall = apiOffersPostValidateBeforeCall(offerIndependentWrite, null);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersPostAsync(OfferIndependentWrite offerIndependentWrite, final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersPostValidateBeforeCall(offerIndependentWrite, _callback);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersPostRequest {
        private final OfferIndependentWrite offerIndependentWrite;

        private APIapiOffersPostRequest(OfferIndependentWrite offerIndependentWrite) {
            this.offerIndependentWrite = offerIndependentWrite;
        }

        /**
         * Build call for apiOffersPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersPostCall(offerIndependentWrite, _callback);
        }

        /**
         * Execute apiOffersPost request
         * @return OfferPostCreationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public OfferPostCreationRead execute() throws ApiException {
            ApiResponse<OfferPostCreationRead> localVarResp = apiOffersPostWithHttpInfo(offerIndependentWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersPost request with HTTP info returned
         * @return ApiResponse&lt;OfferPostCreationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfferPostCreationRead> executeWithHttpInfo() throws ApiException {
            return apiOffersPostWithHttpInfo(offerIndependentWrite);
        }

        /**
         * Execute apiOffersPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {
            return apiOffersPostAsync(offerIndependentWrite, _callback);
        }
    }

    /**
     * Create an Offer and retrieve url
     * Publish an offer so that you can safely retrieve a safe-checkout unique link from us
     * @param offerIndependentWrite The new Offer resource (required)
     * @return APIapiOffersPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersPostRequest apiOffersPost(OfferIndependentWrite offerIndependentWrite) {
        return new APIapiOffersPostRequest(offerIndependentWrite);
    }
    private okhttp3.Call apiOffersUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidGet(Async)");
        }

        return apiOffersUlidGetCall(ulid, _callback);

    }


    private ApiResponse<OfferRead> apiOffersUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidGetAsync(String ulid, final ApiCallback<OfferRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidGetRequest {
        private final String ulid;

        private APIapiOffersUlidGetRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiOffersUlidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidGetCall(ulid, _callback);
        }

        /**
         * Execute apiOffersUlidGet request
         * @return OfferRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public OfferRead execute() throws ApiException {
            ApiResponse<OfferRead> localVarResp = apiOffersUlidGetWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidGet request with HTTP info returned
         * @return ApiResponse&lt;OfferRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfferRead> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidGetWithHttpInfo(ulid);
        }

        /**
         * Execute apiOffersUlidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfferRead> _callback) throws ApiException {
            return apiOffersUlidGetAsync(ulid, _callback);
        }
    }

    /**
     * Read an Offer
     * Retrieves a Offer resource.
     * @param ulid Offer identifier (required)
     * @return APIapiOffersUlidGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidGetRequest apiOffersUlidGet(String ulid) {
        return new APIapiOffersUlidGetRequest(ulid);
    }
    private okhttp3.Call apiOffersUlidmediasIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiOffersUlidmediasIdDelete(Async)");
        }

        return apiOffersUlidmediasIdDeleteCall(ulid, id, _callback);

    }


    private ApiResponse<Void> apiOffersUlidmediasIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiOffersUlidmediasIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidmediasIdDeleteRequest {
        private final String ulid;
        private final Integer id;

        private APIapiOffersUlidmediasIdDeleteRequest(String ulid, Integer id) {
            this.ulid = ulid;
            this.id = id;
        }

        /**
         * Build call for apiOffersUlidmediasIdDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidmediasIdDeleteCall(ulid, id, _callback);
        }

        /**
         * Execute apiOffersUlidmediasIdDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiOffersUlidmediasIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiOffersUlidmediasIdDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidmediasIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiOffersUlidmediasIdDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiOffersUlidmediasIdDeleteAsync(ulid, id, _callback);
        }
    }

    /**
     * Removes the Media resource.
     * Removes the Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return APIapiOffersUlidmediasIdDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidmediasIdDeleteRequest apiOffersUlidmediasIdDelete(String ulid, Integer id) {
        return new APIapiOffersUlidmediasIdDeleteRequest(ulid, id);
    }
    private okhttp3.Call apiOffersUlidmediasPostCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasPostValidateBeforeCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasPost(Async)");
        }

        return apiOffersUlidmediasPostCall(ulid, _file, _callback);

    }


    private ApiResponse<MediaRead> apiOffersUlidmediasPostWithHttpInfo(String ulid, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidmediasPostAsync(String ulid, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidmediasPostRequest {
        private final String ulid;
        private File _file;

        private APIapiOffersUlidmediasPostRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return APIapiOffersUlidmediasPostRequest
         */
        public APIapiOffersUlidmediasPostRequest _file(File _file) {
            this._file = _file;
            return this;
        }

        /**
         * Build call for apiOffersUlidmediasPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidmediasPostCall(ulid, _file, _callback);
        }

        /**
         * Execute apiOffersUlidmediasPost request
         * @return MediaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public MediaRead execute() throws ApiException {
            ApiResponse<MediaRead> localVarResp = apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidmediasPost request with HTTP info returned
         * @return ApiResponse&lt;MediaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MediaRead> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
        }

        /**
         * Execute apiOffersUlidmediasPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MediaRead> _callback) throws ApiException {
            return apiOffersUlidmediasPostAsync(ulid, _file, _callback);
        }
    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @return APIapiOffersUlidmediasPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidmediasPostRequest apiOffersUlidmediasPost(String ulid) {
        return new APIapiOffersUlidmediasPostRequest(ulid);
    }
    private okhttp3.Call apiOffersUlidtransactionsGetCollectionCall(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsGetCollectionValidateBeforeCall(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsGetCollection(Async)");
        }

        return apiOffersUlidtransactionsGetCollectionCall(ulid, page, orderStatus, metadata, status, _callback);

    }


    private ApiResponse<List<TransactionCollectionRead>> apiOffersUlidtransactionsGetCollectionWithHttpInfo(String ulid, Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsGetCollectionValidateBeforeCall(ulid, page, orderStatus, metadata, status, null);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidtransactionsGetCollectionAsync(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsGetCollectionValidateBeforeCall(ulid, page, orderStatus, metadata, status, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidtransactionsGetCollectionRequest {
        private final String ulid;
        private Integer page;
        private String orderStatus;
        private List<String> metadata;
        private String status;

        private APIapiOffersUlidtransactionsGetCollectionRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiOffersUlidtransactionsGetCollectionRequest
         */
        public APIapiOffersUlidtransactionsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set orderStatus
         * @param orderStatus  (optional)
         * @return APIapiOffersUlidtransactionsGetCollectionRequest
         */
        public APIapiOffersUlidtransactionsGetCollectionRequest orderStatus(String orderStatus) {
            this.orderStatus = orderStatus;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiOffersUlidtransactionsGetCollectionRequest
         */
        public APIapiOffersUlidtransactionsGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set status
         * @param status Filter on a limited subset of status (optional)
         * @return APIapiOffersUlidtransactionsGetCollectionRequest
         */
        public APIapiOffersUlidtransactionsGetCollectionRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Build call for apiOffersUlidtransactionsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidtransactionsGetCollectionCall(ulid, page, orderStatus, metadata, status, _callback);
        }

        /**
         * Execute apiOffersUlidtransactionsGetCollection request
         * @return List&lt;TransactionCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<TransactionCollectionRead> execute() throws ApiException {
            ApiResponse<List<TransactionCollectionRead>> localVarResp = apiOffersUlidtransactionsGetCollectionWithHttpInfo(ulid, page, orderStatus, metadata, status);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidtransactionsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TransactionCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TransactionCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidtransactionsGetCollectionWithHttpInfo(ulid, page, orderStatus, metadata, status);
        }

        /**
         * Execute apiOffersUlidtransactionsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {
            return apiOffersUlidtransactionsGetCollectionAsync(ulid, page, orderStatus, metadata, status, _callback);
        }
    }

    /**
     * Retrieve Payment Intents for Offer
     * Retrieves the collection of Transaction resources.
     * @param ulid Transaction identifier (required)
     * @return APIapiOffersUlidtransactionsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidtransactionsGetCollectionRequest apiOffersUlidtransactionsGetCollection(String ulid) {
        return new APIapiOffersUlidtransactionsGetCollectionRequest(ulid);
    }
    private okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostCall(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluationWrite;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions/{id}/evaluations"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        // verify the required parameter 'evaluationWrite' is set
        if (evaluationWrite == null) {
            throw new ApiException("Missing the required parameter 'evaluationWrite' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        return apiOffersUlidtransactionsIdevaluationsPostCall(ulid, id, evaluationWrite, _callback);

    }


    private ApiResponse<EvaluationRead> apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo(String ulid, String id, EvaluationWrite evaluationWrite) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(ulid, id, evaluationWrite, null);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostAsync(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback<EvaluationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(ulid, id, evaluationWrite, _callback);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidtransactionsIdevaluationsPostRequest {
        private final String ulid;
        private final String id;
        private final EvaluationWrite evaluationWrite;

        private APIapiOffersUlidtransactionsIdevaluationsPostRequest(String ulid, String id, EvaluationWrite evaluationWrite) {
            this.ulid = ulid;
            this.id = id;
            this.evaluationWrite = evaluationWrite;
        }

        /**
         * Build call for apiOffersUlidtransactionsIdevaluationsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidtransactionsIdevaluationsPostCall(ulid, id, evaluationWrite, _callback);
        }

        /**
         * Execute apiOffersUlidtransactionsIdevaluationsPost request
         * @return EvaluationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public EvaluationRead execute() throws ApiException {
            ApiResponse<EvaluationRead> localVarResp = apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo(ulid, id, evaluationWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidtransactionsIdevaluationsPost request with HTTP info returned
         * @return ApiResponse&lt;EvaluationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EvaluationRead> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo(ulid, id, evaluationWrite);
        }

        /**
         * Execute apiOffersUlidtransactionsIdevaluationsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EvaluationRead> _callback) throws ApiException {
            return apiOffersUlidtransactionsIdevaluationsPostAsync(ulid, id, evaluationWrite, _callback);
        }
    }

    /**
     * Submit an Evaluation for the Offer
     * **Only authenticated** buyer and seller **CAN** issue an evaluation **WHEN** the transaction reached a final state.
     * @param ulid Evaluation identifier (required)
     * @param id Evaluation identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return APIapiOffersUlidtransactionsIdevaluationsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidtransactionsIdevaluationsPostRequest apiOffersUlidtransactionsIdevaluationsPost(String ulid, String id, EvaluationWrite evaluationWrite) {
        return new APIapiOffersUlidtransactionsIdevaluationsPostRequest(ulid, id, evaluationWrite);
    }
    private okhttp3.Call apiOffersUlidtransactionsPostCall(String ulid, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsPostValidateBeforeCall(String ulid, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiOffersUlidtransactionsPost(Async)");
        }

        return apiOffersUlidtransactionsPostCall(ulid, body, _callback);

    }


    private ApiResponse<TransactionRead> apiOffersUlidtransactionsPostWithHttpInfo(String ulid, Object body) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsPostValidateBeforeCall(ulid, body, null);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidtransactionsPostAsync(String ulid, Object body, final ApiCallback<TransactionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsPostValidateBeforeCall(ulid, body, _callback);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidtransactionsPostRequest {
        private final String ulid;
        private final Object body;

        private APIapiOffersUlidtransactionsPostRequest(String ulid, Object body) {
            this.ulid = ulid;
            this.body = body;
        }

        /**
         * Build call for apiOffersUlidtransactionsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidtransactionsPostCall(ulid, body, _callback);
        }

        /**
         * Execute apiOffersUlidtransactionsPost request
         * @return TransactionRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRead execute() throws ApiException {
            ApiResponse<TransactionRead> localVarResp = apiOffersUlidtransactionsPostWithHttpInfo(ulid, body);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidtransactionsPost request with HTTP info returned
         * @return ApiResponse&lt;TransactionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRead> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidtransactionsPostWithHttpInfo(ulid, body);
        }

        /**
         * Execute apiOffersUlidtransactionsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRead> _callback) throws ApiException {
            return apiOffersUlidtransactionsPostAsync(ulid, body, _callback);
        }
    }

    /**
     * Create a Payment Intent for Offer
     * Cannot be used outside of a Persona (buyer)
     * @param ulid Transaction identifier (required)
     * @param body The new Transaction resource (required)
     * @return APIapiOffersUlidtransactionsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidtransactionsPostRequest apiOffersUlidtransactionsPost(String ulid, Object body) {
        return new APIapiOffersUlidtransactionsPostRequest(ulid, body);
    }
    private okhttp3.Call apiPersonasIdoffersDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersDelete(Async)");
        }

        return apiPersonasIdoffersDeleteCall(id, _callback);

    }


    private ApiResponse<Void> apiPersonasIdoffersDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiPersonasIdoffersDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdoffersDeleteRequest {
        private final String id;

        private APIapiPersonasIdoffersDeleteRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for apiPersonasIdoffersDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdoffersDeleteCall(id, _callback);
        }

        /**
         * Execute apiPersonasIdoffersDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiPersonasIdoffersDeleteWithHttpInfo(id);
        }

        /**
         * Execute apiPersonasIdoffersDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdoffersDeleteWithHttpInfo(id);
        }

        /**
         * Execute apiPersonasIdoffersDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiPersonasIdoffersDeleteAsync(id, _callback);
        }
    }

    /**
     * Revoke an Offer for given Persona
     * That goes without says, if that **Offer** have a _Transaction_ **that is ongoing**, you **MAY NOT** revoke the **Offer**.
     * @param id Offer identifier (required)
     * @return APIapiPersonasIdoffersDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdoffersDeleteRequest apiPersonasIdoffersDelete(String id) {
        return new APIapiPersonasIdoffersDeleteRequest(id);
    }
    private okhttp3.Call apiPersonasIdoffersGetCollectionCall(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (publicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicUrl", publicUrl));
        }

        if (publicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publicUrl[]", publicUrl2));
        }

        if (unitPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitPrice", unitPrice));
        }

        if (unitPrice2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unitPrice[]", unitPrice2));
        }

        if (itemCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemCount", itemCount));
        }

        if (itemCount2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "itemCount[]", itemCount2));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (offerMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "offer.metadata[]", offerMetadata));
        }

        if (nature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nature", nature));
        }

        if (condition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("condition", condition));
        }

        if (shippingAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shippingAllowed", shippingAllowed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersGetCollectionValidateBeforeCall(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersGetCollection(Async)");
        }

        return apiPersonasIdoffersGetCollectionCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);

    }


    private ApiResponse<List<OfferCollectionRead>> apiPersonasIdoffersGetCollectionWithHttpInfo(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersGetCollectionValidateBeforeCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, null);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasIdoffersGetCollectionAsync(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersGetCollectionValidateBeforeCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdoffersGetCollectionRequest {
        private final String id;
        private Integer page;
        private String title;
        private String publicUrl;
        private List<String> publicUrl2;
        private BigDecimal unitPrice;
        private List<BigDecimal> unitPrice2;
        private Integer itemCount;
        private List<Integer> itemCount2;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private List<String> metadata;
        private List<String> offerMetadata;
        private String nature;
        private String condition;
        private Boolean shippingAllowed;

        private APIapiPersonasIdoffersGetCollectionRequest(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set publicUrl
         * @param publicUrl  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest publicUrl(String publicUrl) {
            this.publicUrl = publicUrl;
            return this;
        }

        /**
         * Set publicUrl2
         * @param publicUrl2  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest publicUrl2(List<String> publicUrl2) {
            this.publicUrl2 = publicUrl2;
            return this;
        }

        /**
         * Set unitPrice
         * @param unitPrice  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest unitPrice(BigDecimal unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * Set unitPrice2
         * @param unitPrice2  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest unitPrice2(List<BigDecimal> unitPrice2) {
            this.unitPrice2 = unitPrice2;
            return this;
        }

        /**
         * Set itemCount
         * @param itemCount  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest itemCount(Integer itemCount) {
            this.itemCount = itemCount;
            return this;
        }

        /**
         * Set itemCount2
         * @param itemCount2  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest itemCount2(List<Integer> itemCount2) {
            this.itemCount2 = itemCount2;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set offerMetadata
         * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest offerMetadata(List<String> offerMetadata) {
            this.offerMetadata = offerMetadata;
            return this;
        }

        /**
         * Set nature
         * @param nature Filter on a limited subset of nature (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest nature(String nature) {
            this.nature = nature;
            return this;
        }

        /**
         * Set condition
         * @param condition Filter on a limited subset of condition (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest condition(String condition) {
            this.condition = condition;
            return this;
        }

        /**
         * Set shippingAllowed
         * @param shippingAllowed  (optional)
         * @return APIapiPersonasIdoffersGetCollectionRequest
         */
        public APIapiPersonasIdoffersGetCollectionRequest shippingAllowed(Boolean shippingAllowed) {
            this.shippingAllowed = shippingAllowed;
            return this;
        }

        /**
         * Build call for apiPersonasIdoffersGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdoffersGetCollectionCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        }

        /**
         * Execute apiPersonasIdoffersGetCollection request
         * @return List&lt;OfferCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<OfferCollectionRead> execute() throws ApiException {
            ApiResponse<List<OfferCollectionRead>> localVarResp = apiPersonasIdoffersGetCollectionWithHttpInfo(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasIdoffersGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OfferCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OfferCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdoffersGetCollectionWithHttpInfo(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        }

        /**
         * Execute apiPersonasIdoffersGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {
            return apiPersonasIdoffersGetCollectionAsync(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        }
    }

    /**
     * List or Search Offers for given Persona
     * Retrieves the collection of Offer resources.
     * @param id Offer identifier (required)
     * @return APIapiPersonasIdoffersGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdoffersGetCollectionRequest apiPersonasIdoffersGetCollection(String id) {
        return new APIapiPersonasIdoffersGetCollectionRequest(id);
    }
    private okhttp3.Call apiPersonasIdoffersPatchCall(String id, OfferUpdate offerUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerUpdate;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersPatchValidateBeforeCall(String id, OfferUpdate offerUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersPatch(Async)");
        }

        // verify the required parameter 'offerUpdate' is set
        if (offerUpdate == null) {
            throw new ApiException("Missing the required parameter 'offerUpdate' when calling apiPersonasIdoffersPatch(Async)");
        }

        return apiPersonasIdoffersPatchCall(id, offerUpdate, _callback);

    }


    private ApiResponse<OfferRead> apiPersonasIdoffersPatchWithHttpInfo(String id, OfferUpdate offerUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersPatchValidateBeforeCall(id, offerUpdate, null);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasIdoffersPatchAsync(String id, OfferUpdate offerUpdate, final ApiCallback<OfferRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersPatchValidateBeforeCall(id, offerUpdate, _callback);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdoffersPatchRequest {
        private final String id;
        private final OfferUpdate offerUpdate;

        private APIapiPersonasIdoffersPatchRequest(String id, OfferUpdate offerUpdate) {
            this.id = id;
            this.offerUpdate = offerUpdate;
        }

        /**
         * Build call for apiPersonasIdoffersPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdoffersPatchCall(id, offerUpdate, _callback);
        }

        /**
         * Execute apiPersonasIdoffersPatch request
         * @return OfferRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public OfferRead execute() throws ApiException {
            ApiResponse<OfferRead> localVarResp = apiPersonasIdoffersPatchWithHttpInfo(id, offerUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasIdoffersPatch request with HTTP info returned
         * @return ApiResponse&lt;OfferRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfferRead> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdoffersPatchWithHttpInfo(id, offerUpdate);
        }

        /**
         * Execute apiPersonasIdoffersPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfferRead> _callback) throws ApiException {
            return apiPersonasIdoffersPatchAsync(id, offerUpdate, _callback);
        }
    }

    /**
     * Update an Offer for given Persona
     * Updates the Offer resource.
     * @param id Offer identifier (required)
     * @param offerUpdate The updated Offer resource (required)
     * @return APIapiPersonasIdoffersPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdoffersPatchRequest apiPersonasIdoffersPatch(String id, OfferUpdate offerUpdate) {
        return new APIapiPersonasIdoffersPatchRequest(id, offerUpdate);
    }
    private okhttp3.Call apiPersonasIdoffersPostCall(String id, OfferWrite offerWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerWrite;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersPostValidateBeforeCall(String id, OfferWrite offerWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersPost(Async)");
        }

        // verify the required parameter 'offerWrite' is set
        if (offerWrite == null) {
            throw new ApiException("Missing the required parameter 'offerWrite' when calling apiPersonasIdoffersPost(Async)");
        }

        return apiPersonasIdoffersPostCall(id, offerWrite, _callback);

    }


    private ApiResponse<OfferPostCreationRead> apiPersonasIdoffersPostWithHttpInfo(String id, OfferWrite offerWrite) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersPostValidateBeforeCall(id, offerWrite, null);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiPersonasIdoffersPostAsync(String id, OfferWrite offerWrite, final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersPostValidateBeforeCall(id, offerWrite, _callback);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiPersonasIdoffersPostRequest {
        private final String id;
        private final OfferWrite offerWrite;

        private APIapiPersonasIdoffersPostRequest(String id, OfferWrite offerWrite) {
            this.id = id;
            this.offerWrite = offerWrite;
        }

        /**
         * Build call for apiPersonasIdoffersPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiPersonasIdoffersPostCall(id, offerWrite, _callback);
        }

        /**
         * Execute apiPersonasIdoffersPost request
         * @return OfferPostCreationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public OfferPostCreationRead execute() throws ApiException {
            ApiResponse<OfferPostCreationRead> localVarResp = apiPersonasIdoffersPostWithHttpInfo(id, offerWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiPersonasIdoffersPost request with HTTP info returned
         * @return ApiResponse&lt;OfferPostCreationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfferPostCreationRead> executeWithHttpInfo() throws ApiException {
            return apiPersonasIdoffersPostWithHttpInfo(id, offerWrite);
        }

        /**
         * Execute apiPersonasIdoffersPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {
            return apiPersonasIdoffersPostAsync(id, offerWrite, _callback);
        }
    }

    /**
     * Create an Offer for given Persona
     * Creates a Offer resource.
     * @param id Offer identifier (required)
     * @param offerWrite The new Offer resource (required)
     * @return APIapiPersonasIdoffersPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiPersonasIdoffersPostRequest apiPersonasIdoffersPost(String id, OfferWrite offerWrite) {
        return new APIapiPersonasIdoffersPostRequest(id, offerWrite);
    }
    private okhttp3.Call apiTransactionsGetCollectionCall(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsGetCollectionValidateBeforeCall(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        return apiTransactionsGetCollectionCall(page, orderStatus, metadata, status, _callback);

    }


    private ApiResponse<List<TransactionCollectionRead>> apiTransactionsGetCollectionWithHttpInfo(Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderStatus, metadata, status, null);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsGetCollectionAsync(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderStatus, metadata, status, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsGetCollectionRequest {
        private Integer page;
        private String orderStatus;
        private List<String> metadata;
        private String status;

        private APIapiTransactionsGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set orderStatus
         * @param orderStatus  (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest orderStatus(String orderStatus) {
            this.orderStatus = orderStatus;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set status
         * @param status Filter on a limited subset of status (optional)
         * @return APIapiTransactionsGetCollectionRequest
         */
        public APIapiTransactionsGetCollectionRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Build call for apiTransactionsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsGetCollectionCall(page, orderStatus, metadata, status, _callback);
        }

        /**
         * Execute apiTransactionsGetCollection request
         * @return List&lt;TransactionCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<TransactionCollectionRead> execute() throws ApiException {
            ApiResponse<List<TransactionCollectionRead>> localVarResp = apiTransactionsGetCollectionWithHttpInfo(page, orderStatus, metadata, status);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TransactionCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TransactionCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiTransactionsGetCollectionWithHttpInfo(page, orderStatus, metadata, status);
        }

        /**
         * Execute apiTransactionsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {
            return apiTransactionsGetCollectionAsync(page, orderStatus, metadata, status, _callback);
        }
    }

    /**
     * Retrieves the collection of Transaction resources.
     * Retrieves the collection of Transaction resources.
     * @return APIapiTransactionsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsGetCollectionRequest apiTransactionsGetCollection() {
        return new APIapiTransactionsGetCollectionRequest();
    }
    private okhttp3.Call apiTransactionsUliddisputeDeleteCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputeDeleteValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputeDelete(Async)");
        }

        return apiTransactionsUliddisputeDeleteCall(ulid, _callback);

    }


    private ApiResponse<Void> apiTransactionsUliddisputeDeleteWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputeDeleteValidateBeforeCall(ulid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiTransactionsUliddisputeDeleteAsync(String ulid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputeDeleteValidateBeforeCall(ulid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUliddisputeDeleteRequest {
        private final String ulid;

        private APIapiTransactionsUliddisputeDeleteRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiTransactionsUliddisputeDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUliddisputeDeleteCall(ulid, _callback);
        }

        /**
         * Execute apiTransactionsUliddisputeDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiTransactionsUliddisputeDeleteWithHttpInfo(ulid);
        }

        /**
         * Execute apiTransactionsUliddisputeDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUliddisputeDeleteWithHttpInfo(ulid);
        }

        /**
         * Execute apiTransactionsUliddisputeDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiTransactionsUliddisputeDeleteAsync(ulid, _callback);
        }
    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Dispute identifier (required)
     * @return APIapiTransactionsUliddisputeDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUliddisputeDeleteRequest apiTransactionsUliddisputeDelete(String ulid) {
        return new APIapiTransactionsUliddisputeDeleteRequest(ulid);
    }
    private okhttp3.Call apiTransactionsUliddisputeGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputeGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputeGet(Async)");
        }

        return apiTransactionsUliddisputeGetCall(ulid, _callback);

    }


    private ApiResponse<DisputeRead> apiTransactionsUliddisputeGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputeGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUliddisputeGetAsync(String ulid, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputeGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUliddisputeGetRequest {
        private final String ulid;

        private APIapiTransactionsUliddisputeGetRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiTransactionsUliddisputeGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUliddisputeGetCall(ulid, _callback);
        }

        /**
         * Execute apiTransactionsUliddisputeGet request
         * @return DisputeRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputeRead execute() throws ApiException {
            ApiResponse<DisputeRead> localVarResp = apiTransactionsUliddisputeGetWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUliddisputeGet request with HTTP info returned
         * @return ApiResponse&lt;DisputeRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputeRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUliddisputeGetWithHttpInfo(ulid);
        }

        /**
         * Execute apiTransactionsUliddisputeGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputeRead> _callback) throws ApiException {
            return apiTransactionsUliddisputeGetAsync(ulid, _callback);
        }
    }

    /**
     * Read Dispute from existing Transaction
     * Retrieves a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @return APIapiTransactionsUliddisputeGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUliddisputeGetRequest apiTransactionsUliddisputeGet(String ulid) {
        return new APIapiTransactionsUliddisputeGetRequest(ulid);
    }
    private okhttp3.Call apiTransactionsUliddisputePatchCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeUpdate;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputePatchValidateBeforeCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputePatch(Async)");
        }

        // verify the required parameter 'disputeUpdate' is set
        if (disputeUpdate == null) {
            throw new ApiException("Missing the required parameter 'disputeUpdate' when calling apiTransactionsUliddisputePatch(Async)");
        }

        return apiTransactionsUliddisputePatchCall(ulid, disputeUpdate, _callback);

    }


    private ApiResponse<DisputeRead> apiTransactionsUliddisputePatchWithHttpInfo(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputePatchValidateBeforeCall(ulid, disputeUpdate, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUliddisputePatchAsync(String ulid, DisputeUpdate disputeUpdate, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputePatchValidateBeforeCall(ulid, disputeUpdate, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUliddisputePatchRequest {
        private final String ulid;
        private final DisputeUpdate disputeUpdate;

        private APIapiTransactionsUliddisputePatchRequest(String ulid, DisputeUpdate disputeUpdate) {
            this.ulid = ulid;
            this.disputeUpdate = disputeUpdate;
        }

        /**
         * Build call for apiTransactionsUliddisputePatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUliddisputePatchCall(ulid, disputeUpdate, _callback);
        }

        /**
         * Execute apiTransactionsUliddisputePatch request
         * @return DisputeRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputeRead execute() throws ApiException {
            ApiResponse<DisputeRead> localVarResp = apiTransactionsUliddisputePatchWithHttpInfo(ulid, disputeUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUliddisputePatch request with HTTP info returned
         * @return ApiResponse&lt;DisputeRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputeRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUliddisputePatchWithHttpInfo(ulid, disputeUpdate);
        }

        /**
         * Execute apiTransactionsUliddisputePatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputeRead> _callback) throws ApiException {
            return apiTransactionsUliddisputePatchAsync(ulid, disputeUpdate, _callback);
        }
    }

    /**
     * Interact with a Dispute
     * Only authenticated Persona can interact with a Dispute object. Usually through our web application.
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return APIapiTransactionsUliddisputePatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUliddisputePatchRequest apiTransactionsUliddisputePatch(String ulid, DisputeUpdate disputeUpdate) {
        return new APIapiTransactionsUliddisputePatchRequest(ulid, disputeUpdate);
    }
    private okhttp3.Call apiTransactionsUliddisputePostCall(String ulid, DisputeWrite disputeWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeWrite;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputePostValidateBeforeCall(String ulid, DisputeWrite disputeWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputePost(Async)");
        }

        // verify the required parameter 'disputeWrite' is set
        if (disputeWrite == null) {
            throw new ApiException("Missing the required parameter 'disputeWrite' when calling apiTransactionsUliddisputePost(Async)");
        }

        return apiTransactionsUliddisputePostCall(ulid, disputeWrite, _callback);

    }


    private ApiResponse<DisputePostCreationRead> apiTransactionsUliddisputePostWithHttpInfo(String ulid, DisputeWrite disputeWrite) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputePostValidateBeforeCall(ulid, disputeWrite, null);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUliddisputePostAsync(String ulid, DisputeWrite disputeWrite, final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputePostValidateBeforeCall(ulid, disputeWrite, _callback);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUliddisputePostRequest {
        private final String ulid;
        private final DisputeWrite disputeWrite;

        private APIapiTransactionsUliddisputePostRequest(String ulid, DisputeWrite disputeWrite) {
            this.ulid = ulid;
            this.disputeWrite = disputeWrite;
        }

        /**
         * Build call for apiTransactionsUliddisputePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUliddisputePostCall(ulid, disputeWrite, _callback);
        }

        /**
         * Execute apiTransactionsUliddisputePost request
         * @return DisputePostCreationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputePostCreationRead execute() throws ApiException {
            ApiResponse<DisputePostCreationRead> localVarResp = apiTransactionsUliddisputePostWithHttpInfo(ulid, disputeWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUliddisputePost request with HTTP info returned
         * @return ApiResponse&lt;DisputePostCreationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputePostCreationRead> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUliddisputePostWithHttpInfo(ulid, disputeWrite);
        }

        /**
         * Execute apiTransactionsUliddisputePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {
            return apiTransactionsUliddisputePostAsync(ulid, disputeWrite, _callback);
        }
    }

    /**
     * Open a Dispute related to existing Transaction
     * Creates a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param disputeWrite The new Dispute resource (required)
     * @return APIapiTransactionsUliddisputePostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUliddisputePostRequest apiTransactionsUliddisputePost(String ulid, DisputeWrite disputeWrite) {
        return new APIapiTransactionsUliddisputePostRequest(ulid, disputeWrite);
    }
    private okhttp3.Call apiTransactionsUlidparcelsGetCollectionCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsGetCollection(Async)");
        }

        return apiTransactionsUlidparcelsGetCollectionCall(ulid, page, _callback);

    }


    private ApiResponse<List<Object>> apiTransactionsUlidparcelsGetCollectionWithHttpInfo(String ulid, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(ulid, page, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUlidparcelsGetCollectionAsync(String ulid, Integer page, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(ulid, page, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUlidparcelsGetCollectionRequest {
        private final String ulid;
        private Integer page;

        private APIapiTransactionsUlidparcelsGetCollectionRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiTransactionsUlidparcelsGetCollectionRequest
         */
        public APIapiTransactionsUlidparcelsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for apiTransactionsUlidparcelsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUlidparcelsGetCollectionCall(ulid, page, _callback);
        }

        /**
         * Execute apiTransactionsUlidparcelsGetCollection request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            ApiResponse<List<Object>> localVarResp = apiTransactionsUlidparcelsGetCollectionWithHttpInfo(ulid, page);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUlidparcelsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUlidparcelsGetCollectionWithHttpInfo(ulid, page);
        }

        /**
         * Execute apiTransactionsUlidparcelsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            return apiTransactionsUlidparcelsGetCollectionAsync(ulid, page, _callback);
        }
    }

    /**
     * Read shipments from Transaction
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @return APIapiTransactionsUlidparcelsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUlidparcelsGetCollectionRequest apiTransactionsUlidparcelsGetCollection(String ulid) {
        return new APIapiTransactionsUlidparcelsGetCollectionRequest(ulid);
    }
    private okhttp3.Call apiTransactionsUlidparcelsIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransactionsUlidparcelsIdDelete(Async)");
        }

        return apiTransactionsUlidparcelsIdDeleteCall(ulid, id, _callback);

    }


    private ApiResponse<Void> apiTransactionsUlidparcelsIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiTransactionsUlidparcelsIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUlidparcelsIdDeleteRequest {
        private final String ulid;
        private final Integer id;

        private APIapiTransactionsUlidparcelsIdDeleteRequest(String ulid, Integer id) {
            this.ulid = ulid;
            this.id = id;
        }

        /**
         * Build call for apiTransactionsUlidparcelsIdDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUlidparcelsIdDeleteCall(ulid, id, _callback);
        }

        /**
         * Execute apiTransactionsUlidparcelsIdDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiTransactionsUlidparcelsIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiTransactionsUlidparcelsIdDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUlidparcelsIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiTransactionsUlidparcelsIdDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiTransactionsUlidparcelsIdDeleteAsync(ulid, id, _callback);
        }
    }

    /**
     * Withdraw shipment from Transaction
     * No one except the support can do that manoeuvre.
     * @param ulid  (required)
     * @param id  (required)
     * @return APIapiTransactionsUlidparcelsIdDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUlidparcelsIdDeleteRequest apiTransactionsUlidparcelsIdDelete(String ulid, Integer id) {
        return new APIapiTransactionsUlidparcelsIdDeleteRequest(ulid, id);
    }
    private okhttp3.Call apiTransactionsUlidparcelsPostCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parcelWrite;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsPostValidateBeforeCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsPost(Async)");
        }

        // verify the required parameter 'parcelWrite' is set
        if (parcelWrite == null) {
            throw new ApiException("Missing the required parameter 'parcelWrite' when calling apiTransactionsUlidparcelsPost(Async)");
        }

        return apiTransactionsUlidparcelsPostCall(ulid, parcelWrite, _callback);

    }


    private ApiResponse<Object> apiTransactionsUlidparcelsPostWithHttpInfo(String ulid, ParcelWrite parcelWrite) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiTransactionsUlidparcelsPostAsync(String ulid, ParcelWrite parcelWrite, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiTransactionsUlidparcelsPostRequest {
        private final String ulid;
        private final ParcelWrite parcelWrite;

        private APIapiTransactionsUlidparcelsPostRequest(String ulid, ParcelWrite parcelWrite) {
            this.ulid = ulid;
            this.parcelWrite = parcelWrite;
        }

        /**
         * Build call for apiTransactionsUlidparcelsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiTransactionsUlidparcelsPostCall(ulid, parcelWrite, _callback);
        }

        /**
         * Execute apiTransactionsUlidparcelsPost request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = apiTransactionsUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiTransactionsUlidparcelsPost request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return apiTransactionsUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
        }

        /**
         * Execute apiTransactionsUlidparcelsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return apiTransactionsUlidparcelsPostAsync(ulid, parcelWrite, _callback);
        }
    }

    /**
     * Manually declare package shipped for Transaction
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return APIapiTransactionsUlidparcelsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiTransactionsUlidparcelsPostRequest apiTransactionsUlidparcelsPost(String ulid, ParcelWrite parcelWrite) {
        return new APIapiTransactionsUlidparcelsPostRequest(ulid, parcelWrite);
    }
}
