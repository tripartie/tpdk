/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.199
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.api;

import com.tripartie.tpdk.ApiCallback;
import com.tripartie.tpdk.ApiClient;
import com.tripartie.tpdk.ApiException;
import com.tripartie.tpdk.ApiResponse;
import com.tripartie.tpdk.Configuration;
import com.tripartie.tpdk.Pair;
import com.tripartie.tpdk.ProgressRequestBody;
import com.tripartie.tpdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.tripartie.tpdk.model.AccessError;
import com.tripartie.tpdk.model.AuthError;
import com.tripartie.tpdk.model.DisputeCollectionRead;
import com.tripartie.tpdk.model.DisputeIndependentWrite;
import com.tripartie.tpdk.model.DisputePostCreationRead;
import com.tripartie.tpdk.model.DisputeRead;
import com.tripartie.tpdk.model.DisputeUpdate;
import com.tripartie.tpdk.model.EvaluationRead;
import com.tripartie.tpdk.model.EvaluationWrite;
import com.tripartie.tpdk.model.EvidenceRead;
import com.tripartie.tpdk.model.EvidenceWrite;
import java.io.File;
import com.tripartie.tpdk.model.GenericError;
import com.tripartie.tpdk.model.InvalidQueryError;
import com.tripartie.tpdk.model.MediaRead;
import com.tripartie.tpdk.model.NotFoundError;
import com.tripartie.tpdk.model.ParcelWrite;
import com.tripartie.tpdk.model.RateLimitError;
import com.tripartie.tpdk.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResolutionCenterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResolutionCenterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResolutionCenterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call apiDisputesGetCollectionCall(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[createdAt]", orderCreatedAt));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (orderUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[updatedAt]", orderUpdatedAt));
        }

        if (transactionOfferPublicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.publicUrl", transactionOfferPublicUrl));
        }

        if (transactionOfferPublicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.offer.publicUrl[]", transactionOfferPublicUrl2));
        }

        if (transactionOfferTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.title", transactionOfferTitle));
        }

        if (transactionBuyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.buyer.id", transactionBuyerId));
        }

        if (transactionBuyerId2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.buyer.id[]", transactionBuyerId2));
        }

        if (transactionBuyerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.buyer.email", transactionBuyerEmail));
        }

        if (transactionOfferSellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.seller.id", transactionOfferSellerId));
        }

        if (transactionOfferSellerId2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.offer.seller.id[]", transactionOfferSellerId2));
        }

        if (transactionOfferSellerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.seller.email", transactionOfferSellerEmail));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (transactionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.status", transactionStatus));
        }

        if (existsRecommendedSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[recommendedSolution]", existsRecommendedSolution));
        }

        if (existsChosenSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[chosenSolution]", existsChosenSolution));
        }

        if (existsCounterSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[counterSolution]", existsCounterSolution));
        }

        if (existsPlatformSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[platformSolution]", existsPlatformSolution));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (transactionMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "transaction.metadata[]", transactionMetadata));
        }

        if (transactionOfferMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "transaction.offer.metadata[]", transactionOfferMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesGetCollectionValidateBeforeCall(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback _callback) throws ApiException {
        return apiDisputesGetCollectionCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);

    }


    private ApiResponse<List<DisputeCollectionRead>> apiDisputesGetCollectionWithHttpInfo(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesGetCollectionValidateBeforeCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, null);
        Type localVarReturnType = new TypeToken<List<DisputeCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesGetCollectionAsync(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback<List<DisputeCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesGetCollectionValidateBeforeCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);
        Type localVarReturnType = new TypeToken<List<DisputeCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesGetCollectionRequest {
        private Integer page;
        private String orderCreatedAt;
        private String orderStatus;
        private String orderUpdatedAt;
        private String transactionOfferPublicUrl;
        private List<String> transactionOfferPublicUrl2;
        private String transactionOfferTitle;
        private Integer transactionBuyerId;
        private List<Integer> transactionBuyerId2;
        private String transactionBuyerEmail;
        private Integer transactionOfferSellerId;
        private List<Integer> transactionOfferSellerId2;
        private String transactionOfferSellerEmail;
        private String createdAtBefore;
        private String createdAtStrictlyBefore;
        private String createdAtAfter;
        private String createdAtStrictlyAfter;
        private String status;
        private String transactionStatus;
        private Boolean existsRecommendedSolution;
        private Boolean existsChosenSolution;
        private Boolean existsCounterSolution;
        private Boolean existsPlatformSolution;
        private List<String> metadata;
        private List<String> transactionMetadata;
        private List<String> transactionOfferMetadata;

        private APIapiDisputesGetCollectionRequest() {
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set orderCreatedAt
         * @param orderCreatedAt  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest orderCreatedAt(String orderCreatedAt) {
            this.orderCreatedAt = orderCreatedAt;
            return this;
        }

        /**
         * Set orderStatus
         * @param orderStatus  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest orderStatus(String orderStatus) {
            this.orderStatus = orderStatus;
            return this;
        }

        /**
         * Set orderUpdatedAt
         * @param orderUpdatedAt  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest orderUpdatedAt(String orderUpdatedAt) {
            this.orderUpdatedAt = orderUpdatedAt;
            return this;
        }

        /**
         * Set transactionOfferPublicUrl
         * @param transactionOfferPublicUrl  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferPublicUrl(String transactionOfferPublicUrl) {
            this.transactionOfferPublicUrl = transactionOfferPublicUrl;
            return this;
        }

        /**
         * Set transactionOfferPublicUrl2
         * @param transactionOfferPublicUrl2  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferPublicUrl2(List<String> transactionOfferPublicUrl2) {
            this.transactionOfferPublicUrl2 = transactionOfferPublicUrl2;
            return this;
        }

        /**
         * Set transactionOfferTitle
         * @param transactionOfferTitle  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferTitle(String transactionOfferTitle) {
            this.transactionOfferTitle = transactionOfferTitle;
            return this;
        }

        /**
         * Set transactionBuyerId
         * @param transactionBuyerId  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionBuyerId(Integer transactionBuyerId) {
            this.transactionBuyerId = transactionBuyerId;
            return this;
        }

        /**
         * Set transactionBuyerId2
         * @param transactionBuyerId2  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionBuyerId2(List<Integer> transactionBuyerId2) {
            this.transactionBuyerId2 = transactionBuyerId2;
            return this;
        }

        /**
         * Set transactionBuyerEmail
         * @param transactionBuyerEmail  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionBuyerEmail(String transactionBuyerEmail) {
            this.transactionBuyerEmail = transactionBuyerEmail;
            return this;
        }

        /**
         * Set transactionOfferSellerId
         * @param transactionOfferSellerId  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferSellerId(Integer transactionOfferSellerId) {
            this.transactionOfferSellerId = transactionOfferSellerId;
            return this;
        }

        /**
         * Set transactionOfferSellerId2
         * @param transactionOfferSellerId2  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferSellerId2(List<Integer> transactionOfferSellerId2) {
            this.transactionOfferSellerId2 = transactionOfferSellerId2;
            return this;
        }

        /**
         * Set transactionOfferSellerEmail
         * @param transactionOfferSellerEmail  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferSellerEmail(String transactionOfferSellerEmail) {
            this.transactionOfferSellerEmail = transactionOfferSellerEmail;
            return this;
        }

        /**
         * Set createdAtBefore
         * @param createdAtBefore  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest createdAtBefore(String createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }

        /**
         * Set createdAtStrictlyBefore
         * @param createdAtStrictlyBefore  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest createdAtStrictlyBefore(String createdAtStrictlyBefore) {
            this.createdAtStrictlyBefore = createdAtStrictlyBefore;
            return this;
        }

        /**
         * Set createdAtAfter
         * @param createdAtAfter  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest createdAtAfter(String createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }

        /**
         * Set createdAtStrictlyAfter
         * @param createdAtStrictlyAfter  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest createdAtStrictlyAfter(String createdAtStrictlyAfter) {
            this.createdAtStrictlyAfter = createdAtStrictlyAfter;
            return this;
        }

        /**
         * Set status
         * @param status Filter on a limited subset of status (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Set transactionStatus
         * @param transactionStatus Filter on a limited subset of transaction.status (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionStatus(String transactionStatus) {
            this.transactionStatus = transactionStatus;
            return this;
        }

        /**
         * Set existsRecommendedSolution
         * @param existsRecommendedSolution  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest existsRecommendedSolution(Boolean existsRecommendedSolution) {
            this.existsRecommendedSolution = existsRecommendedSolution;
            return this;
        }

        /**
         * Set existsChosenSolution
         * @param existsChosenSolution  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest existsChosenSolution(Boolean existsChosenSolution) {
            this.existsChosenSolution = existsChosenSolution;
            return this;
        }

        /**
         * Set existsCounterSolution
         * @param existsCounterSolution  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest existsCounterSolution(Boolean existsCounterSolution) {
            this.existsCounterSolution = existsCounterSolution;
            return this;
        }

        /**
         * Set existsPlatformSolution
         * @param existsPlatformSolution  (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest existsPlatformSolution(Boolean existsPlatformSolution) {
            this.existsPlatformSolution = existsPlatformSolution;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set transactionMetadata
         * @param transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionMetadata(List<String> transactionMetadata) {
            this.transactionMetadata = transactionMetadata;
            return this;
        }

        /**
         * Set transactionOfferMetadata
         * @param transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
         * @return APIapiDisputesGetCollectionRequest
         */
        public APIapiDisputesGetCollectionRequest transactionOfferMetadata(List<String> transactionOfferMetadata) {
            this.transactionOfferMetadata = transactionOfferMetadata;
            return this;
        }

        /**
         * Build call for apiDisputesGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesGetCollectionCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);
        }

        /**
         * Execute apiDisputesGetCollection request
         * @return List&lt;DisputeCollectionRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<DisputeCollectionRead> execute() throws ApiException {
            ApiResponse<List<DisputeCollectionRead>> localVarResp = apiDisputesGetCollectionWithHttpInfo(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DisputeCollectionRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DisputeCollectionRead>> executeWithHttpInfo() throws ApiException {
            return apiDisputesGetCollectionWithHttpInfo(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata);
        }

        /**
         * Execute apiDisputesGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DisputeCollectionRead>> _callback) throws ApiException {
            return apiDisputesGetCollectionAsync(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);
        }
    }

    /**
     * Retrieves the collection of Dispute resources.
     * Retrieves the collection of Dispute resources.
     * @return APIapiDisputesGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesGetCollectionRequest apiDisputesGetCollection() {
        return new APIapiDisputesGetCollectionRequest();
    }
    private okhttp3.Call apiDisputesPostCall(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeIndependentWrite;

        // create path and map variables
        String localVarPath = "/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesPostValidateBeforeCall(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeIndependentWrite' is set
        if (disputeIndependentWrite == null) {
            throw new ApiException("Missing the required parameter 'disputeIndependentWrite' when calling apiDisputesPost(Async)");
        }

        return apiDisputesPostCall(disputeIndependentWrite, _callback);

    }


    private ApiResponse<DisputePostCreationRead> apiDisputesPostWithHttpInfo(DisputeIndependentWrite disputeIndependentWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesPostValidateBeforeCall(disputeIndependentWrite, null);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesPostAsync(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesPostValidateBeforeCall(disputeIndependentWrite, _callback);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesPostRequest {
        private final DisputeIndependentWrite disputeIndependentWrite;

        private APIapiDisputesPostRequest(DisputeIndependentWrite disputeIndependentWrite) {
            this.disputeIndependentWrite = disputeIndependentWrite;
        }

        /**
         * Build call for apiDisputesPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesPostCall(disputeIndependentWrite, _callback);
        }

        /**
         * Execute apiDisputesPost request
         * @return DisputePostCreationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputePostCreationRead execute() throws ApiException {
            ApiResponse<DisputePostCreationRead> localVarResp = apiDisputesPostWithHttpInfo(disputeIndependentWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesPost request with HTTP info returned
         * @return ApiResponse&lt;DisputePostCreationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputePostCreationRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesPostWithHttpInfo(disputeIndependentWrite);
        }

        /**
         * Execute apiDisputesPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {
            return apiDisputesPostAsync(disputeIndependentWrite, _callback);
        }
    }

    /**
     * Draft a standalone Dispute
     * Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.
     * @param disputeIndependentWrite The new Dispute resource (required)
     * @return APIapiDisputesPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesPostRequest apiDisputesPost(DisputeIndependentWrite disputeIndependentWrite) {
        return new APIapiDisputesPostRequest(disputeIndependentWrite);
    }
    private okhttp3.Call apiDisputesUlidDeleteCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidDeleteValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidDelete(Async)");
        }

        return apiDisputesUlidDeleteCall(ulid, _callback);

    }


    private ApiResponse<Void> apiDisputesUlidDeleteWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidDeleteValidateBeforeCall(ulid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiDisputesUlidDeleteAsync(String ulid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidDeleteValidateBeforeCall(ulid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidDeleteRequest {
        private final String ulid;

        private APIapiDisputesUlidDeleteRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiDisputesUlidDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidDeleteCall(ulid, _callback);
        }

        /**
         * Execute apiDisputesUlidDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiDisputesUlidDeleteWithHttpInfo(ulid);
        }

        /**
         * Execute apiDisputesUlidDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidDeleteWithHttpInfo(ulid);
        }

        /**
         * Execute apiDisputesUlidDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiDisputesUlidDeleteAsync(ulid, _callback);
        }
    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Dispute identifier (required)
     * @return APIapiDisputesUlidDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidDeleteRequest apiDisputesUlidDelete(String ulid) {
        return new APIapiDisputesUlidDeleteRequest(ulid);
    }
    private okhttp3.Call apiDisputesUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidGet(Async)");
        }

        return apiDisputesUlidGetCall(ulid, _callback);

    }


    private ApiResponse<DisputeRead> apiDisputesUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidGetAsync(String ulid, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidGetRequest {
        private final String ulid;

        private APIapiDisputesUlidGetRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiDisputesUlidGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidGetCall(ulid, _callback);
        }

        /**
         * Execute apiDisputesUlidGet request
         * @return DisputeRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputeRead execute() throws ApiException {
            ApiResponse<DisputeRead> localVarResp = apiDisputesUlidGetWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidGet request with HTTP info returned
         * @return ApiResponse&lt;DisputeRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputeRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidGetWithHttpInfo(ulid);
        }

        /**
         * Execute apiDisputesUlidGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputeRead> _callback) throws ApiException {
            return apiDisputesUlidGetAsync(ulid, _callback);
        }
    }

    /**
     * Retrieves a Dispute resource.
     * Retrieves a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @return APIapiDisputesUlidGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidGetRequest apiDisputesUlidGet(String ulid) {
        return new APIapiDisputesUlidGetRequest(ulid);
    }
    private okhttp3.Call apiDisputesUlidPatchCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeUpdate;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidPatchValidateBeforeCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidPatch(Async)");
        }

        // verify the required parameter 'disputeUpdate' is set
        if (disputeUpdate == null) {
            throw new ApiException("Missing the required parameter 'disputeUpdate' when calling apiDisputesUlidPatch(Async)");
        }

        return apiDisputesUlidPatchCall(ulid, disputeUpdate, _callback);

    }


    private ApiResponse<DisputeRead> apiDisputesUlidPatchWithHttpInfo(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidPatchValidateBeforeCall(ulid, disputeUpdate, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidPatchAsync(String ulid, DisputeUpdate disputeUpdate, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidPatchValidateBeforeCall(ulid, disputeUpdate, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidPatchRequest {
        private final String ulid;
        private final DisputeUpdate disputeUpdate;

        private APIapiDisputesUlidPatchRequest(String ulid, DisputeUpdate disputeUpdate) {
            this.ulid = ulid;
            this.disputeUpdate = disputeUpdate;
        }

        /**
         * Build call for apiDisputesUlidPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidPatchCall(ulid, disputeUpdate, _callback);
        }

        /**
         * Execute apiDisputesUlidPatch request
         * @return DisputeRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public DisputeRead execute() throws ApiException {
            ApiResponse<DisputeRead> localVarResp = apiDisputesUlidPatchWithHttpInfo(ulid, disputeUpdate);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidPatch request with HTTP info returned
         * @return ApiResponse&lt;DisputeRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisputeRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidPatchWithHttpInfo(ulid, disputeUpdate);
        }

        /**
         * Execute apiDisputesUlidPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisputeRead> _callback) throws ApiException {
            return apiDisputesUlidPatchAsync(ulid, disputeUpdate, _callback);
        }
    }

    /**
     * Update the Dispute
     * Updates the Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return APIapiDisputesUlidPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidPatchRequest apiDisputesUlidPatch(String ulid, DisputeUpdate disputeUpdate) {
        return new APIapiDisputesUlidPatchRequest(ulid, disputeUpdate);
    }
    private okhttp3.Call apiDisputesUlidevaluationsPostCall(String ulid, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluationWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evaluations"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevaluationsPostValidateBeforeCall(String ulid, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevaluationsPost(Async)");
        }

        // verify the required parameter 'evaluationWrite' is set
        if (evaluationWrite == null) {
            throw new ApiException("Missing the required parameter 'evaluationWrite' when calling apiDisputesUlidevaluationsPost(Async)");
        }

        return apiDisputesUlidevaluationsPostCall(ulid, evaluationWrite, _callback);

    }


    private ApiResponse<EvaluationRead> apiDisputesUlidevaluationsPostWithHttpInfo(String ulid, EvaluationWrite evaluationWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevaluationsPostValidateBeforeCall(ulid, evaluationWrite, null);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidevaluationsPostAsync(String ulid, EvaluationWrite evaluationWrite, final ApiCallback<EvaluationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevaluationsPostValidateBeforeCall(ulid, evaluationWrite, _callback);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidevaluationsPostRequest {
        private final String ulid;
        private final EvaluationWrite evaluationWrite;

        private APIapiDisputesUlidevaluationsPostRequest(String ulid, EvaluationWrite evaluationWrite) {
            this.ulid = ulid;
            this.evaluationWrite = evaluationWrite;
        }

        /**
         * Build call for apiDisputesUlidevaluationsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidevaluationsPostCall(ulid, evaluationWrite, _callback);
        }

        /**
         * Execute apiDisputesUlidevaluationsPost request
         * @return EvaluationRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public EvaluationRead execute() throws ApiException {
            ApiResponse<EvaluationRead> localVarResp = apiDisputesUlidevaluationsPostWithHttpInfo(ulid, evaluationWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidevaluationsPost request with HTTP info returned
         * @return ApiResponse&lt;EvaluationRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EvaluationRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidevaluationsPostWithHttpInfo(ulid, evaluationWrite);
        }

        /**
         * Execute apiDisputesUlidevaluationsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EvaluationRead> _callback) throws ApiException {
            return apiDisputesUlidevaluationsPostAsync(ulid, evaluationWrite, _callback);
        }
    }

    /**
     * Submit an Evaluation for the Dispute
     * **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.
     * @param ulid Evaluation identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return APIapiDisputesUlidevaluationsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidevaluationsPostRequest apiDisputesUlidevaluationsPost(String ulid, EvaluationWrite evaluationWrite) {
        return new APIapiDisputesUlidevaluationsPostRequest(ulid, evaluationWrite);
    }
    private okhttp3.Call apiDisputesUlidevidencesGetCollectionCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesGetCollectionValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesGetCollection(Async)");
        }

        return apiDisputesUlidevidencesGetCollectionCall(ulid, _callback);

    }


    private ApiResponse<List<EvidenceRead>> apiDisputesUlidevidencesGetCollectionWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesGetCollectionValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<List<EvidenceRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidevidencesGetCollectionAsync(String ulid, final ApiCallback<List<EvidenceRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesGetCollectionValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<List<EvidenceRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidevidencesGetCollectionRequest {
        private final String ulid;

        private APIapiDisputesUlidevidencesGetCollectionRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Build call for apiDisputesUlidevidencesGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidevidencesGetCollectionCall(ulid, _callback);
        }

        /**
         * Execute apiDisputesUlidevidencesGetCollection request
         * @return List&lt;EvidenceRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<EvidenceRead> execute() throws ApiException {
            ApiResponse<List<EvidenceRead>> localVarResp = apiDisputesUlidevidencesGetCollectionWithHttpInfo(ulid);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidevidencesGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EvidenceRead&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EvidenceRead>> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidevidencesGetCollectionWithHttpInfo(ulid);
        }

        /**
         * Execute apiDisputesUlidevidencesGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EvidenceRead>> _callback) throws ApiException {
            return apiDisputesUlidevidencesGetCollectionAsync(ulid, _callback);
        }
    }

    /**
     * Retrieve all Evidences in Dispute
     * Retrieves the collection of Evidence resources.
     * @param ulid  (required)
     * @return APIapiDisputesUlidevidencesGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidevidencesGetCollectionRequest apiDisputesUlidevidencesGetCollection(String ulid) {
        return new APIapiDisputesUlidevidencesGetCollectionRequest(ulid);
    }
    private okhttp3.Call apiDisputesUlidevidencesIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidevidencesIdDelete(Async)");
        }

        return apiDisputesUlidevidencesIdDeleteCall(ulid, id, _callback);

    }


    private ApiResponse<Void> apiDisputesUlidevidencesIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiDisputesUlidevidencesIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidevidencesIdDeleteRequest {
        private final String ulid;
        private final Integer id;

        private APIapiDisputesUlidevidencesIdDeleteRequest(String ulid, Integer id) {
            this.ulid = ulid;
            this.id = id;
        }

        /**
         * Build call for apiDisputesUlidevidencesIdDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidevidencesIdDeleteCall(ulid, id, _callback);
        }

        /**
         * Execute apiDisputesUlidevidencesIdDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiDisputesUlidevidencesIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiDisputesUlidevidencesIdDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidevidencesIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiDisputesUlidevidencesIdDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiDisputesUlidevidencesIdDeleteAsync(ulid, id, _callback);
        }
    }

    /**
     * Withdraw an Evidence from a Dispute
     * Removes the Evidence resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return APIapiDisputesUlidevidencesIdDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidevidencesIdDeleteRequest apiDisputesUlidevidencesIdDelete(String ulid, Integer id) {
        return new APIapiDisputesUlidevidencesIdDeleteRequest(ulid, id);
    }
    private okhttp3.Call apiDisputesUlidevidencesIdmediaPostCall(String ulid, Integer id, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences/{id}/media"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(String ulid, Integer id, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesIdmediaPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidevidencesIdmediaPost(Async)");
        }

        return apiDisputesUlidevidencesIdmediaPostCall(ulid, id, _file, _callback);

    }


    private ApiResponse<MediaRead> apiDisputesUlidevidencesIdmediaPostWithHttpInfo(String ulid, Integer id, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(ulid, id, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidevidencesIdmediaPostAsync(String ulid, Integer id, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(ulid, id, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidevidencesIdmediaPostRequest {
        private final String ulid;
        private final Integer id;
        private File _file;

        private APIapiDisputesUlidevidencesIdmediaPostRequest(String ulid, Integer id) {
            this.ulid = ulid;
            this.id = id;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return APIapiDisputesUlidevidencesIdmediaPostRequest
         */
        public APIapiDisputesUlidevidencesIdmediaPostRequest _file(File _file) {
            this._file = _file;
            return this;
        }

        /**
         * Build call for apiDisputesUlidevidencesIdmediaPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidevidencesIdmediaPostCall(ulid, id, _file, _callback);
        }

        /**
         * Execute apiDisputesUlidevidencesIdmediaPost request
         * @return MediaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public MediaRead execute() throws ApiException {
            ApiResponse<MediaRead> localVarResp = apiDisputesUlidevidencesIdmediaPostWithHttpInfo(ulid, id, _file);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidevidencesIdmediaPost request with HTTP info returned
         * @return ApiResponse&lt;MediaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MediaRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidevidencesIdmediaPostWithHttpInfo(ulid, id, _file);
        }

        /**
         * Execute apiDisputesUlidevidencesIdmediaPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MediaRead> _callback) throws ApiException {
            return apiDisputesUlidevidencesIdmediaPostAsync(ulid, id, _file, _callback);
        }
    }

    /**
     * Upload attachment in regard of described Evidence
     * Creates a Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return APIapiDisputesUlidevidencesIdmediaPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidevidencesIdmediaPostRequest apiDisputesUlidevidencesIdmediaPost(String ulid, Integer id) {
        return new APIapiDisputesUlidevidencesIdmediaPostRequest(ulid, id);
    }
    private okhttp3.Call apiDisputesUlidevidencesPostCall(String ulid, EvidenceWrite evidenceWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evidenceWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesPostValidateBeforeCall(String ulid, EvidenceWrite evidenceWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesPost(Async)");
        }

        // verify the required parameter 'evidenceWrite' is set
        if (evidenceWrite == null) {
            throw new ApiException("Missing the required parameter 'evidenceWrite' when calling apiDisputesUlidevidencesPost(Async)");
        }

        return apiDisputesUlidevidencesPostCall(ulid, evidenceWrite, _callback);

    }


    private ApiResponse<EvidenceRead> apiDisputesUlidevidencesPostWithHttpInfo(String ulid, EvidenceWrite evidenceWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesPostValidateBeforeCall(ulid, evidenceWrite, null);
        Type localVarReturnType = new TypeToken<EvidenceRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidevidencesPostAsync(String ulid, EvidenceWrite evidenceWrite, final ApiCallback<EvidenceRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesPostValidateBeforeCall(ulid, evidenceWrite, _callback);
        Type localVarReturnType = new TypeToken<EvidenceRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidevidencesPostRequest {
        private final String ulid;
        private final EvidenceWrite evidenceWrite;

        private APIapiDisputesUlidevidencesPostRequest(String ulid, EvidenceWrite evidenceWrite) {
            this.ulid = ulid;
            this.evidenceWrite = evidenceWrite;
        }

        /**
         * Build call for apiDisputesUlidevidencesPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidevidencesPostCall(ulid, evidenceWrite, _callback);
        }

        /**
         * Execute apiDisputesUlidevidencesPost request
         * @return EvidenceRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public EvidenceRead execute() throws ApiException {
            ApiResponse<EvidenceRead> localVarResp = apiDisputesUlidevidencesPostWithHttpInfo(ulid, evidenceWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidevidencesPost request with HTTP info returned
         * @return ApiResponse&lt;EvidenceRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EvidenceRead> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidevidencesPostWithHttpInfo(ulid, evidenceWrite);
        }

        /**
         * Execute apiDisputesUlidevidencesPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EvidenceRead> _callback) throws ApiException {
            return apiDisputesUlidevidencesPostAsync(ulid, evidenceWrite, _callback);
        }
    }

    /**
     * Submit an Evidence to the Dispute case
     * This action does not held the actual upload, you will have to do the upload in a dedicated request.
     * @param ulid  (required)
     * @param evidenceWrite The new Evidence resource (required)
     * @return APIapiDisputesUlidevidencesPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidevidencesPostRequest apiDisputesUlidevidencesPost(String ulid, EvidenceWrite evidenceWrite) {
        return new APIapiDisputesUlidevidencesPostRequest(ulid, evidenceWrite);
    }
    private okhttp3.Call apiDisputesUlidparcelsGetCollectionCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsGetCollectionValidateBeforeCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsGetCollection(Async)");
        }

        return apiDisputesUlidparcelsGetCollectionCall(ulid, page, _callback);

    }


    private ApiResponse<List<Object>> apiDisputesUlidparcelsGetCollectionWithHttpInfo(String ulid, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsGetCollectionValidateBeforeCall(ulid, page, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidparcelsGetCollectionAsync(String ulid, Integer page, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsGetCollectionValidateBeforeCall(ulid, page, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidparcelsGetCollectionRequest {
        private final String ulid;
        private Integer page;

        private APIapiDisputesUlidparcelsGetCollectionRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Set page
         * @param page The collection page number (optional, default to 1)
         * @return APIapiDisputesUlidparcelsGetCollectionRequest
         */
        public APIapiDisputesUlidparcelsGetCollectionRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for apiDisputesUlidparcelsGetCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidparcelsGetCollectionCall(ulid, page, _callback);
        }

        /**
         * Execute apiDisputesUlidparcelsGetCollection request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            ApiResponse<List<Object>> localVarResp = apiDisputesUlidparcelsGetCollectionWithHttpInfo(ulid, page);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidparcelsGetCollection request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidparcelsGetCollectionWithHttpInfo(ulid, page);
        }

        /**
         * Execute apiDisputesUlidparcelsGetCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            return apiDisputesUlidparcelsGetCollectionAsync(ulid, page, _callback);
        }
    }

    /**
     * Retrieves the collection of Parcel resources.
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @return APIapiDisputesUlidparcelsGetCollectionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidparcelsGetCollectionRequest apiDisputesUlidparcelsGetCollection(String ulid) {
        return new APIapiDisputesUlidparcelsGetCollectionRequest(ulid);
    }
    private okhttp3.Call apiDisputesUlidparcelsIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidparcelsIdDelete(Async)");
        }

        return apiDisputesUlidparcelsIdDeleteCall(ulid, id, _callback);

    }


    private ApiResponse<Void> apiDisputesUlidparcelsIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call apiDisputesUlidparcelsIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidparcelsIdDeleteRequest {
        private final String ulid;
        private final Integer id;

        private APIapiDisputesUlidparcelsIdDeleteRequest(String ulid, Integer id) {
            this.ulid = ulid;
            this.id = id;
        }

        /**
         * Build call for apiDisputesUlidparcelsIdDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidparcelsIdDeleteCall(ulid, id, _callback);
        }

        /**
         * Execute apiDisputesUlidparcelsIdDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            apiDisputesUlidparcelsIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiDisputesUlidparcelsIdDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidparcelsIdDeleteWithHttpInfo(ulid, id);
        }

        /**
         * Execute apiDisputesUlidparcelsIdDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return apiDisputesUlidparcelsIdDeleteAsync(ulid, id, _callback);
        }
    }

    /**
     * Removes the Parcel resource.
     * Removes the Parcel resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return APIapiDisputesUlidparcelsIdDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidparcelsIdDeleteRequest apiDisputesUlidparcelsIdDelete(String ulid, Integer id) {
        return new APIapiDisputesUlidparcelsIdDeleteRequest(ulid, id);
    }
    private okhttp3.Call apiDisputesUlidparcelsPostCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parcelWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsPostValidateBeforeCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsPost(Async)");
        }

        // verify the required parameter 'parcelWrite' is set
        if (parcelWrite == null) {
            throw new ApiException("Missing the required parameter 'parcelWrite' when calling apiDisputesUlidparcelsPost(Async)");
        }

        return apiDisputesUlidparcelsPostCall(ulid, parcelWrite, _callback);

    }


    private ApiResponse<Object> apiDisputesUlidparcelsPostWithHttpInfo(String ulid, ParcelWrite parcelWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiDisputesUlidparcelsPostAsync(String ulid, ParcelWrite parcelWrite, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiDisputesUlidparcelsPostRequest {
        private final String ulid;
        private final ParcelWrite parcelWrite;

        private APIapiDisputesUlidparcelsPostRequest(String ulid, ParcelWrite parcelWrite) {
            this.ulid = ulid;
            this.parcelWrite = parcelWrite;
        }

        /**
         * Build call for apiDisputesUlidparcelsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiDisputesUlidparcelsPostCall(ulid, parcelWrite, _callback);
        }

        /**
         * Execute apiDisputesUlidparcelsPost request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = apiDisputesUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
            return localVarResp.getData();
        }

        /**
         * Execute apiDisputesUlidparcelsPost request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return apiDisputesUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
        }

        /**
         * Execute apiDisputesUlidparcelsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return apiDisputesUlidparcelsPostAsync(ulid, parcelWrite, _callback);
        }
    }

    /**
     * Creates a Parcel resource.
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return APIapiDisputesUlidparcelsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiDisputesUlidparcelsPostRequest apiDisputesUlidparcelsPost(String ulid, ParcelWrite parcelWrite) {
        return new APIapiDisputesUlidparcelsPostRequest(ulid, parcelWrite);
    }
    private okhttp3.Call apiOffersUlidmediasPostCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasPostValidateBeforeCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasPost(Async)");
        }

        return apiOffersUlidmediasPostCall(ulid, _file, _callback);

    }


    private ApiResponse<MediaRead> apiOffersUlidmediasPostWithHttpInfo(String ulid, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call apiOffersUlidmediasPostAsync(String ulid, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapiOffersUlidmediasPostRequest {
        private final String ulid;
        private File _file;

        private APIapiOffersUlidmediasPostRequest(String ulid) {
            this.ulid = ulid;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return APIapiOffersUlidmediasPostRequest
         */
        public APIapiOffersUlidmediasPostRequest _file(File _file) {
            this._file = _file;
            return this;
        }

        /**
         * Build call for apiOffersUlidmediasPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return apiOffersUlidmediasPostCall(ulid, _file, _callback);
        }

        /**
         * Execute apiOffersUlidmediasPost request
         * @return MediaRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public MediaRead execute() throws ApiException {
            ApiResponse<MediaRead> localVarResp = apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
            return localVarResp.getData();
        }

        /**
         * Execute apiOffersUlidmediasPost request with HTTP info returned
         * @return ApiResponse&lt;MediaRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MediaRead> executeWithHttpInfo() throws ApiException {
            return apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
        }

        /**
         * Execute apiOffersUlidmediasPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
            <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MediaRead> _callback) throws ApiException {
            return apiOffersUlidmediasPostAsync(ulid, _file, _callback);
        }
    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @return APIapiOffersUlidmediasPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public APIapiOffersUlidmediasPostRequest apiOffersUlidmediasPost(String ulid) {
        return new APIapiOffersUlidmediasPostRequest(ulid);
    }
}
