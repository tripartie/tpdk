/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.177
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.tripartie.tpdk.api;

import org.tripartie.tpdk.ApiCallback;
import org.tripartie.tpdk.ApiClient;
import org.tripartie.tpdk.ApiException;
import org.tripartie.tpdk.ApiResponse;
import org.tripartie.tpdk.Configuration;
import org.tripartie.tpdk.Pair;
import org.tripartie.tpdk.ProgressRequestBody;
import org.tripartie.tpdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.tripartie.tpdk.model.AccessError;
import org.tripartie.tpdk.model.AuthError;
import java.math.BigDecimal;
import org.tripartie.tpdk.model.DisputePostCreationRead;
import org.tripartie.tpdk.model.DisputeRead;
import org.tripartie.tpdk.model.DisputeUpdate;
import org.tripartie.tpdk.model.DisputeWrite;
import org.tripartie.tpdk.model.EvaluationRead;
import org.tripartie.tpdk.model.EvaluationWrite;
import java.io.File;
import org.tripartie.tpdk.model.GenericError;
import org.tripartie.tpdk.model.InvalidQueryError;
import org.tripartie.tpdk.model.MediaRead;
import org.tripartie.tpdk.model.NotFoundError;
import org.tripartie.tpdk.model.OfferCollectionRead;
import org.tripartie.tpdk.model.OfferIndependentWrite;
import org.tripartie.tpdk.model.OfferPostCreationRead;
import org.tripartie.tpdk.model.OfferRead;
import org.tripartie.tpdk.model.OfferUpdate;
import org.tripartie.tpdk.model.OfferWrite;
import org.tripartie.tpdk.model.ParcelRead;
import org.tripartie.tpdk.model.ParcelWrite;
import org.tripartie.tpdk.model.RateLimitError;
import org.tripartie.tpdk.model.TransactionCollectionRead;
import org.tripartie.tpdk.model.TransactionRead;
import org.tripartie.tpdk.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SafeCheckoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SafeCheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SafeCheckoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiOffersGetCollection
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersGetCollectionCall(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (publicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicUrl", publicUrl));
        }

        if (publicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publicUrl[]", publicUrl2));
        }

        if (unitPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitPrice", unitPrice));
        }

        if (unitPrice2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unitPrice[]", unitPrice2));
        }

        if (itemCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemCount", itemCount));
        }

        if (itemCount2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "itemCount[]", itemCount2));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (offerMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "offer.metadata[]", offerMetadata));
        }

        if (nature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nature", nature));
        }

        if (condition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("condition", condition));
        }

        if (shippingAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shippingAllowed", shippingAllowed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersGetCollectionValidateBeforeCall(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        return apiOffersGetCollectionCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);

    }

    /**
     * Read issued Offers
     * Retrieves the collection of Offer resources.
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @return List&lt;OfferCollectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferCollectionRead> apiOffersGetCollection(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        ApiResponse<List<OfferCollectionRead>> localVarResp = apiOffersGetCollectionWithHttpInfo(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        return localVarResp.getData();
    }

    /**
     * Read issued Offers
     * Retrieves the collection of Offer resources.
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @return ApiResponse&lt;List&lt;OfferCollectionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferCollectionRead>> apiOffersGetCollectionWithHttpInfo(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        okhttp3.Call localVarCall = apiOffersGetCollectionValidateBeforeCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, null);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read issued Offers (asynchronously)
     * Retrieves the collection of Offer resources.
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersGetCollectionAsync(Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersGetCollectionValidateBeforeCall(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersPost
     * @param offerIndependentWrite The new Offer resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersPostCall(OfferIndependentWrite offerIndependentWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerIndependentWrite;

        // create path and map variables
        String localVarPath = "/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersPostValidateBeforeCall(OfferIndependentWrite offerIndependentWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offerIndependentWrite' is set
        if (offerIndependentWrite == null) {
            throw new ApiException("Missing the required parameter 'offerIndependentWrite' when calling apiOffersPost(Async)");
        }

        return apiOffersPostCall(offerIndependentWrite, _callback);

    }

    /**
     * Create an Offer and retrieve url
     * Publish an offer so that you can safely retrieve a safe-checkout unique link from us
     * @param offerIndependentWrite The new Offer resource (required)
     * @return OfferPostCreationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public OfferPostCreationRead apiOffersPost(OfferIndependentWrite offerIndependentWrite) throws ApiException {
        ApiResponse<OfferPostCreationRead> localVarResp = apiOffersPostWithHttpInfo(offerIndependentWrite);
        return localVarResp.getData();
    }

    /**
     * Create an Offer and retrieve url
     * Publish an offer so that you can safely retrieve a safe-checkout unique link from us
     * @param offerIndependentWrite The new Offer resource (required)
     * @return ApiResponse&lt;OfferPostCreationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPostCreationRead> apiOffersPostWithHttpInfo(OfferIndependentWrite offerIndependentWrite) throws ApiException {
        okhttp3.Call localVarCall = apiOffersPostValidateBeforeCall(offerIndependentWrite, null);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Offer and retrieve url (asynchronously)
     * Publish an offer so that you can safely retrieve a safe-checkout unique link from us
     * @param offerIndependentWrite The new Offer resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersPostAsync(OfferIndependentWrite offerIndependentWrite, final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersPostValidateBeforeCall(offerIndependentWrite, _callback);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidGet
     * @param ulid Offer identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidGet(Async)");
        }

        return apiOffersUlidGetCall(ulid, _callback);

    }

    /**
     * Read an Offer
     * Retrieves a Offer resource.
     * @param ulid Offer identifier (required)
     * @return OfferRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public OfferRead apiOffersUlidGet(String ulid) throws ApiException {
        ApiResponse<OfferRead> localVarResp = apiOffersUlidGetWithHttpInfo(ulid);
        return localVarResp.getData();
    }

    /**
     * Read an Offer
     * Retrieves a Offer resource.
     * @param ulid Offer identifier (required)
     * @return ApiResponse&lt;OfferRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferRead> apiOffersUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read an Offer (asynchronously)
     * Retrieves a Offer resource.
     * @param ulid Offer identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidGetAsync(String ulid, final ApiCallback<OfferRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidmediasIdDelete
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiOffersUlidmediasIdDelete(Async)");
        }

        return apiOffersUlidmediasIdDeleteCall(ulid, id, _callback);

    }

    /**
     * Removes the Media resource.
     * Removes the Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiOffersUlidmediasIdDelete(String ulid, Integer id) throws ApiException {
        apiOffersUlidmediasIdDeleteWithHttpInfo(ulid, id);
    }

    /**
     * Removes the Media resource.
     * Removes the Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiOffersUlidmediasIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Media resource. (asynchronously)
     * Removes the Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Media resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidmediasPost
     * @param ulid  (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasPostCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasPostValidateBeforeCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasPost(Async)");
        }

        return apiOffersUlidmediasPostCall(ulid, _file, _callback);

    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @return MediaRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public MediaRead apiOffersUlidmediasPost(String ulid, File _file) throws ApiException {
        ApiResponse<MediaRead> localVarResp = apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
        return localVarResp.getData();
    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;MediaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaRead> apiOffersUlidmediasPostWithHttpInfo(String ulid, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a picture for a given Offer (asynchronously)
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasPostAsync(String ulid, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidtransactionsGetCollection
     * @param ulid Offer identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsGetCollectionCall(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsGetCollectionValidateBeforeCall(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsGetCollection(Async)");
        }

        return apiOffersUlidtransactionsGetCollectionCall(ulid, page, orderStatus, metadata, status, _callback);

    }

    /**
     * Retrieve Payment Intents for Offer
     * Retrieves the collection of Transaction resources.
     * @param ulid Offer identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @return List&lt;TransactionCollectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionCollectionRead> apiOffersUlidtransactionsGetCollection(String ulid, Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        ApiResponse<List<TransactionCollectionRead>> localVarResp = apiOffersUlidtransactionsGetCollectionWithHttpInfo(ulid, page, orderStatus, metadata, status);
        return localVarResp.getData();
    }

    /**
     * Retrieve Payment Intents for Offer
     * Retrieves the collection of Transaction resources.
     * @param ulid Offer identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @return ApiResponse&lt;List&lt;TransactionCollectionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionCollectionRead>> apiOffersUlidtransactionsGetCollectionWithHttpInfo(String ulid, Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsGetCollectionValidateBeforeCall(ulid, page, orderStatus, metadata, status, null);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Payment Intents for Offer (asynchronously)
     * Retrieves the collection of Transaction resources.
     * @param ulid Offer identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsGetCollectionAsync(String ulid, Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsGetCollectionValidateBeforeCall(ulid, page, orderStatus, metadata, status, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidtransactionsIdevaluationsPost
     * @param ulid Dispute identifier (required)
     * @param id Transaction identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostCall(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluationWrite;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions/{id}/evaluations"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        // verify the required parameter 'evaluationWrite' is set
        if (evaluationWrite == null) {
            throw new ApiException("Missing the required parameter 'evaluationWrite' when calling apiOffersUlidtransactionsIdevaluationsPost(Async)");
        }

        return apiOffersUlidtransactionsIdevaluationsPostCall(ulid, id, evaluationWrite, _callback);

    }

    /**
     * Submit an Evaluation for the Offer
     * **Only authenticated** buyer and seller **CAN** issue an evaluation **WHEN** the transaction reached a final state.
     * @param ulid Dispute identifier (required)
     * @param id Transaction identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return EvaluationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationRead apiOffersUlidtransactionsIdevaluationsPost(String ulid, String id, EvaluationWrite evaluationWrite) throws ApiException {
        ApiResponse<EvaluationRead> localVarResp = apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo(ulid, id, evaluationWrite);
        return localVarResp.getData();
    }

    /**
     * Submit an Evaluation for the Offer
     * **Only authenticated** buyer and seller **CAN** issue an evaluation **WHEN** the transaction reached a final state.
     * @param ulid Dispute identifier (required)
     * @param id Transaction identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return ApiResponse&lt;EvaluationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationRead> apiOffersUlidtransactionsIdevaluationsPostWithHttpInfo(String ulid, String id, EvaluationWrite evaluationWrite) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(ulid, id, evaluationWrite, null);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit an Evaluation for the Offer (asynchronously)
     * **Only authenticated** buyer and seller **CAN** issue an evaluation **WHEN** the transaction reached a final state.
     * @param ulid Dispute identifier (required)
     * @param id Transaction identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsIdevaluationsPostAsync(String ulid, String id, EvaluationWrite evaluationWrite, final ApiCallback<EvaluationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsIdevaluationsPostValidateBeforeCall(ulid, id, evaluationWrite, _callback);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidtransactionsPost
     * @param ulid Offer identifier (required)
     * @param body The new Transaction resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsPostCall(String ulid, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/transactions"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidtransactionsPostValidateBeforeCall(String ulid, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidtransactionsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiOffersUlidtransactionsPost(Async)");
        }

        return apiOffersUlidtransactionsPostCall(ulid, body, _callback);

    }

    /**
     * Create a Payment Intent for Offer
     * Cannot be used outside of a Persona (buyer)
     * @param ulid Offer identifier (required)
     * @param body The new Transaction resource (required)
     * @return TransactionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionRead apiOffersUlidtransactionsPost(String ulid, Object body) throws ApiException {
        ApiResponse<TransactionRead> localVarResp = apiOffersUlidtransactionsPostWithHttpInfo(ulid, body);
        return localVarResp.getData();
    }

    /**
     * Create a Payment Intent for Offer
     * Cannot be used outside of a Persona (buyer)
     * @param ulid Offer identifier (required)
     * @param body The new Transaction resource (required)
     * @return ApiResponse&lt;TransactionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionRead> apiOffersUlidtransactionsPostWithHttpInfo(String ulid, Object body) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidtransactionsPostValidateBeforeCall(ulid, body, null);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Payment Intent for Offer (asynchronously)
     * Cannot be used outside of a Persona (buyer)
     * @param ulid Offer identifier (required)
     * @param body The new Transaction resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transaction resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidtransactionsPostAsync(String ulid, Object body, final ApiCallback<TransactionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidtransactionsPostValidateBeforeCall(ulid, body, _callback);
        Type localVarReturnType = new TypeToken<TransactionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPersonasIdoffersDelete
     * @param id Persona identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersDelete(Async)");
        }

        return apiPersonasIdoffersDeleteCall(id, _callback);

    }

    /**
     * Revoke an Offer for given Persona
     * That goes without says, if that **Offer** have a _Transaction_ **that is ongoing**, you **MAY NOT** revoke the **Offer**.
     * @param id Persona identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiPersonasIdoffersDelete(String id) throws ApiException {
        apiPersonasIdoffersDeleteWithHttpInfo(id);
    }

    /**
     * Revoke an Offer for given Persona
     * That goes without says, if that **Offer** have a _Transaction_ **that is ongoing**, you **MAY NOT** revoke the **Offer**.
     * @param id Persona identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiPersonasIdoffersDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke an Offer for given Persona (asynchronously)
     * That goes without says, if that **Offer** have a _Transaction_ **that is ongoing**, you **MAY NOT** revoke the **Offer**.
     * @param id Persona identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Offer resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPersonasIdoffersGetCollection
     * @param id Persona identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersGetCollectionCall(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (publicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicUrl", publicUrl));
        }

        if (publicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publicUrl[]", publicUrl2));
        }

        if (unitPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitPrice", unitPrice));
        }

        if (unitPrice2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unitPrice[]", unitPrice2));
        }

        if (itemCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemCount", itemCount));
        }

        if (itemCount2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "itemCount[]", itemCount2));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (offerMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "offer.metadata[]", offerMetadata));
        }

        if (nature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nature", nature));
        }

        if (condition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("condition", condition));
        }

        if (shippingAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shippingAllowed", shippingAllowed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersGetCollectionValidateBeforeCall(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersGetCollection(Async)");
        }

        return apiPersonasIdoffersGetCollectionCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);

    }

    /**
     * List or Search Offers for given Persona
     * Retrieves the collection of Offer resources.
     * @param id Persona identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @return List&lt;OfferCollectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferCollectionRead> apiPersonasIdoffersGetCollection(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        ApiResponse<List<OfferCollectionRead>> localVarResp = apiPersonasIdoffersGetCollectionWithHttpInfo(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        return localVarResp.getData();
    }

    /**
     * List or Search Offers for given Persona
     * Retrieves the collection of Offer resources.
     * @param id Persona identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @return ApiResponse&lt;List&lt;OfferCollectionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferCollectionRead>> apiPersonasIdoffersGetCollectionWithHttpInfo(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersGetCollectionValidateBeforeCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, null);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List or Search Offers for given Persona (asynchronously)
     * Retrieves the collection of Offer resources.
     * @param id Persona identifier (required)
     * @param page The collection page number (optional, default to 1)
     * @param title  (optional)
     * @param publicUrl  (optional)
     * @param publicUrl2  (optional)
     * @param unitPrice  (optional)
     * @param unitPrice2  (optional)
     * @param itemCount  (optional)
     * @param itemCount2  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param offerMetadata Flattened OrderedMap for offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param nature Filter on a limited subset of nature (optional)
     * @param condition Filter on a limited subset of condition (optional)
     * @param shippingAllowed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersGetCollectionAsync(String id, Integer page, String title, String publicUrl, List<String> publicUrl2, BigDecimal unitPrice, List<BigDecimal> unitPrice2, Integer itemCount, List<Integer> itemCount2, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, List<String> metadata, List<String> offerMetadata, String nature, String condition, Boolean shippingAllowed, final ApiCallback<List<OfferCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersGetCollectionValidateBeforeCall(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed, _callback);
        Type localVarReturnType = new TypeToken<List<OfferCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPersonasIdoffersPatch
     * @param id Persona identifier (required)
     * @param offerUpdate The updated Offer resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersPatchCall(String id, OfferUpdate offerUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerUpdate;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersPatchValidateBeforeCall(String id, OfferUpdate offerUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersPatch(Async)");
        }

        // verify the required parameter 'offerUpdate' is set
        if (offerUpdate == null) {
            throw new ApiException("Missing the required parameter 'offerUpdate' when calling apiPersonasIdoffersPatch(Async)");
        }

        return apiPersonasIdoffersPatchCall(id, offerUpdate, _callback);

    }

    /**
     * Update an Offer for given Persona
     * Updates the Offer resource.
     * @param id Persona identifier (required)
     * @param offerUpdate The updated Offer resource (required)
     * @return OfferRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public OfferRead apiPersonasIdoffersPatch(String id, OfferUpdate offerUpdate) throws ApiException {
        ApiResponse<OfferRead> localVarResp = apiPersonasIdoffersPatchWithHttpInfo(id, offerUpdate);
        return localVarResp.getData();
    }

    /**
     * Update an Offer for given Persona
     * Updates the Offer resource.
     * @param id Persona identifier (required)
     * @param offerUpdate The updated Offer resource (required)
     * @return ApiResponse&lt;OfferRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferRead> apiPersonasIdoffersPatchWithHttpInfo(String id, OfferUpdate offerUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersPatchValidateBeforeCall(id, offerUpdate, null);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Offer for given Persona (asynchronously)
     * Updates the Offer resource.
     * @param id Persona identifier (required)
     * @param offerUpdate The updated Offer resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Offer resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersPatchAsync(String id, OfferUpdate offerUpdate, final ApiCallback<OfferRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersPatchValidateBeforeCall(id, offerUpdate, _callback);
        Type localVarReturnType = new TypeToken<OfferRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPersonasIdoffersPost
     * @param id Persona identifier (required)
     * @param offerWrite The new Offer resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersPostCall(String id, OfferWrite offerWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offerWrite;

        // create path and map variables
        String localVarPath = "/personas/{id}/offers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonasIdoffersPostValidateBeforeCall(String id, OfferWrite offerWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPersonasIdoffersPost(Async)");
        }

        // verify the required parameter 'offerWrite' is set
        if (offerWrite == null) {
            throw new ApiException("Missing the required parameter 'offerWrite' when calling apiPersonasIdoffersPost(Async)");
        }

        return apiPersonasIdoffersPostCall(id, offerWrite, _callback);

    }

    /**
     * Create an Offer for given Persona
     * Creates a Offer resource.
     * @param id Persona identifier (required)
     * @param offerWrite The new Offer resource (required)
     * @return OfferPostCreationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public OfferPostCreationRead apiPersonasIdoffersPost(String id, OfferWrite offerWrite) throws ApiException {
        ApiResponse<OfferPostCreationRead> localVarResp = apiPersonasIdoffersPostWithHttpInfo(id, offerWrite);
        return localVarResp.getData();
    }

    /**
     * Create an Offer for given Persona
     * Creates a Offer resource.
     * @param id Persona identifier (required)
     * @param offerWrite The new Offer resource (required)
     * @return ApiResponse&lt;OfferPostCreationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferPostCreationRead> apiPersonasIdoffersPostWithHttpInfo(String id, OfferWrite offerWrite) throws ApiException {
        okhttp3.Call localVarCall = apiPersonasIdoffersPostValidateBeforeCall(id, offerWrite, null);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Offer for given Persona (asynchronously)
     * Creates a Offer resource.
     * @param id Persona identifier (required)
     * @param offerWrite The new Offer resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Offer resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonasIdoffersPostAsync(String id, OfferWrite offerWrite, final ApiCallback<OfferPostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonasIdoffersPostValidateBeforeCall(id, offerWrite, _callback);
        Type localVarReturnType = new TypeToken<OfferPostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsGetCollection
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsGetCollectionCall(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsGetCollectionValidateBeforeCall(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback _callback) throws ApiException {
        return apiTransactionsGetCollectionCall(page, orderStatus, metadata, status, _callback);

    }

    /**
     * Retrieves the collection of Transaction resources.
     * Retrieves the collection of Transaction resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @return List&lt;TransactionCollectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionCollectionRead> apiTransactionsGetCollection(Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        ApiResponse<List<TransactionCollectionRead>> localVarResp = apiTransactionsGetCollectionWithHttpInfo(page, orderStatus, metadata, status);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Transaction resources.
     * Retrieves the collection of Transaction resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @return ApiResponse&lt;List&lt;TransactionCollectionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionCollectionRead>> apiTransactionsGetCollectionWithHttpInfo(Integer page, String orderStatus, List<String> metadata, String status) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderStatus, metadata, status, null);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Transaction resources. (asynchronously)
     * Retrieves the collection of Transaction resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderStatus  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsGetCollectionAsync(Integer page, String orderStatus, List<String> metadata, String status, final ApiCallback<List<TransactionCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsGetCollectionValidateBeforeCall(page, orderStatus, metadata, status, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUliddisputeDelete
     * @param ulid Transaction identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputeDeleteCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputeDeleteValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputeDelete(Async)");
        }

        return apiTransactionsUliddisputeDeleteCall(ulid, _callback);

    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Transaction identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsUliddisputeDelete(String ulid) throws ApiException {
        apiTransactionsUliddisputeDeleteWithHttpInfo(ulid);
    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Transaction identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsUliddisputeDeleteWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputeDeleteValidateBeforeCall(ulid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abandon claims on Dispute (asynchronously)
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Transaction identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputeDeleteAsync(String ulid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputeDeleteValidateBeforeCall(ulid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUliddisputeGet
     * @param ulid Transaction identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputeGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputeGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputeGet(Async)");
        }

        return apiTransactionsUliddisputeGetCall(ulid, _callback);

    }

    /**
     * Read Dispute from existing Transaction
     * Retrieves a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @return DisputeRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputeRead apiTransactionsUliddisputeGet(String ulid) throws ApiException {
        ApiResponse<DisputeRead> localVarResp = apiTransactionsUliddisputeGetWithHttpInfo(ulid);
        return localVarResp.getData();
    }

    /**
     * Read Dispute from existing Transaction
     * Retrieves a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @return ApiResponse&lt;DisputeRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeRead> apiTransactionsUliddisputeGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputeGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read Dispute from existing Transaction (asynchronously)
     * Retrieves a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputeGetAsync(String ulid, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputeGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUliddisputePatch
     * @param ulid Transaction identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputePatchCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeUpdate;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputePatchValidateBeforeCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputePatch(Async)");
        }

        // verify the required parameter 'disputeUpdate' is set
        if (disputeUpdate == null) {
            throw new ApiException("Missing the required parameter 'disputeUpdate' when calling apiTransactionsUliddisputePatch(Async)");
        }

        return apiTransactionsUliddisputePatchCall(ulid, disputeUpdate, _callback);

    }

    /**
     * Interact with a Dispute
     * Only authenticated Persona can interact with a Dispute object. Usually through our web application.
     * @param ulid Transaction identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return DisputeRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputeRead apiTransactionsUliddisputePatch(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        ApiResponse<DisputeRead> localVarResp = apiTransactionsUliddisputePatchWithHttpInfo(ulid, disputeUpdate);
        return localVarResp.getData();
    }

    /**
     * Interact with a Dispute
     * Only authenticated Persona can interact with a Dispute object. Usually through our web application.
     * @param ulid Transaction identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return ApiResponse&lt;DisputeRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeRead> apiTransactionsUliddisputePatchWithHttpInfo(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputePatchValidateBeforeCall(ulid, disputeUpdate, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Interact with a Dispute (asynchronously)
     * Only authenticated Persona can interact with a Dispute object. Usually through our web application.
     * @param ulid Transaction identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputePatchAsync(String ulid, DisputeUpdate disputeUpdate, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputePatchValidateBeforeCall(ulid, disputeUpdate, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUliddisputePost
     * @param ulid Transaction identifier (required)
     * @param disputeWrite The new Dispute resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputePostCall(String ulid, DisputeWrite disputeWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeWrite;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/dispute"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUliddisputePostValidateBeforeCall(String ulid, DisputeWrite disputeWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUliddisputePost(Async)");
        }

        // verify the required parameter 'disputeWrite' is set
        if (disputeWrite == null) {
            throw new ApiException("Missing the required parameter 'disputeWrite' when calling apiTransactionsUliddisputePost(Async)");
        }

        return apiTransactionsUliddisputePostCall(ulid, disputeWrite, _callback);

    }

    /**
     * Open a Dispute related to existing Transaction
     * Creates a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @param disputeWrite The new Dispute resource (required)
     * @return DisputePostCreationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputePostCreationRead apiTransactionsUliddisputePost(String ulid, DisputeWrite disputeWrite) throws ApiException {
        ApiResponse<DisputePostCreationRead> localVarResp = apiTransactionsUliddisputePostWithHttpInfo(ulid, disputeWrite);
        return localVarResp.getData();
    }

    /**
     * Open a Dispute related to existing Transaction
     * Creates a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @param disputeWrite The new Dispute resource (required)
     * @return ApiResponse&lt;DisputePostCreationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputePostCreationRead> apiTransactionsUliddisputePostWithHttpInfo(String ulid, DisputeWrite disputeWrite) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUliddisputePostValidateBeforeCall(ulid, disputeWrite, null);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open a Dispute related to existing Transaction (asynchronously)
     * Creates a Dispute resource.
     * @param ulid Transaction identifier (required)
     * @param disputeWrite The new Dispute resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUliddisputePostAsync(String ulid, DisputeWrite disputeWrite, final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUliddisputePostValidateBeforeCall(ulid, disputeWrite, _callback);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUlidparcelsGetCollection
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsGetCollectionCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsGetCollection(Async)");
        }

        return apiTransactionsUlidparcelsGetCollectionCall(ulid, page, _callback);

    }

    /**
     * Read shipments from Transaction
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> apiTransactionsUlidparcelsGetCollection(String ulid, Integer page) throws ApiException {
        ApiResponse<List<Object>> localVarResp = apiTransactionsUlidparcelsGetCollectionWithHttpInfo(ulid, page);
        return localVarResp.getData();
    }

    /**
     * Read shipments from Transaction
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> apiTransactionsUlidparcelsGetCollectionWithHttpInfo(String ulid, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(ulid, page, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read shipments from Transaction (asynchronously)
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsGetCollectionAsync(String ulid, Integer page, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsGetCollectionValidateBeforeCall(ulid, page, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUlidparcelsIdDelete
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiTransactionsUlidparcelsIdDelete(Async)");
        }

        return apiTransactionsUlidparcelsIdDeleteCall(ulid, id, _callback);

    }

    /**
     * Withdraw shipment from Transaction
     * No one except the support can do that manoeuvre.
     * @param ulid  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiTransactionsUlidparcelsIdDelete(String ulid, Integer id) throws ApiException {
        apiTransactionsUlidparcelsIdDeleteWithHttpInfo(ulid, id);
    }

    /**
     * Withdraw shipment from Transaction
     * No one except the support can do that manoeuvre.
     * @param ulid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTransactionsUlidparcelsIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Withdraw shipment from Transaction (asynchronously)
     * No one except the support can do that manoeuvre.
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTransactionsUlidparcelsPost
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsPostCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parcelWrite;

        // create path and map variables
        String localVarPath = "/transactions/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTransactionsUlidparcelsPostValidateBeforeCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiTransactionsUlidparcelsPost(Async)");
        }

        // verify the required parameter 'parcelWrite' is set
        if (parcelWrite == null) {
            throw new ApiException("Missing the required parameter 'parcelWrite' when calling apiTransactionsUlidparcelsPost(Async)");
        }

        return apiTransactionsUlidparcelsPostCall(ulid, parcelWrite, _callback);

    }

    /**
     * Manually declare package shipped for Transaction
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return ParcelRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ParcelRead apiTransactionsUlidparcelsPost(String ulid, ParcelWrite parcelWrite) throws ApiException {
        ApiResponse<ParcelRead> localVarResp = apiTransactionsUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
        return localVarResp.getData();
    }

    /**
     * Manually declare package shipped for Transaction
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return ApiResponse&lt;ParcelRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParcelRead> apiTransactionsUlidparcelsPostWithHttpInfo(String ulid, ParcelWrite parcelWrite) throws ApiException {
        okhttp3.Call localVarCall = apiTransactionsUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, null);
        Type localVarReturnType = new TypeToken<ParcelRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually declare package shipped for Transaction (asynchronously)
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTransactionsUlidparcelsPostAsync(String ulid, ParcelWrite parcelWrite, final ApiCallback<ParcelRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTransactionsUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, _callback);
        Type localVarReturnType = new TypeToken<ParcelRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
