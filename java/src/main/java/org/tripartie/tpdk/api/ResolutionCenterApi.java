/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.177
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.tripartie.tpdk.api;

import org.tripartie.tpdk.ApiCallback;
import org.tripartie.tpdk.ApiClient;
import org.tripartie.tpdk.ApiException;
import org.tripartie.tpdk.ApiResponse;
import org.tripartie.tpdk.Configuration;
import org.tripartie.tpdk.Pair;
import org.tripartie.tpdk.ProgressRequestBody;
import org.tripartie.tpdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.tripartie.tpdk.model.AccessError;
import org.tripartie.tpdk.model.AuthError;
import org.tripartie.tpdk.model.DisputeCollectionRead;
import org.tripartie.tpdk.model.DisputeIndependentWrite;
import org.tripartie.tpdk.model.DisputePostCreationRead;
import org.tripartie.tpdk.model.DisputeRead;
import org.tripartie.tpdk.model.DisputeUpdate;
import org.tripartie.tpdk.model.EvaluationRead;
import org.tripartie.tpdk.model.EvaluationWrite;
import org.tripartie.tpdk.model.EvidenceRead;
import org.tripartie.tpdk.model.EvidenceWrite;
import java.io.File;
import org.tripartie.tpdk.model.GenericError;
import org.tripartie.tpdk.model.InvalidQueryError;
import org.tripartie.tpdk.model.MediaRead;
import org.tripartie.tpdk.model.NotFoundError;
import org.tripartie.tpdk.model.ParcelRead;
import org.tripartie.tpdk.model.ParcelWrite;
import org.tripartie.tpdk.model.RateLimitError;
import org.tripartie.tpdk.model.UnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResolutionCenterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResolutionCenterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResolutionCenterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiDisputesGetCollection
     * @param page The collection page number (optional, default to 1)
     * @param orderCreatedAt  (optional)
     * @param orderStatus  (optional)
     * @param orderUpdatedAt  (optional)
     * @param transactionOfferPublicUrl  (optional)
     * @param transactionOfferPublicUrl2  (optional)
     * @param transactionOfferTitle  (optional)
     * @param transactionBuyerId  (optional)
     * @param transactionBuyerId2  (optional)
     * @param transactionBuyerEmail  (optional)
     * @param transactionOfferSellerId  (optional)
     * @param transactionOfferSellerId2  (optional)
     * @param transactionOfferSellerEmail  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param existsRecommendedSolution  (optional)
     * @param existsChosenSolution  (optional)
     * @param existsCounterSolution  (optional)
     * @param existsPlatformSolution  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesGetCollectionCall(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[createdAt]", orderCreatedAt));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[status]", orderStatus));
        }

        if (orderUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order[updatedAt]", orderUpdatedAt));
        }

        if (transactionOfferPublicUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.publicUrl", transactionOfferPublicUrl));
        }

        if (transactionOfferPublicUrl2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.offer.publicUrl[]", transactionOfferPublicUrl2));
        }

        if (transactionOfferTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.title", transactionOfferTitle));
        }

        if (transactionBuyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.buyer.id", transactionBuyerId));
        }

        if (transactionBuyerId2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.buyer.id[]", transactionBuyerId2));
        }

        if (transactionBuyerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.buyer.email", transactionBuyerEmail));
        }

        if (transactionOfferSellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.seller.id", transactionOfferSellerId));
        }

        if (transactionOfferSellerId2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transaction.offer.seller.id[]", transactionOfferSellerId2));
        }

        if (transactionOfferSellerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.offer.seller.email", transactionOfferSellerEmail));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[before]", createdAtBefore));
        }

        if (createdAtStrictlyBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_before]", createdAtStrictlyBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[after]", createdAtAfter));
        }

        if (createdAtStrictlyAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[strictly_after]", createdAtStrictlyAfter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (transactionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction.status", transactionStatus));
        }

        if (existsRecommendedSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[recommendedSolution]", existsRecommendedSolution));
        }

        if (existsChosenSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[chosenSolution]", existsChosenSolution));
        }

        if (existsCounterSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[counterSolution]", existsCounterSolution));
        }

        if (existsPlatformSolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exists[platformSolution]", existsPlatformSolution));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "metadata[]", metadata));
        }

        if (transactionMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "transaction.metadata[]", transactionMetadata));
        }

        if (transactionOfferMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "transaction.offer.metadata[]", transactionOfferMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesGetCollectionValidateBeforeCall(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback _callback) throws ApiException {
        return apiDisputesGetCollectionCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);

    }

    /**
     * Retrieves the collection of Dispute resources.
     * Retrieves the collection of Dispute resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderCreatedAt  (optional)
     * @param orderStatus  (optional)
     * @param orderUpdatedAt  (optional)
     * @param transactionOfferPublicUrl  (optional)
     * @param transactionOfferPublicUrl2  (optional)
     * @param transactionOfferTitle  (optional)
     * @param transactionBuyerId  (optional)
     * @param transactionBuyerId2  (optional)
     * @param transactionBuyerEmail  (optional)
     * @param transactionOfferSellerId  (optional)
     * @param transactionOfferSellerId2  (optional)
     * @param transactionOfferSellerEmail  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param existsRecommendedSolution  (optional)
     * @param existsChosenSolution  (optional)
     * @param existsCounterSolution  (optional)
     * @param existsPlatformSolution  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @return List&lt;DisputeCollectionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<DisputeCollectionRead> apiDisputesGetCollection(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata) throws ApiException {
        ApiResponse<List<DisputeCollectionRead>> localVarResp = apiDisputesGetCollectionWithHttpInfo(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Dispute resources.
     * Retrieves the collection of Dispute resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderCreatedAt  (optional)
     * @param orderStatus  (optional)
     * @param orderUpdatedAt  (optional)
     * @param transactionOfferPublicUrl  (optional)
     * @param transactionOfferPublicUrl2  (optional)
     * @param transactionOfferTitle  (optional)
     * @param transactionBuyerId  (optional)
     * @param transactionBuyerId2  (optional)
     * @param transactionBuyerEmail  (optional)
     * @param transactionOfferSellerId  (optional)
     * @param transactionOfferSellerId2  (optional)
     * @param transactionOfferSellerEmail  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param existsRecommendedSolution  (optional)
     * @param existsChosenSolution  (optional)
     * @param existsCounterSolution  (optional)
     * @param existsPlatformSolution  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @return ApiResponse&lt;List&lt;DisputeCollectionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DisputeCollectionRead>> apiDisputesGetCollectionWithHttpInfo(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesGetCollectionValidateBeforeCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, null);
        Type localVarReturnType = new TypeToken<List<DisputeCollectionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Dispute resources. (asynchronously)
     * Retrieves the collection of Dispute resources.
     * @param page The collection page number (optional, default to 1)
     * @param orderCreatedAt  (optional)
     * @param orderStatus  (optional)
     * @param orderUpdatedAt  (optional)
     * @param transactionOfferPublicUrl  (optional)
     * @param transactionOfferPublicUrl2  (optional)
     * @param transactionOfferTitle  (optional)
     * @param transactionBuyerId  (optional)
     * @param transactionBuyerId2  (optional)
     * @param transactionBuyerEmail  (optional)
     * @param transactionOfferSellerId  (optional)
     * @param transactionOfferSellerId2  (optional)
     * @param transactionOfferSellerEmail  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtStrictlyBefore  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtStrictlyAfter  (optional)
     * @param status Filter on a limited subset of status (optional)
     * @param transactionStatus Filter on a limited subset of transaction.status (optional)
     * @param existsRecommendedSolution  (optional)
     * @param existsChosenSolution  (optional)
     * @param existsCounterSolution  (optional)
     * @param existsPlatformSolution  (optional)
     * @param metadata Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionMetadata Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param transactionOfferMetadata Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \&quot;null\&quot; for desired value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesGetCollectionAsync(Integer page, String orderCreatedAt, String orderStatus, String orderUpdatedAt, String transactionOfferPublicUrl, List<String> transactionOfferPublicUrl2, String transactionOfferTitle, Integer transactionBuyerId, List<Integer> transactionBuyerId2, String transactionBuyerEmail, Integer transactionOfferSellerId, List<Integer> transactionOfferSellerId2, String transactionOfferSellerEmail, String createdAtBefore, String createdAtStrictlyBefore, String createdAtAfter, String createdAtStrictlyAfter, String status, String transactionStatus, Boolean existsRecommendedSolution, Boolean existsChosenSolution, Boolean existsCounterSolution, Boolean existsPlatformSolution, List<String> metadata, List<String> transactionMetadata, List<String> transactionOfferMetadata, final ApiCallback<List<DisputeCollectionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesGetCollectionValidateBeforeCall(page, orderCreatedAt, orderStatus, orderUpdatedAt, transactionOfferPublicUrl, transactionOfferPublicUrl2, transactionOfferTitle, transactionBuyerId, transactionBuyerId2, transactionBuyerEmail, transactionOfferSellerId, transactionOfferSellerId2, transactionOfferSellerEmail, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, status, transactionStatus, existsRecommendedSolution, existsChosenSolution, existsCounterSolution, existsPlatformSolution, metadata, transactionMetadata, transactionOfferMetadata, _callback);
        Type localVarReturnType = new TypeToken<List<DisputeCollectionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesPost
     * @param disputeIndependentWrite The new Dispute resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesPostCall(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeIndependentWrite;

        // create path and map variables
        String localVarPath = "/disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesPostValidateBeforeCall(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disputeIndependentWrite' is set
        if (disputeIndependentWrite == null) {
            throw new ApiException("Missing the required parameter 'disputeIndependentWrite' when calling apiDisputesPost(Async)");
        }

        return apiDisputesPostCall(disputeIndependentWrite, _callback);

    }

    /**
     * Draft a standalone Dispute
     * Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.
     * @param disputeIndependentWrite The new Dispute resource (required)
     * @return DisputePostCreationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputePostCreationRead apiDisputesPost(DisputeIndependentWrite disputeIndependentWrite) throws ApiException {
        ApiResponse<DisputePostCreationRead> localVarResp = apiDisputesPostWithHttpInfo(disputeIndependentWrite);
        return localVarResp.getData();
    }

    /**
     * Draft a standalone Dispute
     * Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.
     * @param disputeIndependentWrite The new Dispute resource (required)
     * @return ApiResponse&lt;DisputePostCreationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputePostCreationRead> apiDisputesPostWithHttpInfo(DisputeIndependentWrite disputeIndependentWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesPostValidateBeforeCall(disputeIndependentWrite, null);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Draft a standalone Dispute (asynchronously)
     * Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.
     * @param disputeIndependentWrite The new Dispute resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Dispute resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesPostAsync(DisputeIndependentWrite disputeIndependentWrite, final ApiCallback<DisputePostCreationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesPostValidateBeforeCall(disputeIndependentWrite, _callback);
        Type localVarReturnType = new TypeToken<DisputePostCreationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidDelete
     * @param ulid Dispute identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidDeleteCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidDeleteValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidDelete(Async)");
        }

        return apiDisputesUlidDeleteCall(ulid, _callback);

    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Dispute identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiDisputesUlidDelete(String ulid) throws ApiException {
        apiDisputesUlidDeleteWithHttpInfo(ulid);
    }

    /**
     * Abandon claims on Dispute
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Dispute identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDisputesUlidDeleteWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidDeleteValidateBeforeCall(ulid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abandon claims on Dispute (asynchronously)
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     * @param ulid Dispute identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Dispute resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidDeleteAsync(String ulid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidDeleteValidateBeforeCall(ulid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidGet
     * @param ulid Dispute identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidGetCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidGetValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidGet(Async)");
        }

        return apiDisputesUlidGetCall(ulid, _callback);

    }

    /**
     * Retrieves a Dispute resource.
     * Retrieves a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @return DisputeRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputeRead apiDisputesUlidGet(String ulid) throws ApiException {
        ApiResponse<DisputeRead> localVarResp = apiDisputesUlidGetWithHttpInfo(ulid);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Dispute resource.
     * Retrieves a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @return ApiResponse&lt;DisputeRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeRead> apiDisputesUlidGetWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidGetValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Dispute resource. (asynchronously)
     * Retrieves a Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidGetAsync(String ulid, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidGetValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidPatch
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidPatchCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disputeUpdate;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidPatchValidateBeforeCall(String ulid, DisputeUpdate disputeUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidPatch(Async)");
        }

        // verify the required parameter 'disputeUpdate' is set
        if (disputeUpdate == null) {
            throw new ApiException("Missing the required parameter 'disputeUpdate' when calling apiDisputesUlidPatch(Async)");
        }

        return apiDisputesUlidPatchCall(ulid, disputeUpdate, _callback);

    }

    /**
     * Update the Dispute
     * Updates the Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return DisputeRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public DisputeRead apiDisputesUlidPatch(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        ApiResponse<DisputeRead> localVarResp = apiDisputesUlidPatchWithHttpInfo(ulid, disputeUpdate);
        return localVarResp.getData();
    }

    /**
     * Update the Dispute
     * Updates the Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @return ApiResponse&lt;DisputeRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisputeRead> apiDisputesUlidPatchWithHttpInfo(String ulid, DisputeUpdate disputeUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidPatchValidateBeforeCall(ulid, disputeUpdate, null);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Dispute (asynchronously)
     * Updates the Dispute resource.
     * @param ulid Dispute identifier (required)
     * @param disputeUpdate The updated Dispute resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dispute resource updated </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidPatchAsync(String ulid, DisputeUpdate disputeUpdate, final ApiCallback<DisputeRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidPatchValidateBeforeCall(ulid, disputeUpdate, _callback);
        Type localVarReturnType = new TypeToken<DisputeRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidevaluationsPost
     * @param ulid Dispute identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevaluationsPostCall(String ulid, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluationWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evaluations"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevaluationsPostValidateBeforeCall(String ulid, EvaluationWrite evaluationWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevaluationsPost(Async)");
        }

        // verify the required parameter 'evaluationWrite' is set
        if (evaluationWrite == null) {
            throw new ApiException("Missing the required parameter 'evaluationWrite' when calling apiDisputesUlidevaluationsPost(Async)");
        }

        return apiDisputesUlidevaluationsPostCall(ulid, evaluationWrite, _callback);

    }

    /**
     * Submit an Evaluation for the Dispute
     * **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.
     * @param ulid Dispute identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return EvaluationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationRead apiDisputesUlidevaluationsPost(String ulid, EvaluationWrite evaluationWrite) throws ApiException {
        ApiResponse<EvaluationRead> localVarResp = apiDisputesUlidevaluationsPostWithHttpInfo(ulid, evaluationWrite);
        return localVarResp.getData();
    }

    /**
     * Submit an Evaluation for the Dispute
     * **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.
     * @param ulid Dispute identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @return ApiResponse&lt;EvaluationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationRead> apiDisputesUlidevaluationsPostWithHttpInfo(String ulid, EvaluationWrite evaluationWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevaluationsPostValidateBeforeCall(ulid, evaluationWrite, null);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit an Evaluation for the Dispute (asynchronously)
     * **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.
     * @param ulid Dispute identifier (required)
     * @param evaluationWrite The new Evaluation resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evaluation resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevaluationsPostAsync(String ulid, EvaluationWrite evaluationWrite, final ApiCallback<EvaluationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevaluationsPostValidateBeforeCall(ulid, evaluationWrite, _callback);
        Type localVarReturnType = new TypeToken<EvaluationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidevidencesGetCollection
     * @param ulid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesGetCollectionCall(String ulid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesGetCollectionValidateBeforeCall(String ulid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesGetCollection(Async)");
        }

        return apiDisputesUlidevidencesGetCollectionCall(ulid, _callback);

    }

    /**
     * Retrieve all Evidences in Dispute
     * Retrieves the collection of Evidence resources.
     * @param ulid  (required)
     * @return List&lt;EvidenceRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<EvidenceRead> apiDisputesUlidevidencesGetCollection(String ulid) throws ApiException {
        ApiResponse<List<EvidenceRead>> localVarResp = apiDisputesUlidevidencesGetCollectionWithHttpInfo(ulid);
        return localVarResp.getData();
    }

    /**
     * Retrieve all Evidences in Dispute
     * Retrieves the collection of Evidence resources.
     * @param ulid  (required)
     * @return ApiResponse&lt;List&lt;EvidenceRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EvidenceRead>> apiDisputesUlidevidencesGetCollectionWithHttpInfo(String ulid) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesGetCollectionValidateBeforeCall(ulid, null);
        Type localVarReturnType = new TypeToken<List<EvidenceRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all Evidences in Dispute (asynchronously)
     * Retrieves the collection of Evidence resources.
     * @param ulid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evidence collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesGetCollectionAsync(String ulid, final ApiCallback<List<EvidenceRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesGetCollectionValidateBeforeCall(ulid, _callback);
        Type localVarReturnType = new TypeToken<List<EvidenceRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidevidencesIdDelete
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidevidencesIdDelete(Async)");
        }

        return apiDisputesUlidevidencesIdDeleteCall(ulid, id, _callback);

    }

    /**
     * Withdraw an Evidence from a Dispute
     * Removes the Evidence resource.
     * @param ulid  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiDisputesUlidevidencesIdDelete(String ulid, Integer id) throws ApiException {
        apiDisputesUlidevidencesIdDeleteWithHttpInfo(ulid, id);
    }

    /**
     * Withdraw an Evidence from a Dispute
     * Removes the Evidence resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDisputesUlidevidencesIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Withdraw an Evidence from a Dispute (asynchronously)
     * Removes the Evidence resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Evidence resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidevidencesIdmediaPost
     * @param ulid  (required)
     * @param id  (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesIdmediaPostCall(String ulid, Integer id, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences/{id}/media"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(String ulid, Integer id, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesIdmediaPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidevidencesIdmediaPost(Async)");
        }

        return apiDisputesUlidevidencesIdmediaPostCall(ulid, id, _file, _callback);

    }

    /**
     * Upload attachment in regard of described Evidence
     * Creates a Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _file  (optional)
     * @return MediaRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public MediaRead apiDisputesUlidevidencesIdmediaPost(String ulid, Integer id, File _file) throws ApiException {
        ApiResponse<MediaRead> localVarResp = apiDisputesUlidevidencesIdmediaPostWithHttpInfo(ulid, id, _file);
        return localVarResp.getData();
    }

    /**
     * Upload attachment in regard of described Evidence
     * Creates a Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;MediaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaRead> apiDisputesUlidevidencesIdmediaPostWithHttpInfo(String ulid, Integer id, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(ulid, id, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload attachment in regard of described Evidence (asynchronously)
     * Creates a Media resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesIdmediaPostAsync(String ulid, Integer id, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesIdmediaPostValidateBeforeCall(ulid, id, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidevidencesPost
     * @param ulid  (required)
     * @param evidenceWrite The new Evidence resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesPostCall(String ulid, EvidenceWrite evidenceWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evidenceWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/evidences"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidevidencesPostValidateBeforeCall(String ulid, EvidenceWrite evidenceWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidevidencesPost(Async)");
        }

        // verify the required parameter 'evidenceWrite' is set
        if (evidenceWrite == null) {
            throw new ApiException("Missing the required parameter 'evidenceWrite' when calling apiDisputesUlidevidencesPost(Async)");
        }

        return apiDisputesUlidevidencesPostCall(ulid, evidenceWrite, _callback);

    }

    /**
     * Submit an Evidence to the Dispute case
     * This action does not held the actual upload, you will have to do the upload in a dedicated request.
     * @param ulid  (required)
     * @param evidenceWrite The new Evidence resource (required)
     * @return EvidenceRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public EvidenceRead apiDisputesUlidevidencesPost(String ulid, EvidenceWrite evidenceWrite) throws ApiException {
        ApiResponse<EvidenceRead> localVarResp = apiDisputesUlidevidencesPostWithHttpInfo(ulid, evidenceWrite);
        return localVarResp.getData();
    }

    /**
     * Submit an Evidence to the Dispute case
     * This action does not held the actual upload, you will have to do the upload in a dedicated request.
     * @param ulid  (required)
     * @param evidenceWrite The new Evidence resource (required)
     * @return ApiResponse&lt;EvidenceRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvidenceRead> apiDisputesUlidevidencesPostWithHttpInfo(String ulid, EvidenceWrite evidenceWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidevidencesPostValidateBeforeCall(ulid, evidenceWrite, null);
        Type localVarReturnType = new TypeToken<EvidenceRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit an Evidence to the Dispute case (asynchronously)
     * This action does not held the actual upload, you will have to do the upload in a dedicated request.
     * @param ulid  (required)
     * @param evidenceWrite The new Evidence resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Evidence resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidevidencesPostAsync(String ulid, EvidenceWrite evidenceWrite, final ApiCallback<EvidenceRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidevidencesPostValidateBeforeCall(ulid, evidenceWrite, _callback);
        Type localVarReturnType = new TypeToken<EvidenceRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidparcelsGetCollection
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsGetCollectionCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsGetCollectionValidateBeforeCall(String ulid, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsGetCollection(Async)");
        }

        return apiDisputesUlidparcelsGetCollectionCall(ulid, page, _callback);

    }

    /**
     * Retrieves the collection of Parcel resources.
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> apiDisputesUlidparcelsGetCollection(String ulid, Integer page) throws ApiException {
        ApiResponse<List<Object>> localVarResp = apiDisputesUlidparcelsGetCollectionWithHttpInfo(ulid, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Parcel resources.
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> apiDisputesUlidparcelsGetCollectionWithHttpInfo(String ulid, Integer page) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsGetCollectionValidateBeforeCall(ulid, page, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Parcel resources. (asynchronously)
     * Retrieves the collection of Parcel resources.
     * @param ulid  (required)
     * @param page The collection page number (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Parcel collection </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  * Content-Range - HTTP standardized header for partial content, used for the pagination <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsGetCollectionAsync(String ulid, Integer page, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsGetCollectionValidateBeforeCall(ulid, page, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidparcelsIdDelete
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsIdDeleteCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels/{id}"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsIdDeleteValidateBeforeCall(String ulid, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiDisputesUlidparcelsIdDelete(Async)");
        }

        return apiDisputesUlidparcelsIdDeleteCall(ulid, id, _callback);

    }

    /**
     * Removes the Parcel resource.
     * Removes the Parcel resource.
     * @param ulid  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public void apiDisputesUlidparcelsIdDelete(String ulid, Integer id) throws ApiException {
        apiDisputesUlidparcelsIdDeleteWithHttpInfo(ulid, id);
    }

    /**
     * Removes the Parcel resource.
     * Removes the Parcel resource.
     * @param ulid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDisputesUlidparcelsIdDeleteWithHttpInfo(String ulid, Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsIdDeleteValidateBeforeCall(ulid, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Parcel resource. (asynchronously)
     * Removes the Parcel resource.
     * @param ulid  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Parcel resource deleted </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsIdDeleteAsync(String ulid, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsIdDeleteValidateBeforeCall(ulid, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDisputesUlidparcelsPost
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsPostCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parcelWrite;

        // create path and map variables
        String localVarPath = "/disputes/{ulid}/parcels"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtPersonalKey", "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDisputesUlidparcelsPostValidateBeforeCall(String ulid, ParcelWrite parcelWrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiDisputesUlidparcelsPost(Async)");
        }

        // verify the required parameter 'parcelWrite' is set
        if (parcelWrite == null) {
            throw new ApiException("Missing the required parameter 'parcelWrite' when calling apiDisputesUlidparcelsPost(Async)");
        }

        return apiDisputesUlidparcelsPostCall(ulid, parcelWrite, _callback);

    }

    /**
     * Creates a Parcel resource.
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return ParcelRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ParcelRead apiDisputesUlidparcelsPost(String ulid, ParcelWrite parcelWrite) throws ApiException {
        ApiResponse<ParcelRead> localVarResp = apiDisputesUlidparcelsPostWithHttpInfo(ulid, parcelWrite);
        return localVarResp.getData();
    }

    /**
     * Creates a Parcel resource.
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @return ApiResponse&lt;ParcelRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParcelRead> apiDisputesUlidparcelsPostWithHttpInfo(String ulid, ParcelWrite parcelWrite) throws ApiException {
        okhttp3.Call localVarCall = apiDisputesUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, null);
        Type localVarReturnType = new TypeToken<ParcelRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Parcel resource. (asynchronously)
     * Creates a Parcel resource.
     * @param ulid  (required)
     * @param parcelWrite The new Parcel resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Parcel resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDisputesUlidparcelsPostAsync(String ulid, ParcelWrite parcelWrite, final ApiCallback<ParcelRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDisputesUlidparcelsPostValidateBeforeCall(ulid, parcelWrite, _callback);
        Type localVarReturnType = new TypeToken<ParcelRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOffersUlidmediasPost
     * @param ulid  (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasPostCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/{ulid}/medias"
            .replace("{" + "ulid" + "}", localVarApiClient.escapeString(ulid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personaAuthKey", "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOffersUlidmediasPostValidateBeforeCall(String ulid, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ulid' is set
        if (ulid == null) {
            throw new ApiException("Missing the required parameter 'ulid' when calling apiOffersUlidmediasPost(Async)");
        }

        return apiOffersUlidmediasPostCall(ulid, _file, _callback);

    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @return MediaRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public MediaRead apiOffersUlidmediasPost(String ulid, File _file) throws ApiException {
        ApiResponse<MediaRead> localVarResp = apiOffersUlidmediasPostWithHttpInfo(ulid, _file);
        return localVarResp.getData();
    }

    /**
     * Upload a picture for a given Offer
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;MediaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaRead> apiOffersUlidmediasPostWithHttpInfo(String ulid, File _file) throws ApiException {
        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, null);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a picture for a given Offer (asynchronously)
     * Creates a Media resource.
     * @param ulid  (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Media resource created </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit - HTTP standardized header for rate limit consumption status <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exhausted </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOffersUlidmediasPostAsync(String ulid, File _file, final ApiCallback<MediaRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOffersUlidmediasPostValidateBeforeCall(ulid, _file, _callback);
        Type localVarReturnType = new TypeToken<MediaRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
