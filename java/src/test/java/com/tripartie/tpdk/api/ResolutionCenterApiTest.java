/*
 * Resolution Center
 * Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution.
 *
 * The version of the OpenAPI document: 2.0.208
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.api;

import com.tripartie.tpdk.ApiException;
import com.tripartie.tpdk.model.AccessError;
import com.tripartie.tpdk.model.AuthError;
import com.tripartie.tpdk.model.DisputeCollectionRead;
import com.tripartie.tpdk.model.DisputeIndependentWrite;
import com.tripartie.tpdk.model.DisputePostCreationRead;
import com.tripartie.tpdk.model.DisputeRead;
import com.tripartie.tpdk.model.DisputeUpdate;
import com.tripartie.tpdk.model.EvaluationRead;
import com.tripartie.tpdk.model.EvaluationWrite;
import com.tripartie.tpdk.model.EvidenceRead;
import com.tripartie.tpdk.model.EvidenceWrite;
import java.io.File;
import com.tripartie.tpdk.model.GenericError;
import com.tripartie.tpdk.model.InvalidQueryError;
import com.tripartie.tpdk.model.MediaRead;
import com.tripartie.tpdk.model.NotFoundError;
import com.tripartie.tpdk.model.ParcelWrite;
import com.tripartie.tpdk.model.RateLimitError;
import com.tripartie.tpdk.model.UnprocessableEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResolutionCenterApi
 */
@Disabled
public class ResolutionCenterApiTest {

    private final ResolutionCenterApi api = new ResolutionCenterApi();

    /**
     * Retrieves the collection of Dispute resources.
     *
     * Retrieves the collection of Dispute resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesGetCollectionTest() throws ApiException {
        Integer page = null;
        String orderCreatedAt = null;
        String orderStatus = null;
        String orderUpdatedAt = null;
        String transactionOfferPublicUrl = null;
        List<String> transactionOfferPublicUrl2 = null;
        String transactionOfferTitle = null;
        Integer transactionBuyerId = null;
        List<Integer> transactionBuyerId2 = null;
        String transactionBuyerEmail = null;
        Integer transactionOfferSellerId = null;
        List<Integer> transactionOfferSellerId2 = null;
        String transactionOfferSellerEmail = null;
        String createdAtBefore = null;
        String createdAtStrictlyBefore = null;
        String createdAtAfter = null;
        String createdAtStrictlyAfter = null;
        String status = null;
        String transactionStatus = null;
        Boolean existsRecommendedSolution = null;
        Boolean existsChosenSolution = null;
        Boolean existsCounterSolution = null;
        Boolean existsPlatformSolution = null;
        List<String> metadata = null;
        List<String> transactionMetadata = null;
        List<String> transactionOfferMetadata = null;
        List<DisputeCollectionRead> response = api.apiDisputesGetCollection()
                .page(page)
                .orderCreatedAt(orderCreatedAt)
                .orderStatus(orderStatus)
                .orderUpdatedAt(orderUpdatedAt)
                .transactionOfferPublicUrl(transactionOfferPublicUrl)
                .transactionOfferPublicUrl2(transactionOfferPublicUrl2)
                .transactionOfferTitle(transactionOfferTitle)
                .transactionBuyerId(transactionBuyerId)
                .transactionBuyerId2(transactionBuyerId2)
                .transactionBuyerEmail(transactionBuyerEmail)
                .transactionOfferSellerId(transactionOfferSellerId)
                .transactionOfferSellerId2(transactionOfferSellerId2)
                .transactionOfferSellerEmail(transactionOfferSellerEmail)
                .createdAtBefore(createdAtBefore)
                .createdAtStrictlyBefore(createdAtStrictlyBefore)
                .createdAtAfter(createdAtAfter)
                .createdAtStrictlyAfter(createdAtStrictlyAfter)
                .status(status)
                .transactionStatus(transactionStatus)
                .existsRecommendedSolution(existsRecommendedSolution)
                .existsChosenSolution(existsChosenSolution)
                .existsCounterSolution(existsCounterSolution)
                .existsPlatformSolution(existsPlatformSolution)
                .metadata(metadata)
                .transactionMetadata(transactionMetadata)
                .transactionOfferMetadata(transactionOfferMetadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Draft a standalone Dispute
     *
     * Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesPostTest() throws ApiException {
        DisputeIndependentWrite disputeIndependentWrite = null;
        DisputePostCreationRead response = api.apiDisputesPost(disputeIndependentWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Abandon claims on Dispute
     *
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidDeleteTest() throws ApiException {
        String ulid = null;
        api.apiDisputesUlidDelete(ulid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a Dispute resource.
     *
     * Retrieves a Dispute resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidGetTest() throws ApiException {
        String ulid = null;
        DisputeRead response = api.apiDisputesUlidGet(ulid)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the Dispute
     *
     * Updates the Dispute resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidPatchTest() throws ApiException {
        String ulid = null;
        DisputeUpdate disputeUpdate = null;
        DisputeRead response = api.apiDisputesUlidPatch(ulid, disputeUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit an Evaluation for the Dispute
     *
     * **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidevaluationsPostTest() throws ApiException {
        String ulid = null;
        EvaluationWrite evaluationWrite = null;
        EvaluationRead response = api.apiDisputesUlidevaluationsPost(ulid, evaluationWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all Evidences in Dispute
     *
     * Retrieves the collection of Evidence resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidevidencesGetCollectionTest() throws ApiException {
        String ulid = null;
        List<EvidenceRead> response = api.apiDisputesUlidevidencesGetCollection(ulid)
                .execute();
        // TODO: test validations
    }

    /**
     * Withdraw an Evidence from a Dispute
     *
     * Removes the Evidence resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidevidencesIdDeleteTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        api.apiDisputesUlidevidencesIdDelete(ulid, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload attachment in regard of described Evidence
     *
     * Creates a Media resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidevidencesIdmediaPostTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        File _file = null;
        MediaRead response = api.apiDisputesUlidevidencesIdmediaPost(ulid, id)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit an Evidence to the Dispute case
     *
     * This action does not held the actual upload, you will have to do the upload in a dedicated request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidevidencesPostTest() throws ApiException {
        String ulid = null;
        EvidenceWrite evidenceWrite = null;
        EvidenceRead response = api.apiDisputesUlidevidencesPost(ulid, evidenceWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the collection of Parcel resources.
     *
     * Retrieves the collection of Parcel resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidparcelsGetCollectionTest() throws ApiException {
        String ulid = null;
        Integer page = null;
        List<Object> response = api.apiDisputesUlidparcelsGetCollection(ulid)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes the Parcel resource.
     *
     * Removes the Parcel resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidparcelsIdDeleteTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        api.apiDisputesUlidparcelsIdDelete(ulid, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a Parcel resource.
     *
     * Creates a Parcel resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDisputesUlidparcelsPostTest() throws ApiException {
        String ulid = null;
        ParcelWrite parcelWrite = null;
        Object response = api.apiDisputesUlidparcelsPost(ulid, parcelWrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes the Media resource.
     *
     * Removes the Media resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidmediasIdDeleteTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        api.apiOffersUlidmediasIdDelete(ulid, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a picture for a given Offer
     *
     * Creates a Media resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidmediasPostTest() throws ApiException {
        String ulid = null;
        File _file = null;
        MediaRead response = api.apiOffersUlidmediasPost(ulid)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

}
