/*
 * Tripartie
 * Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.
 *
 * The version of the OpenAPI document: 2.0.179
 * Contact: noc@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tripartie.tpdk.api;

import com.tripartie.tpdk.ApiException;
import com.tripartie.tpdk.model.AccessError;
import com.tripartie.tpdk.model.AuthError;
import java.math.BigDecimal;
import com.tripartie.tpdk.model.DisputePostCreationRead;
import com.tripartie.tpdk.model.DisputeRead;
import com.tripartie.tpdk.model.DisputeUpdate;
import com.tripartie.tpdk.model.DisputeWrite;
import com.tripartie.tpdk.model.EvaluationRead;
import com.tripartie.tpdk.model.EvaluationWrite;
import java.io.File;
import com.tripartie.tpdk.model.GenericError;
import com.tripartie.tpdk.model.InvalidQueryError;
import com.tripartie.tpdk.model.MediaRead;
import com.tripartie.tpdk.model.NotFoundError;
import com.tripartie.tpdk.model.OfferCollectionRead;
import com.tripartie.tpdk.model.OfferIndependentWrite;
import com.tripartie.tpdk.model.OfferPostCreationRead;
import com.tripartie.tpdk.model.OfferRead;
import com.tripartie.tpdk.model.OfferUpdate;
import com.tripartie.tpdk.model.OfferWrite;
import com.tripartie.tpdk.model.ParcelRead;
import com.tripartie.tpdk.model.ParcelWrite;
import com.tripartie.tpdk.model.RateLimitError;
import com.tripartie.tpdk.model.TransactionCollectionRead;
import com.tripartie.tpdk.model.TransactionRead;
import com.tripartie.tpdk.model.UnprocessableEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SafeCheckoutApi
 */
@Disabled
public class SafeCheckoutApiTest {

    private final SafeCheckoutApi api = new SafeCheckoutApi();

    /**
     * Read issued Offers
     *
     * Retrieves the collection of Offer resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersGetCollectionTest() throws ApiException {
        Integer page = null;
        String title = null;
        String publicUrl = null;
        List<String> publicUrl2 = null;
        BigDecimal unitPrice = null;
        List<BigDecimal> unitPrice2 = null;
        Integer itemCount = null;
        List<Integer> itemCount2 = null;
        String createdAtBefore = null;
        String createdAtStrictlyBefore = null;
        String createdAtAfter = null;
        String createdAtStrictlyAfter = null;
        List<String> metadata = null;
        List<String> offerMetadata = null;
        String nature = null;
        String condition = null;
        Boolean shippingAllowed = null;
        List<OfferCollectionRead> response = api.apiOffersGetCollection(page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        // TODO: test validations
    }

    /**
     * Create an Offer and retrieve url
     *
     * Publish an offer so that you can safely retrieve a safe-checkout unique link from us
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersPostTest() throws ApiException {
        OfferIndependentWrite offerIndependentWrite = null;
        OfferPostCreationRead response = api.apiOffersPost(offerIndependentWrite);
        // TODO: test validations
    }

    /**
     * Read an Offer
     *
     * Retrieves a Offer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidGetTest() throws ApiException {
        String ulid = null;
        OfferRead response = api.apiOffersUlidGet(ulid);
        // TODO: test validations
    }

    /**
     * Removes the Media resource.
     *
     * Removes the Media resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidmediasIdDeleteTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        api.apiOffersUlidmediasIdDelete(ulid, id);
        // TODO: test validations
    }

    /**
     * Upload a picture for a given Offer
     *
     * Creates a Media resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidmediasPostTest() throws ApiException {
        String ulid = null;
        File _file = null;
        MediaRead response = api.apiOffersUlidmediasPost(ulid, _file);
        // TODO: test validations
    }

    /**
     * Retrieve Payment Intents for Offer
     *
     * Retrieves the collection of Transaction resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidtransactionsGetCollectionTest() throws ApiException {
        String ulid = null;
        Integer page = null;
        String orderStatus = null;
        List<String> metadata = null;
        String status = null;
        List<TransactionCollectionRead> response = api.apiOffersUlidtransactionsGetCollection(ulid, page, orderStatus, metadata, status);
        // TODO: test validations
    }

    /**
     * Submit an Evaluation for the Offer
     *
     * **Only authenticated** buyer and seller **CAN** issue an evaluation **WHEN** the transaction reached a final state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidtransactionsIdevaluationsPostTest() throws ApiException {
        String ulid = null;
        String id = null;
        EvaluationWrite evaluationWrite = null;
        EvaluationRead response = api.apiOffersUlidtransactionsIdevaluationsPost(ulid, id, evaluationWrite);
        // TODO: test validations
    }

    /**
     * Create a Payment Intent for Offer
     *
     * Cannot be used outside of a Persona (buyer)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOffersUlidtransactionsPostTest() throws ApiException {
        String ulid = null;
        Object body = null;
        TransactionRead response = api.apiOffersUlidtransactionsPost(ulid, body);
        // TODO: test validations
    }

    /**
     * Revoke an Offer for given Persona
     *
     * That goes without says, if that **Offer** have a _Transaction_ **that is ongoing**, you **MAY NOT** revoke the **Offer**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPersonasIdoffersDeleteTest() throws ApiException {
        String id = null;
        api.apiPersonasIdoffersDelete(id);
        // TODO: test validations
    }

    /**
     * List or Search Offers for given Persona
     *
     * Retrieves the collection of Offer resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPersonasIdoffersGetCollectionTest() throws ApiException {
        String id = null;
        Integer page = null;
        String title = null;
        String publicUrl = null;
        List<String> publicUrl2 = null;
        BigDecimal unitPrice = null;
        List<BigDecimal> unitPrice2 = null;
        Integer itemCount = null;
        List<Integer> itemCount2 = null;
        String createdAtBefore = null;
        String createdAtStrictlyBefore = null;
        String createdAtAfter = null;
        String createdAtStrictlyAfter = null;
        List<String> metadata = null;
        List<String> offerMetadata = null;
        String nature = null;
        String condition = null;
        Boolean shippingAllowed = null;
        List<OfferCollectionRead> response = api.apiPersonasIdoffersGetCollection(id, page, title, publicUrl, publicUrl2, unitPrice, unitPrice2, itemCount, itemCount2, createdAtBefore, createdAtStrictlyBefore, createdAtAfter, createdAtStrictlyAfter, metadata, offerMetadata, nature, condition, shippingAllowed);
        // TODO: test validations
    }

    /**
     * Update an Offer for given Persona
     *
     * Updates the Offer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPersonasIdoffersPatchTest() throws ApiException {
        String id = null;
        OfferUpdate offerUpdate = null;
        OfferRead response = api.apiPersonasIdoffersPatch(id, offerUpdate);
        // TODO: test validations
    }

    /**
     * Create an Offer for given Persona
     *
     * Creates a Offer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPersonasIdoffersPostTest() throws ApiException {
        String id = null;
        OfferWrite offerWrite = null;
        OfferPostCreationRead response = api.apiPersonasIdoffersPost(id, offerWrite);
        // TODO: test validations
    }

    /**
     * Retrieves the collection of Transaction resources.
     *
     * Retrieves the collection of Transaction resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsGetCollectionTest() throws ApiException {
        Integer page = null;
        String orderStatus = null;
        List<String> metadata = null;
        String status = null;
        List<TransactionCollectionRead> response = api.apiTransactionsGetCollection(page, orderStatus, metadata, status);
        // TODO: test validations
    }

    /**
     * Abandon claims on Dispute
     *
     * **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUliddisputeDeleteTest() throws ApiException {
        String ulid = null;
        api.apiTransactionsUliddisputeDelete(ulid);
        // TODO: test validations
    }

    /**
     * Read Dispute from existing Transaction
     *
     * Retrieves a Dispute resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUliddisputeGetTest() throws ApiException {
        String ulid = null;
        DisputeRead response = api.apiTransactionsUliddisputeGet(ulid);
        // TODO: test validations
    }

    /**
     * Interact with a Dispute
     *
     * Only authenticated Persona can interact with a Dispute object. Usually through our web application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUliddisputePatchTest() throws ApiException {
        String ulid = null;
        DisputeUpdate disputeUpdate = null;
        DisputeRead response = api.apiTransactionsUliddisputePatch(ulid, disputeUpdate);
        // TODO: test validations
    }

    /**
     * Open a Dispute related to existing Transaction
     *
     * Creates a Dispute resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUliddisputePostTest() throws ApiException {
        String ulid = null;
        DisputeWrite disputeWrite = null;
        DisputePostCreationRead response = api.apiTransactionsUliddisputePost(ulid, disputeWrite);
        // TODO: test validations
    }

    /**
     * Read shipments from Transaction
     *
     * Retrieves the collection of Parcel resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUlidparcelsGetCollectionTest() throws ApiException {
        String ulid = null;
        Integer page = null;
        List<Object> response = api.apiTransactionsUlidparcelsGetCollection(ulid, page);
        // TODO: test validations
    }

    /**
     * Withdraw shipment from Transaction
     *
     * No one except the support can do that manoeuvre.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUlidparcelsIdDeleteTest() throws ApiException {
        String ulid = null;
        Integer id = null;
        api.apiTransactionsUlidparcelsIdDelete(ulid, id);
        // TODO: test validations
    }

    /**
     * Manually declare package shipped for Transaction
     *
     * Creates a Parcel resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTransactionsUlidparcelsPostTest() throws ApiException {
        String ulid = null;
        ParcelWrite parcelWrite = null;
        ParcelRead response = api.apiTransactionsUlidparcelsPost(ulid, parcelWrite);
        // TODO: test validations
    }

}
