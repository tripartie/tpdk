# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.199
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tpdk.models.transaction_collection_read import TransactionCollectionRead

class TestTransactionCollectionRead(unittest.TestCase):
    """TransactionCollectionRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransactionCollectionRead:
        """Test TransactionCollectionRead
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransactionCollectionRead`
        """
        model = TransactionCollectionRead()
        if include_optional:
            return TransactionCollectionRead(
                ulid = '',
                offer = tpdk.models.transaction_offer_collection_read.Transaction-Offer-CollectionRead(
                    ulid = '', 
                    public_url = 'https://marketplace.tld/offers/that-special-item-i-wish-to-sold', 
                    seller = 'https://example.com/', 
                    nature = 'physical_item', 
                    title = 'ASUS TUF X570-PLUS GAMING Motherboard', 
                    unit_price = 125.54, 
                    currency_code = 'EUR', 
                    item_count = 1, 
                    condition = 'USED', 
                    medias = [
                        'https://example.com/'
                        ], 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                buyer = 'https://example.com/',
                status = 'CREATED',
                fees = 1.337
            )
        else:
            return TransactionCollectionRead(
                ulid = '',
                offer = tpdk.models.transaction_offer_collection_read.Transaction-Offer-CollectionRead(
                    ulid = '', 
                    public_url = 'https://marketplace.tld/offers/that-special-item-i-wish-to-sold', 
                    seller = 'https://example.com/', 
                    nature = 'physical_item', 
                    title = 'ASUS TUF X570-PLUS GAMING Motherboard', 
                    unit_price = 125.54, 
                    currency_code = 'EUR', 
                    item_count = 1, 
                    condition = 'USED', 
                    medias = [
                        'https://example.com/'
                        ], 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                buyer = 'https://example.com/',
        )
        """

    def testTransactionCollectionRead(self):
        """Test TransactionCollectionRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
