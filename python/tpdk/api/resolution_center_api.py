# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.92
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, conlist

from typing import Any, Dict, List, Optional, Union

from tpdk.models.dispute_collection_read import DisputeCollectionRead
from tpdk.models.dispute_independent_write import DisputeIndependentWrite
from tpdk.models.dispute_post_creation_read import DisputePostCreationRead
from tpdk.models.dispute_read import DisputeRead
from tpdk.models.dispute_update import DisputeUpdate
from tpdk.models.evaluation_read import EvaluationRead
from tpdk.models.evaluation_write import EvaluationWrite
from tpdk.models.evidence_read import EvidenceRead
from tpdk.models.evidence_write import EvidenceWrite
from tpdk.models.media_read import MediaRead
from tpdk.models.parcel_read import ParcelRead
from tpdk.models.parcel_write import ParcelWrite

from tpdk.api_client import ApiClient
from tpdk.api_response import ApiResponse
from tpdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ResolutionCenterApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def api_disputes_get_collection(self, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, order_created_at : Optional[StrictStr] = None, order_status : Optional[StrictStr] = None, order_updated_at : Optional[StrictStr] = None, transaction_offer_title : Optional[StrictStr] = None, created_at_before : Optional[StrictStr] = None, created_at_strictly_before : Optional[StrictStr] = None, created_at_after : Optional[StrictStr] = None, created_at_strictly_after : Optional[StrictStr] = None, status : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of status")] = None, transaction_status : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of transaction.status")] = None, exists_recommended_solution : Optional[StrictBool] = None, exists_chosen_solution : Optional[StrictBool] = None, exists_counter_solution : Optional[StrictBool] = None, exists_platform_solution : Optional[StrictBool] = None, metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, transaction_metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, transaction_offer_metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, **kwargs) -> List[DisputeCollectionRead]:  # noqa: E501
        """Retrieves the collection of Dispute resources.  # noqa: E501

        Retrieves the collection of Dispute resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_get_collection(page, order_created_at, order_status, order_updated_at, transaction_offer_title, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, status, transaction_status, exists_recommended_solution, exists_chosen_solution, exists_counter_solution, exists_platform_solution, metadata, transaction_metadata, transaction_offer_metadata, async_req=True)
        >>> result = thread.get()

        :param page: The collection page number
        :type page: int
        :param order_created_at: 
        :type order_created_at: str
        :param order_status: 
        :type order_status: str
        :param order_updated_at: 
        :type order_updated_at: str
        :param transaction_offer_title: 
        :type transaction_offer_title: str
        :param created_at_before: 
        :type created_at_before: str
        :param created_at_strictly_before: 
        :type created_at_strictly_before: str
        :param created_at_after: 
        :type created_at_after: str
        :param created_at_strictly_after: 
        :type created_at_strictly_after: str
        :param status: Filter on a limited subset of status
        :type status: str
        :param transaction_status: Filter on a limited subset of transaction.status
        :type transaction_status: str
        :param exists_recommended_solution: 
        :type exists_recommended_solution: bool
        :param exists_chosen_solution: 
        :type exists_chosen_solution: bool
        :param exists_counter_solution: 
        :type exists_counter_solution: bool
        :param exists_platform_solution: 
        :type exists_platform_solution: bool
        :param metadata: Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type metadata: List[str]
        :param transaction_metadata: Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type transaction_metadata: List[str]
        :param transaction_offer_metadata: Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type transaction_offer_metadata: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DisputeCollectionRead]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_get_collection_with_http_info(page, order_created_at, order_status, order_updated_at, transaction_offer_title, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, status, transaction_status, exists_recommended_solution, exists_chosen_solution, exists_counter_solution, exists_platform_solution, metadata, transaction_metadata, transaction_offer_metadata, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_get_collection_with_http_info(self, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, order_created_at : Optional[StrictStr] = None, order_status : Optional[StrictStr] = None, order_updated_at : Optional[StrictStr] = None, transaction_offer_title : Optional[StrictStr] = None, created_at_before : Optional[StrictStr] = None, created_at_strictly_before : Optional[StrictStr] = None, created_at_after : Optional[StrictStr] = None, created_at_strictly_after : Optional[StrictStr] = None, status : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of status")] = None, transaction_status : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of transaction.status")] = None, exists_recommended_solution : Optional[StrictBool] = None, exists_chosen_solution : Optional[StrictBool] = None, exists_counter_solution : Optional[StrictBool] = None, exists_platform_solution : Optional[StrictBool] = None, metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, transaction_metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, transaction_offer_metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves the collection of Dispute resources.  # noqa: E501

        Retrieves the collection of Dispute resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_get_collection_with_http_info(page, order_created_at, order_status, order_updated_at, transaction_offer_title, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, status, transaction_status, exists_recommended_solution, exists_chosen_solution, exists_counter_solution, exists_platform_solution, metadata, transaction_metadata, transaction_offer_metadata, async_req=True)
        >>> result = thread.get()

        :param page: The collection page number
        :type page: int
        :param order_created_at: 
        :type order_created_at: str
        :param order_status: 
        :type order_status: str
        :param order_updated_at: 
        :type order_updated_at: str
        :param transaction_offer_title: 
        :type transaction_offer_title: str
        :param created_at_before: 
        :type created_at_before: str
        :param created_at_strictly_before: 
        :type created_at_strictly_before: str
        :param created_at_after: 
        :type created_at_after: str
        :param created_at_strictly_after: 
        :type created_at_strictly_after: str
        :param status: Filter on a limited subset of status
        :type status: str
        :param transaction_status: Filter on a limited subset of transaction.status
        :type transaction_status: str
        :param exists_recommended_solution: 
        :type exists_recommended_solution: bool
        :param exists_chosen_solution: 
        :type exists_chosen_solution: bool
        :param exists_counter_solution: 
        :type exists_counter_solution: bool
        :param exists_platform_solution: 
        :type exists_platform_solution: bool
        :param metadata: Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type metadata: List[str]
        :param transaction_metadata: Flattened OrderedMap for transaction.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type transaction_metadata: List[str]
        :param transaction_offer_metadata: Flattened OrderedMap for transaction.offer.metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type transaction_offer_metadata: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DisputeCollectionRead], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'order_created_at',
            'order_status',
            'order_updated_at',
            'transaction_offer_title',
            'created_at_before',
            'created_at_strictly_before',
            'created_at_after',
            'created_at_strictly_after',
            'status',
            'transaction_status',
            'exists_recommended_solution',
            'exists_chosen_solution',
            'exists_counter_solution',
            'exists_platform_solution',
            'metadata',
            'transaction_metadata',
            'transaction_offer_metadata'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('order_created_at') is not None:  # noqa: E501
            _query_params.append(('order[createdAt]', _params['order_created_at']))

        if _params.get('order_status') is not None:  # noqa: E501
            _query_params.append(('order[status]', _params['order_status']))

        if _params.get('order_updated_at') is not None:  # noqa: E501
            _query_params.append(('order[updatedAt]', _params['order_updated_at']))

        if _params.get('transaction_offer_title') is not None:  # noqa: E501
            _query_params.append(('transaction.offer.title', _params['transaction_offer_title']))

        if _params.get('created_at_before') is not None:  # noqa: E501
            _query_params.append(('createdAt[before]', _params['created_at_before']))

        if _params.get('created_at_strictly_before') is not None:  # noqa: E501
            _query_params.append(('createdAt[strictly_before]', _params['created_at_strictly_before']))

        if _params.get('created_at_after') is not None:  # noqa: E501
            _query_params.append(('createdAt[after]', _params['created_at_after']))

        if _params.get('created_at_strictly_after') is not None:  # noqa: E501
            _query_params.append(('createdAt[strictly_after]', _params['created_at_strictly_after']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('transaction_status') is not None:  # noqa: E501
            _query_params.append(('transaction.status', _params['transaction_status']))

        if _params.get('exists_recommended_solution') is not None:  # noqa: E501
            _query_params.append(('exists[recommendedSolution]', _params['exists_recommended_solution']))

        if _params.get('exists_chosen_solution') is not None:  # noqa: E501
            _query_params.append(('exists[chosenSolution]', _params['exists_chosen_solution']))

        if _params.get('exists_counter_solution') is not None:  # noqa: E501
            _query_params.append(('exists[counterSolution]', _params['exists_counter_solution']))

        if _params.get('exists_platform_solution') is not None:  # noqa: E501
            _query_params.append(('exists[platformSolution]', _params['exists_platform_solution']))

        if _params.get('metadata') is not None:  # noqa: E501
            _query_params.append(('metadata[]', _params['metadata']))
            _collection_formats['metadata[]'] = 'csv'

        if _params.get('transaction_metadata') is not None:  # noqa: E501
            _query_params.append(('transaction.metadata[]', _params['transaction_metadata']))
            _collection_formats['transaction.metadata[]'] = 'csv'

        if _params.get('transaction_offer_metadata') is not None:  # noqa: E501
            _query_params.append(('transaction.offer.metadata[]', _params['transaction_offer_metadata']))
            _collection_formats['transaction.offer.metadata[]'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[DisputeCollectionRead]",
        }

        return self.api_client.call_api(
            '/disputes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_post(self, dispute_independent_write : Annotated[DisputeIndependentWrite, Field(..., description="The new Dispute resource")], **kwargs) -> DisputePostCreationRead:  # noqa: E501
        """Draft a standalone Dispute  # noqa: E501

        Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_post(dispute_independent_write, async_req=True)
        >>> result = thread.get()

        :param dispute_independent_write: The new Dispute resource (required)
        :type dispute_independent_write: DisputeIndependentWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DisputePostCreationRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_post_with_http_info(dispute_independent_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_post_with_http_info(self, dispute_independent_write : Annotated[DisputeIndependentWrite, Field(..., description="The new Dispute resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Draft a standalone Dispute  # noqa: E501

        Create a draft dispute to be filled by an alleged aggrieved customer. Do not use that endpoint if the transaction took place using our safe-checkout tunnel. This endpoint return a unique URL that can be accessed by both the complainant and seller (if individual).  **Note:** You can generate at your own discretion tokens for both parties, thus avoiding the secondary authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_post_with_http_info(dispute_independent_write, async_req=True)
        >>> result = thread.get()

        :param dispute_independent_write: The new Dispute resource (required)
        :type dispute_independent_write: DisputeIndependentWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DisputePostCreationRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dispute_independent_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dispute_independent_write'] is not None:
            _body_params = _params['dispute_independent_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "DisputePostCreationRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/disputes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulid_delete(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], **kwargs) -> None:  # noqa: E501
        """Abandon claims on Dispute  # noqa: E501

        **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_delete(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulid_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulid_delete_with_http_info(ulid, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulid_delete_with_http_info(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """Abandon claims on Dispute  # noqa: E501

        **Only the buyer/complainant** can dismiss the case immediately. Otherwise, the support can but in a limited ranges of Dispute status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_delete_with_http_info(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'ulid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulid_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/disputes/{ulid}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulid_get(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], **kwargs) -> DisputeRead:  # noqa: E501
        """Retrieves a Dispute resource.  # noqa: E501

        Retrieves a Dispute resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_get(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DisputeRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulid_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulid_get_with_http_info(ulid, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulid_get_with_http_info(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves a Dispute resource.  # noqa: E501

        Retrieves a Dispute resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_get_with_http_info(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DisputeRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulid_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "DisputeRead",
            '404': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulid_patch(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], dispute_update : Annotated[DisputeUpdate, Field(..., description="The updated Dispute resource")], **kwargs) -> DisputeRead:  # noqa: E501
        """Update the Dispute  # noqa: E501

        Updates the Dispute resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_patch(ulid, dispute_update, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param dispute_update: The updated Dispute resource (required)
        :type dispute_update: DisputeUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DisputeRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulid_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulid_patch_with_http_info(ulid, dispute_update, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulid_patch_with_http_info(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], dispute_update : Annotated[DisputeUpdate, Field(..., description="The updated Dispute resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update the Dispute  # noqa: E501

        Updates the Dispute resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulid_patch_with_http_info(ulid, dispute_update, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param dispute_update: The updated Dispute resource (required)
        :type dispute_update: DisputeUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DisputeRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'dispute_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulid_patch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dispute_update'] is not None:
            _body_params = _params['dispute_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "DisputeRead",
            '400': None,
            '422': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidevaluations_post(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], evaluation_write : Annotated[EvaluationWrite, Field(..., description="The new Evaluation resource")], **kwargs) -> EvaluationRead:  # noqa: E501
        """Submit an Evaluation for the Dispute  # noqa: E501

        **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevaluations_post(ulid, evaluation_write, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param evaluation_write: The new Evaluation resource (required)
        :type evaluation_write: EvaluationWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EvaluationRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidevaluations_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidevaluations_post_with_http_info(ulid, evaluation_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidevaluations_post_with_http_info(self, ulid : Annotated[StrictStr, Field(..., description="Dispute identifier")], evaluation_write : Annotated[EvaluationWrite, Field(..., description="The new Evaluation resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Submit an Evaluation for the Dispute  # noqa: E501

        **Only authenticated** complainant and seller **CAN** issue an evaluation **WHEN** the dispute reached a final state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevaluations_post_with_http_info(ulid, evaluation_write, async_req=True)
        >>> result = thread.get()

        :param ulid: Dispute identifier (required)
        :type ulid: str
        :param evaluation_write: The new Evaluation resource (required)
        :type evaluation_write: EvaluationWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EvaluationRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'evaluation_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidevaluations_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['evaluation_write'] is not None:
            _body_params = _params['evaluation_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['personaAuthKey']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "EvaluationRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/evaluations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidevidences_get_collection(self, ulid : StrictStr, **kwargs) -> List[EvidenceRead]:  # noqa: E501
        """Retrieve all Evidences in Dispute  # noqa: E501

        Retrieves the collection of Evidence resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_get_collection(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[EvidenceRead]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidevidences_get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidevidences_get_collection_with_http_info(ulid, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidevidences_get_collection_with_http_info(self, ulid : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve all Evidences in Dispute  # noqa: E501

        Retrieves the collection of Evidence resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_get_collection_with_http_info(ulid, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[EvidenceRead], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidevidences_get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey']  # noqa: E501

        _response_types_map = {
            '200': "List[EvidenceRead]",
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/evidences', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidevidences_id_delete(self, ulid : StrictStr, id : StrictInt, **kwargs) -> None:  # noqa: E501
        """Withdraw an Evidence from a Dispute  # noqa: E501

        Removes the Evidence resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_id_delete(ulid, id, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidevidences_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidevidences_id_delete_with_http_info(ulid, id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidevidences_id_delete_with_http_info(self, ulid : StrictStr, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Withdraw an Evidence from a Dispute  # noqa: E501

        Removes the Evidence resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_id_delete_with_http_info(ulid, id, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'ulid',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidevidences_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']

        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/disputes/{ulid}/evidences/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidevidences_idmedia_post(self, ulid : StrictStr, id : StrictInt, file : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> MediaRead:  # noqa: E501
        """Upload attachment in regard of described Evidence  # noqa: E501

        Creates a Media resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_idmedia_post(ulid, id, file, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param file:
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidevidences_idmedia_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidevidences_idmedia_post_with_http_info(ulid, id, file, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidevidences_idmedia_post_with_http_info(self, ulid : StrictStr, id : StrictInt, file : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload attachment in regard of described Evidence  # noqa: E501

        Creates a Media resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_idmedia_post_with_http_info(ulid, id, file, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param file:
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'id',
            'file'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidevidences_idmedia_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']

        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['file']:
            _files['file'] = _params['file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['personaAuthKey']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "MediaRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/evidences/{id}/media', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidevidences_post(self, ulid : StrictStr, evidence_write : Annotated[EvidenceWrite, Field(..., description="The new Evidence resource")], **kwargs) -> EvidenceRead:  # noqa: E501
        """Submit an Evidence to the Dispute case  # noqa: E501

        This action does not held the actual upload, you will have to do the upload in a dedicated request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_post(ulid, evidence_write, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param evidence_write: The new Evidence resource (required)
        :type evidence_write: EvidenceWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EvidenceRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidevidences_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidevidences_post_with_http_info(ulid, evidence_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidevidences_post_with_http_info(self, ulid : StrictStr, evidence_write : Annotated[EvidenceWrite, Field(..., description="The new Evidence resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Submit an Evidence to the Dispute case  # noqa: E501

        This action does not held the actual upload, you will have to do the upload in a dedicated request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidevidences_post_with_http_info(ulid, evidence_write, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param evidence_write: The new Evidence resource (required)
        :type evidence_write: EvidenceWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EvidenceRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'evidence_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidevidences_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['evidence_write'] is not None:
            _body_params = _params['evidence_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['personaAuthKey']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "EvidenceRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/evidences', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidparcels_get_collection(self, ulid : StrictStr, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, **kwargs) -> List[object]:  # noqa: E501
        """Retrieves the collection of Parcel resources.  # noqa: E501

        Retrieves the collection of Parcel resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_get_collection(ulid, page, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param page: The collection page number
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[object]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidparcels_get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidparcels_get_collection_with_http_info(ulid, page, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidparcels_get_collection_with_http_info(self, ulid : StrictStr, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves the collection of Parcel resources.  # noqa: E501

        Retrieves the collection of Parcel resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_get_collection_with_http_info(ulid, page, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param page: The collection page number
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[object], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidparcels_get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[object]",
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/parcels', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidparcels_id_delete(self, ulid : StrictStr, id : StrictInt, **kwargs) -> None:  # noqa: E501
        """Removes the Parcel resource.  # noqa: E501

        Removes the Parcel resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_id_delete(ulid, id, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidparcels_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidparcels_id_delete_with_http_info(ulid, id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidparcels_id_delete_with_http_info(self, ulid : StrictStr, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Removes the Parcel resource.  # noqa: E501

        Removes the Parcel resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_id_delete_with_http_info(ulid, id, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param id:  (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'ulid',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidparcels_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']

        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['jwtPersonalKey']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/disputes/{ulid}/parcels/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_disputes_ulidparcels_post(self, ulid : StrictStr, parcel_write : Annotated[ParcelWrite, Field(..., description="The new Parcel resource")], **kwargs) -> ParcelRead:  # noqa: E501
        """Creates a Parcel resource.  # noqa: E501

        Creates a Parcel resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_post(ulid, parcel_write, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param parcel_write: The new Parcel resource (required)
        :type parcel_write: ParcelWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ParcelRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_disputes_ulidparcels_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_disputes_ulidparcels_post_with_http_info(ulid, parcel_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_disputes_ulidparcels_post_with_http_info(self, ulid : StrictStr, parcel_write : Annotated[ParcelWrite, Field(..., description="The new Parcel resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a Parcel resource.  # noqa: E501

        Creates a Parcel resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_disputes_ulidparcels_post_with_http_info(ulid, parcel_write, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param parcel_write: The new Parcel resource (required)
        :type parcel_write: ParcelWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ParcelRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'parcel_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_disputes_ulidparcels_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['parcel_write'] is not None:
            _body_params = _params['parcel_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '201': "ParcelRead",
            '400': None,
            '422': None,
        }

        return self.api_client.call_api(
            '/disputes/{ulid}/parcels', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_offers_ulidmedias_post(self, ulid : StrictStr, file : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> MediaRead:  # noqa: E501
        """Upload a picture for a given Offer  # noqa: E501

        Creates a Media resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_offers_ulidmedias_post(ulid, file, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param file:
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MediaRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_offers_ulidmedias_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_offers_ulidmedias_post_with_http_info(ulid, file, **kwargs)  # noqa: E501

    @validate_arguments
    def api_offers_ulidmedias_post_with_http_info(self, ulid : StrictStr, file : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload a picture for a given Offer  # noqa: E501

        Creates a Media resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_offers_ulidmedias_post_with_http_info(ulid, file, async_req=True)
        >>> result = thread.get()

        :param ulid:  (required)
        :type ulid: str
        :param file:
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MediaRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ulid',
            'file'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_offers_ulidmedias_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['ulid']:
            _path_params['ulid'] = _params['ulid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['file']:
            _files['file'] = _params['file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "MediaRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/offers/{ulid}/medias', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
