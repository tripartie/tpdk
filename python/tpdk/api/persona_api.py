# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.92
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conlist

from typing import List, Optional

from tpdk.models.persona_collection_read import PersonaCollectionRead
from tpdk.models.persona_post_auth_read import PersonaPostAuthRead
from tpdk.models.persona_read import PersonaRead
from tpdk.models.persona_token_write import PersonaTokenWrite
from tpdk.models.persona_update import PersonaUpdate
from tpdk.models.persona_write import PersonaWrite

from tpdk.api_client import ApiClient
from tpdk.api_response import ApiResponse
from tpdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PersonaApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def api_personas_get_collection(self, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, first_name : Optional[StrictStr] = None, last_name : Optional[StrictStr] = None, email : Optional[StrictStr] = None, mobile_phone_number : Optional[StrictStr] = None, mobile_phone_number2 : Optional[conlist(StrictStr)] = None, gender : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of gender")] = None, order_created_at : Optional[StrictStr] = None, created_at_before : Optional[StrictStr] = None, created_at_strictly_before : Optional[StrictStr] = None, created_at_after : Optional[StrictStr] = None, created_at_strictly_after : Optional[StrictStr] = None, date_of_birth_before : Optional[StrictStr] = None, date_of_birth_strictly_before : Optional[StrictStr] = None, date_of_birth_after : Optional[StrictStr] = None, date_of_birth_strictly_after : Optional[StrictStr] = None, metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, **kwargs) -> List[PersonaCollectionRead]:  # noqa: E501
        """Retrieves the collection of Persona resources.  # noqa: E501

        Retrieves the collection of Persona resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_get_collection(page, first_name, last_name, email, mobile_phone_number, mobile_phone_number2, gender, order_created_at, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, date_of_birth_before, date_of_birth_strictly_before, date_of_birth_after, date_of_birth_strictly_after, metadata, async_req=True)
        >>> result = thread.get()

        :param page: The collection page number
        :type page: int
        :param first_name: 
        :type first_name: str
        :param last_name: 
        :type last_name: str
        :param email: 
        :type email: str
        :param mobile_phone_number: 
        :type mobile_phone_number: str
        :param mobile_phone_number2: 
        :type mobile_phone_number2: List[str]
        :param gender: Filter on a limited subset of gender
        :type gender: str
        :param order_created_at: 
        :type order_created_at: str
        :param created_at_before: 
        :type created_at_before: str
        :param created_at_strictly_before: 
        :type created_at_strictly_before: str
        :param created_at_after: 
        :type created_at_after: str
        :param created_at_strictly_after: 
        :type created_at_strictly_after: str
        :param date_of_birth_before: 
        :type date_of_birth_before: str
        :param date_of_birth_strictly_before: 
        :type date_of_birth_strictly_before: str
        :param date_of_birth_after: 
        :type date_of_birth_after: str
        :param date_of_birth_strictly_after: 
        :type date_of_birth_strictly_after: str
        :param metadata: Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type metadata: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PersonaCollectionRead]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_get_collection_with_http_info(page, first_name, last_name, email, mobile_phone_number, mobile_phone_number2, gender, order_created_at, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, date_of_birth_before, date_of_birth_strictly_before, date_of_birth_after, date_of_birth_strictly_after, metadata, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_get_collection_with_http_info(self, page : Annotated[Optional[StrictInt], Field(description="The collection page number")] = None, first_name : Optional[StrictStr] = None, last_name : Optional[StrictStr] = None, email : Optional[StrictStr] = None, mobile_phone_number : Optional[StrictStr] = None, mobile_phone_number2 : Optional[conlist(StrictStr)] = None, gender : Annotated[Optional[StrictStr], Field(description="Filter on a limited subset of gender")] = None, order_created_at : Optional[StrictStr] = None, created_at_before : Optional[StrictStr] = None, created_at_strictly_before : Optional[StrictStr] = None, created_at_after : Optional[StrictStr] = None, created_at_strictly_after : Optional[StrictStr] = None, date_of_birth_before : Optional[StrictStr] = None, date_of_birth_strictly_before : Optional[StrictStr] = None, date_of_birth_after : Optional[StrictStr] = None, date_of_birth_strictly_after : Optional[StrictStr] = None, metadata : Annotated[Optional[conlist(conlist(StrictStr))], Field(description="Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves the collection of Persona resources.  # noqa: E501

        Retrieves the collection of Persona resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_get_collection_with_http_info(page, first_name, last_name, email, mobile_phone_number, mobile_phone_number2, gender, order_created_at, created_at_before, created_at_strictly_before, created_at_after, created_at_strictly_after, date_of_birth_before, date_of_birth_strictly_before, date_of_birth_after, date_of_birth_strictly_after, metadata, async_req=True)
        >>> result = thread.get()

        :param page: The collection page number
        :type page: int
        :param first_name: 
        :type first_name: str
        :param last_name: 
        :type last_name: str
        :param email: 
        :type email: str
        :param mobile_phone_number: 
        :type mobile_phone_number: str
        :param mobile_phone_number2: 
        :type mobile_phone_number2: List[str]
        :param gender: Filter on a limited subset of gender
        :type gender: str
        :param order_created_at: 
        :type order_created_at: str
        :param created_at_before: 
        :type created_at_before: str
        :param created_at_strictly_before: 
        :type created_at_strictly_before: str
        :param created_at_after: 
        :type created_at_after: str
        :param created_at_strictly_after: 
        :type created_at_strictly_after: str
        :param date_of_birth_before: 
        :type date_of_birth_before: str
        :param date_of_birth_strictly_before: 
        :type date_of_birth_strictly_before: str
        :param date_of_birth_after: 
        :type date_of_birth_after: str
        :param date_of_birth_strictly_after: 
        :type date_of_birth_strictly_after: str
        :param metadata: Flattened OrderedMap for metadata. Must be a multiple of two items count. Explicitly set \"null\" for desired value.
        :type metadata: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PersonaCollectionRead], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'first_name',
            'last_name',
            'email',
            'mobile_phone_number',
            'mobile_phone_number2',
            'gender',
            'order_created_at',
            'created_at_before',
            'created_at_strictly_before',
            'created_at_after',
            'created_at_strictly_after',
            'date_of_birth_before',
            'date_of_birth_strictly_before',
            'date_of_birth_after',
            'date_of_birth_strictly_after',
            'metadata'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('first_name') is not None:  # noqa: E501
            _query_params.append(('firstName', _params['first_name']))

        if _params.get('last_name') is not None:  # noqa: E501
            _query_params.append(('lastName', _params['last_name']))

        if _params.get('email') is not None:  # noqa: E501
            _query_params.append(('email', _params['email']))

        if _params.get('mobile_phone_number') is not None:  # noqa: E501
            _query_params.append(('mobilePhoneNumber', _params['mobile_phone_number']))

        if _params.get('mobile_phone_number2') is not None:  # noqa: E501
            _query_params.append(('mobilePhoneNumber[]', _params['mobile_phone_number2']))
            _collection_formats['mobilePhoneNumber[]'] = 'multi'

        if _params.get('gender') is not None:  # noqa: E501
            _query_params.append(('gender', _params['gender']))

        if _params.get('order_created_at') is not None:  # noqa: E501
            _query_params.append(('order[createdAt]', _params['order_created_at']))

        if _params.get('created_at_before') is not None:  # noqa: E501
            _query_params.append(('createdAt[before]', _params['created_at_before']))

        if _params.get('created_at_strictly_before') is not None:  # noqa: E501
            _query_params.append(('createdAt[strictly_before]', _params['created_at_strictly_before']))

        if _params.get('created_at_after') is not None:  # noqa: E501
            _query_params.append(('createdAt[after]', _params['created_at_after']))

        if _params.get('created_at_strictly_after') is not None:  # noqa: E501
            _query_params.append(('createdAt[strictly_after]', _params['created_at_strictly_after']))

        if _params.get('date_of_birth_before') is not None:  # noqa: E501
            _query_params.append(('dateOfBirth[before]', _params['date_of_birth_before']))

        if _params.get('date_of_birth_strictly_before') is not None:  # noqa: E501
            _query_params.append(('dateOfBirth[strictly_before]', _params['date_of_birth_strictly_before']))

        if _params.get('date_of_birth_after') is not None:  # noqa: E501
            _query_params.append(('dateOfBirth[after]', _params['date_of_birth_after']))

        if _params.get('date_of_birth_strictly_after') is not None:  # noqa: E501
            _query_params.append(('dateOfBirth[strictly_after]', _params['date_of_birth_strictly_after']))

        if _params.get('metadata') is not None:  # noqa: E501
            _query_params.append(('metadata[]', _params['metadata']))
            _collection_formats['metadata[]'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "List[PersonaCollectionRead]",
        }

        return self.api_client.call_api(
            '/personas', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_personas_id_delete(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], **kwargs) -> None:  # noqa: E501
        """Unregister a Persona (Your customer)  # noqa: E501

        You **MAY** unregister (or free the email/phone number) your Persona entry using that endpoint. *Please note that* this operation will fail if that Persona have any ongoing operations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_id_delete_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_id_delete_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """Unregister a Persona (Your customer)  # noqa: E501

        You **MAY** unregister (or free the email/phone number) your Persona entry using that endpoint. *Please note that* this operation will fail if that Persona have any ongoing operations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/personas/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_personas_id_get(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], **kwargs) -> PersonaRead:  # noqa: E501
        """Retrieves a Persona resource.  # noqa: E501

        Retrieves a Persona resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_get(id, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PersonaRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_id_get_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_id_get_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves a Persona resource.  # noqa: E501

        Retrieves a Persona resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PersonaRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "PersonaRead",
            '404': None,
        }

        return self.api_client.call_api(
            '/personas/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_personas_id_patch(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], persona_update : Annotated[PersonaUpdate, Field(..., description="The updated Persona resource")], **kwargs) -> PersonaRead:  # noqa: E501
        """Updates the Persona resource.  # noqa: E501

        Update your Persona (eg. your customer/user entry) through that API call. _Beware that updating_ **email** and/or the **mobile phone number** must be done using non reserved values. Otherwise this operation will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_patch(id, persona_update, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param persona_update: The updated Persona resource (required)
        :type persona_update: PersonaUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PersonaRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_id_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_id_patch_with_http_info(id, persona_update, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_id_patch_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], persona_update : Annotated[PersonaUpdate, Field(..., description="The updated Persona resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Updates the Persona resource.  # noqa: E501

        Update your Persona (eg. your customer/user entry) through that API call. _Beware that updating_ **email** and/or the **mobile phone number** must be done using non reserved values. Otherwise this operation will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_id_patch_with_http_info(id, persona_update, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param persona_update: The updated Persona resource (required)
        :type persona_update: PersonaUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PersonaRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'persona_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_id_patch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['persona_update'] is not None:
            _body_params = _params['persona_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['jwtPersonalKey', 'personaAuthKey', 'oauth']  # noqa: E501

        _response_types_map = {
            '200': "PersonaRead",
            '400': None,
            '422': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/personas/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_personas_idtoken_post(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], persona_token_write : Annotated[PersonaTokenWrite, Field(..., description="The new Persona resource")], **kwargs) -> PersonaPostAuthRead:  # noqa: E501
        """Issue authenticated URL for single end-user  # noqa: E501

        Without this, your users may be required to pass a MFA challenge even if they are already logged-in from your website. Pass the URL you wish your user access, either a Dispute or Safe-checkout resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_idtoken_post(id, persona_token_write, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param persona_token_write: The new Persona resource (required)
        :type persona_token_write: PersonaTokenWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PersonaPostAuthRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_idtoken_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_idtoken_post_with_http_info(id, persona_token_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_idtoken_post_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Persona identifier")], persona_token_write : Annotated[PersonaTokenWrite, Field(..., description="The new Persona resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Issue authenticated URL for single end-user  # noqa: E501

        Without this, your users may be required to pass a MFA challenge even if they are already logged-in from your website. Pass the URL you wish your user access, either a Dispute or Safe-checkout resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_idtoken_post_with_http_info(id, persona_token_write, async_req=True)
        >>> result = thread.get()

        :param id: Persona identifier (required)
        :type id: str
        :param persona_token_write: The new Persona resource (required)
        :type persona_token_write: PersonaTokenWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PersonaPostAuthRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'persona_token_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_idtoken_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['persona_token_write'] is not None:
            _body_params = _params['persona_token_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "PersonaPostAuthRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/personas/{id}/token', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_personas_post(self, persona_write : Annotated[PersonaWrite, Field(..., description="The new Persona resource")], **kwargs) -> PersonaRead:  # noqa: E501
        """Register a Persona (Your customer)  # noqa: E501

        You should not register your whole database of users, only those who are concerned by a Safe-checkout or Dispute operation. One Persona entry for your organization can be assigned as a seller or buyer.  **Notes:**   - (i) There is a unique constraint for the mobile phone numbers and email.   - (ii) You will have to issue a DELETE operation on a Persona that withhold a specific phone number or email.   - (iii) You are NOT REQUIRED to provide email OR a mobile phone number but it is highly recommended, if none provided the email will be generated as '{ulid}@your-domain.tld'. In that case, please specify at least one metadata in order to find your entry with ease.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_post(persona_write, async_req=True)
        >>> result = thread.get()

        :param persona_write: The new Persona resource (required)
        :type persona_write: PersonaWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PersonaRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_personas_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_personas_post_with_http_info(persona_write, **kwargs)  # noqa: E501

    @validate_arguments
    def api_personas_post_with_http_info(self, persona_write : Annotated[PersonaWrite, Field(..., description="The new Persona resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Register a Persona (Your customer)  # noqa: E501

        You should not register your whole database of users, only those who are concerned by a Safe-checkout or Dispute operation. One Persona entry for your organization can be assigned as a seller or buyer.  **Notes:**   - (i) There is a unique constraint for the mobile phone numbers and email.   - (ii) You will have to issue a DELETE operation on a Persona that withhold a specific phone number or email.   - (iii) You are NOT REQUIRED to provide email OR a mobile phone number but it is highly recommended, if none provided the email will be generated as '{ulid}@your-domain.tld'. In that case, please specify at least one metadata in order to find your entry with ease.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_personas_post_with_http_info(persona_write, async_req=True)
        >>> result = thread.get()

        :param persona_write: The new Persona resource (required)
        :type persona_write: PersonaWrite
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PersonaRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'persona_write'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personas_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['persona_write'] is not None:
            _body_params = _params['persona_write']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth']  # noqa: E501

        _response_types_map = {
            '422': "UnprocessableEntity",
            '201': "PersonaRead",
            '400': None,
        }

        return self.api_client.call_api(
            '/personas', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
