# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.134
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from tpdk.models.address import Address
from tpdk.models.metadata import Metadata
from tpdk.models.view import View
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Persona(BaseModel):
    """
    
    """ # noqa: E501
    id: Optional[StrictInt] = None
    captcha: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    target_url: Optional[StrictStr] = Field(default=None, description="The URL you wish that Persona to go to without additional MFA. The URL MUST concern that Persona.", alias="targetUrl")
    auth_url: Optional[StrictStr] = Field(default=None, description="Url that is able to bypass MFA for a single user. Please note that this should not be shared between the complainant and the seller or anyone external to them.", alias="authUrl")
    expire_at: Optional[datetime] = Field(default=None, description="This authenticated-URL cannot be renewed, you will have to re-create one each time. Typically valid for a single hour.", alias="expireAt")
    password: Optional[StrictStr] = Field(default=None, description="The hashed password")
    plain_password: Optional[StrictStr] = Field(default=None, alias="plainPassword")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    gender: Optional[StrictStr] = 'RATHER_NOT_SAY'
    date_of_birth: Optional[date] = Field(default=None, alias="dateOfBirth")
    language: Optional[StrictStr] = Field(default=None, description="That data is used for rendering the frontend application with given language. If not set, will be inferred. Custom codes can be issued for specific requirements.")
    email: Optional[StrictStr] = None
    mobile_phone_number: Optional[StrictStr] = Field(default=None, alias="mobilePhoneNumber")
    address: Optional[Address] = None
    risk_level: Optional[StrictStr] = Field(default=None, description="We sort Persona into three distinct risks' category. This is inferred from the riskScore.", alias="riskLevel")
    risk_score: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="That score is regularly updated, each action taken can potentially update that value. A value close to zero mean zero risk and close to a hundred mean risky.", alias="riskScore")
    external_purchase_count: Optional[StrictInt] = Field(default=None, description="Knowing the statistics on your user is used to better know its profile when you do not use the Safe-Checkout feature. Although it is not required, we recommend that you keep us informed.", alias="externalPurchaseCount")
    external_sell_count: Optional[StrictInt] = Field(default=None, description="Knowing the statistics on your user is used to better know its profile when you do not use the Safe-Checkout feature. Although it is not required, we recommend that you keep us informed.", alias="externalSellCount")
    metadata: Optional[List[Metadata]] = None
    offers: List[StrictStr]
    purchases: Optional[Any]
    views: List[View]
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    offer_count: Optional[StrictInt] = Field(default=None, description="Issued Offers count owned by a given Persona", alias="offerCount")
    purchase_count: Optional[StrictInt] = Field(default=None, alias="purchaseCount")
    roles: Optional[List[StrictStr]] = None
    user_identifier: Optional[StrictStr] = Field(default=None, description="Either email or the mobile phone number", alias="userIdentifier")
    __properties: ClassVar[List[str]] = ["id", "captcha", "organization", "targetUrl", "authUrl", "expireAt", "password", "plainPassword", "firstName", "lastName", "gender", "dateOfBirth", "language", "email", "mobilePhoneNumber", "address", "riskLevel", "riskScore", "externalPurchaseCount", "externalSellCount", "metadata", "offers", "purchases", "views", "createdAt", "updatedAt", "offerCount", "purchaseCount", "roles", "userIdentifier"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MALE', 'FEMALE', 'OTHER', 'RATHER_NOT_SAY'):
            raise ValueError("must be one of enum values ('MALE', 'FEMALE', 'OTHER', 'RATHER_NOT_SAY')")
        return value

    @field_validator('risk_level')
    def risk_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('WEAK', 'MEDIUM', 'HIGH', 'null'):
            raise ValueError("must be one of enum values ('WEAK', 'MEDIUM', 'HIGH', 'null')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Persona from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
                "offer_count",
                "purchase_count",
                "user_identifier",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in views (list)
        _items = []
        if self.views:
            for _item in self.views:
                if _item:
                    _items.append(_item.to_dict())
            _dict['views'] = _items
        # set to None if captcha (nullable) is None
        # and model_fields_set contains the field
        if self.captcha is None and "captcha" in self.model_fields_set:
            _dict['captcha'] = None

        # set to None if organization (nullable) is None
        # and model_fields_set contains the field
        if self.organization is None and "organization" in self.model_fields_set:
            _dict['organization'] = None

        # set to None if target_url (nullable) is None
        # and model_fields_set contains the field
        if self.target_url is None and "target_url" in self.model_fields_set:
            _dict['targetUrl'] = None

        # set to None if auth_url (nullable) is None
        # and model_fields_set contains the field
        if self.auth_url is None and "auth_url" in self.model_fields_set:
            _dict['authUrl'] = None

        # set to None if expire_at (nullable) is None
        # and model_fields_set contains the field
        if self.expire_at is None and "expire_at" in self.model_fields_set:
            _dict['expireAt'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if plain_password (nullable) is None
        # and model_fields_set contains the field
        if self.plain_password is None and "plain_password" in self.model_fields_set:
            _dict['plainPassword'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['dateOfBirth'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if mobile_phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_phone_number is None and "mobile_phone_number" in self.model_fields_set:
            _dict['mobilePhoneNumber'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if risk_level (nullable) is None
        # and model_fields_set contains the field
        if self.risk_level is None and "risk_level" in self.model_fields_set:
            _dict['riskLevel'] = None

        # set to None if risk_score (nullable) is None
        # and model_fields_set contains the field
        if self.risk_score is None and "risk_score" in self.model_fields_set:
            _dict['riskScore'] = None

        # set to None if purchases (nullable) is None
        # and model_fields_set contains the field
        if self.purchases is None and "purchases" in self.model_fields_set:
            _dict['purchases'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updatedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Persona from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "captcha": obj.get("captcha"),
            "organization": obj.get("organization"),
            "targetUrl": obj.get("targetUrl"),
            "authUrl": obj.get("authUrl"),
            "expireAt": obj.get("expireAt"),
            "password": obj.get("password"),
            "plainPassword": obj.get("plainPassword"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "gender": obj.get("gender") if obj.get("gender") is not None else 'RATHER_NOT_SAY',
            "dateOfBirth": obj.get("dateOfBirth"),
            "language": obj.get("language"),
            "email": obj.get("email"),
            "mobilePhoneNumber": obj.get("mobilePhoneNumber"),
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "riskLevel": obj.get("riskLevel"),
            "riskScore": obj.get("riskScore"),
            "externalPurchaseCount": obj.get("externalPurchaseCount"),
            "externalSellCount": obj.get("externalSellCount"),
            "metadata": [Metadata.from_dict(_item) for _item in obj.get("metadata")] if obj.get("metadata") is not None else None,
            "offers": obj.get("offers"),
            "purchases": obj.get("purchases"),
            "views": [View.from_dict(_item) for _item in obj.get("views")] if obj.get("views") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "offerCount": obj.get("offerCount"),
            "purchaseCount": obj.get("purchaseCount"),
            "roles": obj.get("roles"),
            "userIdentifier": obj.get("userIdentifier")
        })
        return _obj


