# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.  # noqa: E501

    The version of the OpenAPI document: 2.0.22
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class AiHint(BaseModel):
    """
    
    """
    id: Optional[StrictInt] = None
    dispute: Optional[StrictStr] = None
    evidence: Optional[StrictStr] = None
    score_of_trust: StrictInt = Field(..., alias="scoreOfTrust")
    label: StrictStr = Field(...)
    dismissed: StrictBool = Field(...)
    to_be_disclosed: StrictBool = Field(..., alias="toBeDisclosed")
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    updated_at: Optional[datetime] = Field(None, alias="updatedAt")
    __properties = ["id", "dispute", "evidence", "scoreOfTrust", "label", "dismissed", "toBeDisclosed", "createdAt", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AiHint:
        """Create an instance of AiHint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                          },
                          exclude_none=True)
        # set to None if dispute (nullable) is None
        # and __fields_set__ contains the field
        if self.dispute is None and "dispute" in self.__fields_set__:
            _dict['dispute'] = None

        # set to None if evidence (nullable) is None
        # and __fields_set__ contains the field
        if self.evidence is None and "evidence" in self.__fields_set__:
            _dict['evidence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AiHint:
        """Create an instance of AiHint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AiHint.parse_obj(obj)

        _obj = AiHint.parse_obj({
            "id": obj.get("id"),
            "dispute": obj.get("dispute"),
            "evidence": obj.get("evidence"),
            "score_of_trust": obj.get("scoreOfTrust"),
            "label": obj.get("label"),
            "dismissed": obj.get("dismissed"),
            "to_be_disclosed": obj.get("toBeDisclosed"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

