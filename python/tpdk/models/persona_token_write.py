# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.92
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PersonaTokenWrite(BaseModel):
    """
      # noqa: E501
    """
    target_url: Optional[StrictStr] = Field(..., alias="targetUrl", description="The URL you wish that Persona to go to without additional MFA. The URL MUST concern that Persona.")
    __properties = ["targetUrl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonaTokenWrite:
        """Create an instance of PersonaTokenWrite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if target_url (nullable) is None
        # and __fields_set__ contains the field
        if self.target_url is None and "target_url" in self.__fields_set__:
            _dict['targetUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonaTokenWrite:
        """Create an instance of PersonaTokenWrite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonaTokenWrite.parse_obj(obj)

        _obj = PersonaTokenWrite.parse_obj({
            "target_url": obj.get("targetUrl")
        })
        return _obj


