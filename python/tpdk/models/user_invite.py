# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.91
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class UserInvite(BaseModel):
    """
      # noqa: E501
    """
    first_name: constr(strict=True, max_length=64, min_length=1) = Field(..., alias="firstName")
    last_name: constr(strict=True, max_length=64, min_length=1) = Field(..., alias="lastName")
    email: constr(strict=True, max_length=180) = Field(...)
    invited_role: Optional[conlist(StrictStr)] = Field(..., alias="invitedRole")
    __properties = ["firstName", "lastName", "email", "invitedRole"]

    @validator('invited_role')
    def invited_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('ROLE_ADMIN', 'ROLE_CONSULTANT', 'ROLE_ACCOUNTING_MANAGER', 'ROLE_BILLING_MANAGER', 'ROLE_CUSTOMER_SERVICE'):
                raise ValueError("each list item must be one of ('ROLE_ADMIN', 'ROLE_CONSULTANT', 'ROLE_ACCOUNTING_MANAGER', 'ROLE_BILLING_MANAGER', 'ROLE_CUSTOMER_SERVICE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserInvite:
        """Create an instance of UserInvite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if invited_role (nullable) is None
        # and __fields_set__ contains the field
        if self.invited_role is None and "invited_role" in self.__fields_set__:
            _dict['invitedRole'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserInvite:
        """Create an instance of UserInvite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserInvite.parse_obj(obj)

        _obj = UserInvite.parse_obj({
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "email": obj.get("email"),
            "invited_role": obj.get("invitedRole")
        })
        return _obj


