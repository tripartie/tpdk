# coding: utf-8

"""
    Tripartie

    Our API suite for the **Resolution Center** and the **Safe Checkout** features. Simple, yet elegant web interfaces for your convenience. One request away from your first automated resolution or safe-checkout.

    The version of the OpenAPI document: 2.0.91
    Contact: noc@tripartie.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class WorkflowEventDisputeRead(BaseModel):
    """
      # noqa: E501
    """
    label: StrictStr = Field(...)
    var_from: Optional[StrictStr] = Field(None, alias="from")
    to: Optional[StrictStr] = None
    event: Optional[StrictStr] = None
    occurred_at: Optional[datetime] = Field(None, alias="occurredAt")
    initiator: Optional[StrictStr] = None
    __properties = ["label", "from", "to", "event", "occurredAt", "initiator"]

    @validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('dispute.opened', 'dispute.submitted', 'dispute.created', 'dispute.abandoned', 'dispute.settlement', 'dispute.closed', 'dispute.expired', 'dispute.manual_arbitration_required', 'dispute.updated', 'dispute.reminder', 'offer.created', 'offer.expired', 'offer.updated', 'offer.crawl_failure', 'offer.transaction.authorized', 'offer.transaction.reconciled', 'offer.transaction.abandoned', 'offer.closed', 'offer.transaction.refund', 'persona.added', 'null'):
            raise ValueError("must be one of enum values ('dispute.opened', 'dispute.submitted', 'dispute.created', 'dispute.abandoned', 'dispute.settlement', 'dispute.closed', 'dispute.expired', 'dispute.manual_arbitration_required', 'dispute.updated', 'dispute.reminder', 'offer.created', 'offer.expired', 'offer.updated', 'offer.crawl_failure', 'offer.transaction.authorized', 'offer.transaction.reconciled', 'offer.transaction.abandoned', 'offer.closed', 'offer.transaction.refund', 'persona.added', 'null')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowEventDisputeRead:
        """Create an instance of WorkflowEventDisputeRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "occurred_at",
                            "initiator",
                          },
                          exclude_none=True)
        # set to None if var_from (nullable) is None
        # and __fields_set__ contains the field
        if self.var_from is None and "var_from" in self.__fields_set__:
            _dict['from'] = None

        # set to None if to (nullable) is None
        # and __fields_set__ contains the field
        if self.to is None and "to" in self.__fields_set__:
            _dict['to'] = None

        # set to None if event (nullable) is None
        # and __fields_set__ contains the field
        if self.event is None and "event" in self.__fields_set__:
            _dict['event'] = None

        # set to None if initiator (nullable) is None
        # and __fields_set__ contains the field
        if self.initiator is None and "initiator" in self.__fields_set__:
            _dict['initiator'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowEventDisputeRead:
        """Create an instance of WorkflowEventDisputeRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowEventDisputeRead.parse_obj(obj)

        _obj = WorkflowEventDisputeRead.parse_obj({
            "label": obj.get("label"),
            "var_from": obj.get("from"),
            "to": obj.get("to"),
            "event": obj.get("event"),
            "occurred_at": obj.get("occurredAt"),
            "initiator": obj.get("initiator")
        })
        return _obj


